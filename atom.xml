<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haohao</title>
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://githubhaohao.github.io/"/>
  <updated>2018-02-10T07:57:47.222Z</updated>
  <id>https://githubhaohao.github.io/</id>
  
  <author>
    <name>haohao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NDK 直播推流与引流</title>
    <link href="https://githubhaohao.github.io/2018/02/10/NDK-live-streaming-push-and-pull/"/>
    <id>https://githubhaohao.github.io/2018/02/10/NDK-live-streaming-push-and-pull/</id>
    <published>2018-02-10T05:28:00.000Z</published>
    <updated>2018-02-10T07:57:47.222Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20180229.jpeg" alt="Markdown"></p><p></p>
<p><div align="center">最好的年终奖是拥有随时可以跳槽的能力。</div><br></p>
<blockquote>
<p>本篇介绍一下直播技术中推流与引流的简单实现。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：                                                                                                                                                                                          </p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
<li><a href="http://haohaochang.cn/2018/01/09/NDK-posix-multi-thread/" target="_blank" rel="external">NDK POSIX 多线程编程</a></li>
<li><a href="http://haohaochang.cn/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/" target="_blank" rel="external">NDK Android OpenSL ES 音频采集与播放</a></li>
<li><a href="http://haohaochang.cn/2018/01/20/NDK-FFmpeg-compile/" target="_blank" rel="external">NDK FFmpeg 编译</a></li>
<li><a href="http://haohaochang.cn/2018/01/24/NDK-FFmpeg-video-decoding/" target="_blank" rel="external">NDK FFmpeg 音视频解码</a></li>
<li><a href="http://haohaochang.cn/2018/02/03/NDK-set-up-streaming-media-server/" target="_blank" rel="external">NDK 直播流媒体服务器搭建</a></li>
</ul>
<h1 id="流媒体服务器测试"><a href="#流媒体服务器测试" class="headerlink" title="流媒体服务器测试"></a>流媒体服务器测试</h1><p>首先利用<a href="https://apkpure.biz/cn.nodemedia.qlive/%E5%BF%AB%E7%9B%B4%E6%92%AD" target="_blank" rel="external">快直播 app</a>（其他支持 RTMP 推流与引流的 app 亦可）和 ffplay.exe 对流媒体服务器进行测试。</p>
<p>快直播的推流界面和引流界面<br><img src="http://ovv1lq7pk.bkt.clouddn.com/live/qlive_push.jpg" alt=""></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/live/qlive_play.jpg" alt=""></p>
<p>Windows 下利用 ffplay 进行引流，命令行执行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffplay rtmp://192.168.0.0/live/<span class="built_in">test</span>  </div><div class="line"><span class="comment"># ip 地址换成流媒体服务器的地址， test 表示直播房间号</span></div></pre></td></tr></table></figure></p>
<p>测试结果：<br><img src="http://ovv1lq7pk.bkt.clouddn.com/live/live_test.png" alt=""></p>
<h1 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h1><p>本文直播推流步骤：</p>
<ul>
<li>使用 AudioRecord 采集音频，使用 Camera API 采集视频数据</li>
<li>分别使用 faac 和 xh264 第三方库在 Native 层对音频和视频进行编码</li>
<li>利用 rtmp-dump 第三方库进行打包和推流</li>
</ul>
<p>工程目录：<br><img src="http://ovv1lq7pk.bkt.clouddn.com/live/project_structure.png" alt=""></p>
<p>主要的 JNI 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativePush</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">startPush</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">stopPush</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置视频参数</div><div class="line">     * <span class="doctag">@param</span> width</div><div class="line">     * <span class="doctag">@param</span> height</div><div class="line">     * <span class="doctag">@param</span> bitrate</div><div class="line">     * <span class="doctag">@param</span> fps</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setVideoOptions</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> bitrate, <span class="keyword">int</span> fps)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置音频参数</div><div class="line">     * <span class="doctag">@param</span> sampleRateInHz</div><div class="line">     * <span class="doctag">@param</span> channel</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setAudioOptions</span><span class="params">(<span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> channel)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送视频数据</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">fireVideo</span><span class="params">(<span class="keyword">byte</span>[] data)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送音频数据</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     * <span class="doctag">@param</span> len</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">fireAudio</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">int</span> len)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="视频采集"><a href="#视频采集" class="headerlink" title="视频采集"></a>视频采集</h2><p>视频采集主要基于 Camera 相关 API ，利用 SurfaceView 进行预览，通过 PreviewCallback 获取相机预览数据。</p>
<p>视频预览主要代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPreview</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         mCamera = Camera.open(mVideoParams.getCameraId());</div><div class="line">         Camera.Parameters param = mCamera.getParameters();</div><div class="line"></div><div class="line">         List&lt;Camera.Size&gt; previewSizes = param.getSupportedPreviewSizes();</div><div class="line">         <span class="keyword">int</span> length = previewSizes.size();</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">             Log.i(TAG, <span class="string">"SupportedPreviewSizes : "</span> + previewSizes.get(i).width + <span class="string">"x"</span> + previewSizes.get(i).height);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         mVideoParams.setWidth(previewSizes.get(<span class="number">0</span>).width);</div><div class="line">         mVideoParams.setHeight(previewSizes.get(<span class="number">0</span>).height);</div><div class="line"></div><div class="line">         param.setPreviewFormat(ImageFormat.NV21);</div><div class="line">         param.setPreviewSize(mVideoParams.getWidth(), mVideoParams.getHeight());</div><div class="line"></div><div class="line">         mCamera.setParameters(param);</div><div class="line">         <span class="comment">//mCamera.setDisplayOrientation(90); // 竖屏</span></div><div class="line">         mCamera.setPreviewDisplay(mSurfaceHolder);</div><div class="line"></div><div class="line">         buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[mVideoParams.getWidth() * mVideoParams.getHeight() * <span class="number">4</span>];</div><div class="line">         mCamera.addCallbackBuffer(buffer);</div><div class="line">         mCamera.setPreviewCallbackWithBuffer(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">         mCamera.startPreview();</div><div class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>利用 FrameCallback 获取预览数据传入 Native 层，然后进行编码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreviewFrame</span><span class="params">(<span class="keyword">byte</span>[] bytes, Camera camera)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mCamera != <span class="keyword">null</span>) &#123;</div><div class="line">        mCamera.addCallbackBuffer(buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mIsPushing) &#123;</div><div class="line">        mNativePush.fireVideo(bytes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="音频采集"><a href="#音频采集" class="headerlink" title="音频采集"></a>音频采集</h2><p>音频采集基于 AudioRecord 实现，在一个子线程采集音频 PCM 数据，并将数据不断传入 Native 层进行编码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioRecordRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mAudioRecord.startRecording();</div><div class="line">        <span class="keyword">while</span> (mIsPushing) &#123;</div><div class="line">            <span class="comment">//通过AudioRecord不断读取音频数据</span></div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[mMinBufferSize];</div><div class="line">            <span class="keyword">int</span> length = mAudioRecord.read(buffer, <span class="number">0</span>, buffer.length);</div><div class="line">            <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//传递给 Native 代码，进行音频编码</span></div><div class="line">                mNativePush.fireAudio(buffer, length);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="编码和推流"><a href="#编码和推流" class="headerlink" title="编码和推流"></a>编码和推流</h2><p>音视频数据编码和推流在 Native 层实现，首先添加 faac ， x264 ， librtmp 第三方库到 AS 工程，然后初始化相关设置，基于生产者与消费者模式，将编码后的音视频数据，在生产者线程中打包 RTMPPacket 放入双向链表，在消费者线程中从链表中取 RTMPPacket ，通过 RTMP_SendPacket 方法发送给服务器。</p>
<p>x264 初始化：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_live_jni_NativePush_setVideoOptions</span><span class="params">(JNIEnv *env, jobject instance, jint width,</span></div><div class="line">                                                    jint height, jint bitRate, jint fps) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">x264_param_t</span> param;</div><div class="line">    <span class="comment">//x264_param_default_preset 设置</span></div><div class="line">    x264_param_default_preset(&amp;param, <span class="string">"ultrafast"</span>, <span class="string">"zerolatency"</span>);</div><div class="line">    <span class="comment">//编码输入的像素格式YUV420P</span></div><div class="line">    param.i_csp = X264_CSP_I420;</div><div class="line">    param.i_width = width;</div><div class="line">    param.i_height = height;</div><div class="line"></div><div class="line">    y_len = width * height;</div><div class="line">    u_len = y_len / <span class="number">4</span>;</div><div class="line">    v_len = u_len;</div><div class="line"></div><div class="line">    <span class="comment">//参数i_rc_method表示码率控制，CQP(恒定质量)，CRF(恒定码率)，ABR(平均码率)</span></div><div class="line">    <span class="comment">//恒定码率，会尽量控制在固定码率</span></div><div class="line">    param.rc.i_rc_method = X264_RC_CRF;</div><div class="line">    param.rc.i_bitrate = bitRate / <span class="number">1000</span>; <span class="comment">//* 码率(比特率,单位Kbps)</span></div><div class="line">    param.rc.i_vbv_max_bitrate = bitRate / <span class="number">1000</span> * <span class="number">1.2</span>; <span class="comment">//瞬时最大码率</span></div><div class="line"></div><div class="line">    <span class="comment">//码率控制不通过timebase和timestamp，而是fps</span></div><div class="line">    param.b_vfr_input = <span class="number">0</span>;</div><div class="line">    param.i_fps_num = fps; <span class="comment">//* 帧率分子</span></div><div class="line">    param.i_fps_den = <span class="number">1</span>; <span class="comment">//* 帧率分母</span></div><div class="line">    param.i_timebase_den = param.i_fps_num;</div><div class="line">    param.i_timebase_num = param.i_fps_den;</div><div class="line">    param.i_threads = <span class="number">1</span>;<span class="comment">//并行编码线程数量，0默认为多线程</span></div><div class="line"></div><div class="line">    <span class="comment">//是否把SPS和PPS放入每一个关键帧</span></div><div class="line">    <span class="comment">//SPS Sequence Parameter Set 序列参数集，PPS Picture Parameter Set 图像参数集</span></div><div class="line">    <span class="comment">//为了提高图像的纠错能力</span></div><div class="line">    param.b_repeat_headers = <span class="number">1</span>;</div><div class="line">    <span class="comment">//设置Level级别</span></div><div class="line">    param.i_level_idc = <span class="number">51</span>;</div><div class="line">    <span class="comment">//设置Profile档次</span></div><div class="line">    <span class="comment">//baseline级别，没有B帧,只有 I 帧和 P 帧</span></div><div class="line">    x264_param_apply_profile(&amp;param, <span class="string">"baseline"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//x264_picture_t（输入图像）初始化</span></div><div class="line">    x264_picture_alloc(&amp;pic_in, param.i_csp, param.i_width, param.i_height);</div><div class="line">    pic_in.i_pts = <span class="number">0</span>;</div><div class="line">    <span class="comment">//打开编码器</span></div><div class="line">    video_encode_handle = x264_encoder_open(&amp;param);</div><div class="line">    <span class="keyword">if</span> (video_encode_handle) &#123;</div><div class="line">        LOGI(<span class="string">"打开视频编码器成功"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        throwNativeError(env, INIT_FAILED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>faac 初始化：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_live_jni_NativePush_setAudioOptions</span><span class="params">(JNIEnv *env, jobject instance,</span></div><div class="line">                                                    jint sampleRateInHz, jint channel) &#123;</div><div class="line">    audio_encode_handle = faacEncOpen(sampleRateInHz, channel, &amp;nInputSamples,</div><div class="line">                                      &amp;nMaxOutputBytes);</div><div class="line">    <span class="keyword">if</span> (!audio_encode_handle) &#123;</div><div class="line">        LOGE(<span class="string">"音频编码器打开失败"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置音频编码参数</span></div><div class="line">    faacEncConfigurationPtr p_config = faacEncGetCurrentConfiguration(audio_encode_handle);</div><div class="line">    p_config-&gt;mpegVersion = MPEG4;</div><div class="line">    p_config-&gt;allowMidside = <span class="number">1</span>;</div><div class="line">    p_config-&gt;aacObjectType = LOW;</div><div class="line">    p_config-&gt;outputFormat = <span class="number">0</span>; <span class="comment">//输出是否包含ADTS头</span></div><div class="line">    p_config-&gt;useTns = <span class="number">1</span>; <span class="comment">//时域噪音控制,大概就是消爆音</span></div><div class="line">    p_config-&gt;useLfe = <span class="number">0</span>;</div><div class="line"><span class="comment">//	p_config-&gt;inputFormat = FAAC_INPUT_16BIT;</span></div><div class="line">    p_config-&gt;quantqual = <span class="number">100</span>;</div><div class="line">    p_config-&gt;bandWidth = <span class="number">0</span>; <span class="comment">//频宽</span></div><div class="line">    p_config-&gt;shortctl = SHORTCTL_NORMAL;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!faacEncSetConfiguration(audio_encode_handle, p_config)) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"音频编码器配置失败.."</span>);</div><div class="line">        throwNativeError(env, INIT_FAILED);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LOGI(<span class="string">"%s"</span>, <span class="string">"音频编码器配置成功"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对视频数据进行编码打包，通过 add_rtmp_packet 放入链表：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_live_jni_NativePush_fireVideo</span><span class="params">(JNIEnv *env, jobject instance, jbyteArray buffer_)</span> &#123;</div><div class="line">    <span class="comment">//视频数据转为YUV420P</span></div><div class="line">    <span class="comment">//NV21-&gt;YUV420P</span></div><div class="line">    jbyte *nv21_buffer = (*env)-&gt;GetByteArrayElements(env, buffer_, <span class="literal">NULL</span>);</div><div class="line">    jbyte *u = pic_in.img.plane[<span class="number">1</span>];</div><div class="line">    jbyte *v = pic_in.img.plane[<span class="number">2</span>];</div><div class="line">    <span class="comment">//nv21 4:2:0 Formats, 12 Bits per Pixel</span></div><div class="line">    <span class="comment">//nv21与yuv420p，y个数一致，uv位置对调</span></div><div class="line">    <span class="comment">//nv21转yuv420p  y = w*h,u/v=w*h/4</span></div><div class="line">    <span class="comment">//nv21 = yvu yuv420p=yuv y=y u=y+1+1 v=y+1</span></div><div class="line">    <span class="comment">//如果要进行图像处理（美颜），可以再转换为RGB</span></div><div class="line">    <span class="comment">//还可以结合OpenCV识别人脸等等</span></div><div class="line">    <span class="built_in">memcpy</span>(pic_in.img.plane[<span class="number">0</span>], nv21_buffer, y_len);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; u_len; i++) &#123;</div><div class="line">        *(u + i) = *(nv21_buffer + y_len + i * <span class="number">2</span> + <span class="number">1</span>);</div><div class="line">        *(v + i) = *(nv21_buffer + y_len + i * <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//h264编码得到NALU数组</span></div><div class="line">    <span class="keyword">x264_nal_t</span> *nal = <span class="literal">NULL</span>; <span class="comment">//NAL</span></div><div class="line">    <span class="keyword">int</span> n_nal = <span class="number">-1</span>; <span class="comment">//NALU的个数</span></div><div class="line">    <span class="comment">//进行h264编码</span></div><div class="line">    <span class="keyword">if</span> (x264_encoder_encode(video_encode_handle, &amp;nal, &amp;n_nal, &amp;pic_in, &amp;pic_out) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"编码失败"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//使用rtmp协议将h264编码的视频数据发送给流媒体服务器</span></div><div class="line">    <span class="comment">//帧分为关键帧和普通帧，为了提高画面的纠错率，关键帧应包含SPS和PPS数据</span></div><div class="line">    <span class="keyword">int</span> sps_len, pps_len;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sps[<span class="number">100</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pps[<span class="number">100</span>];</div><div class="line">    <span class="built_in">memset</span>(sps, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">memset</span>(pps, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">    pic_in.i_pts += <span class="number">1</span>; <span class="comment">//顺序累加</span></div><div class="line">    <span class="comment">//遍历NALU数组，根据NALU的类型判断</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n_nal; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (nal[i].i_type == NAL_SPS) &#123;</div><div class="line">            <span class="comment">//复制SPS数据，序列参数集(Sequence parameter set)</span></div><div class="line">            sps_len = nal[i].i_payload - <span class="number">4</span>;</div><div class="line">            <span class="built_in">memcpy</span>(sps, nal[i].p_payload + <span class="number">4</span>, sps_len); <span class="comment">//不复制四字节起始码</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nal[i].i_type == NAL_PPS) &#123;</div><div class="line">            <span class="comment">//复制PPS数据，图像参数集（Picture parameter set）</span></div><div class="line">            pps_len = nal[i].i_payload - <span class="number">4</span>;</div><div class="line">            <span class="built_in">memcpy</span>(pps, nal[i].p_payload + <span class="number">4</span>, pps_len); <span class="comment">//不复制四字节起始码</span></div><div class="line"></div><div class="line">            <span class="comment">//发送序列信息</span></div><div class="line">            <span class="comment">//h264关键帧会包含SPS和PPS数据</span></div><div class="line">            add_264_sequence_header(pps, sps, pps_len, sps_len);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//发送帧信息</span></div><div class="line">            add_264_body(nal[i].p_payload, nal[i].i_payload);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    (*env)-&gt;ReleaseByteArrayElements(env, buffer_, nv21_buffer, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样，对音频数据进行编码打包放入链表：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_live_jni_NativePush_fireAudio</span><span class="params">(JNIEnv *env, jobject instance, jbyteArray buffer_,</span></div><div class="line">                                              jint length) &#123;</div><div class="line">    <span class="keyword">int</span> *pcmbuf;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *bitbuf;</div><div class="line">    jbyte *b_buffer = (*env)-&gt;GetByteArrayElements(env, buffer_, <span class="number">0</span>);</div><div class="line">    pcmbuf = (<span class="keyword">short</span> *) <span class="built_in">malloc</span>(nInputSamples * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    bitbuf = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) <span class="built_in">malloc</span>(nMaxOutputBytes * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>));</div><div class="line">    <span class="keyword">int</span> nByteCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nBufferSize = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) length / <span class="number">2</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> *buf = (<span class="keyword">unsigned</span> <span class="keyword">short</span> *) b_buffer;</div><div class="line">    <span class="keyword">while</span> (nByteCount &lt; nBufferSize) &#123;</div><div class="line">        <span class="keyword">int</span> audioLength = nInputSamples;</div><div class="line">        <span class="keyword">if</span> ((nByteCount + nInputSamples) &gt;= nBufferSize) &#123;</div><div class="line">            audioLength = nBufferSize - nByteCount;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; audioLength; i++) &#123;<span class="comment">//每次从实时的pcm音频队列中读出量化位数为8的pcm数据。</span></div><div class="line">            <span class="keyword">int</span> s = ((<span class="keyword">int16_t</span> *) buf + nByteCount)[i];</div><div class="line">            pcmbuf[i] = s &lt;&lt; <span class="number">8</span>;<span class="comment">//用8个二进制位来表示一个采样量化点（模数转换）</span></div><div class="line">        &#125;</div><div class="line">        nByteCount += nInputSamples;</div><div class="line">        <span class="comment">//利用FAAC进行编码，pcmbuf为转换后的pcm流数据，audioLength为调用faacEncOpen时得到的输入采样数，bitbuf为编码后的数据buff，nMaxOutputBytes为调用faacEncOpen时得到的最大输出字节数</span></div><div class="line">        <span class="keyword">int</span> byteslen = faacEncEncode(audio_encode_handle, pcmbuf, audioLength,</div><div class="line">                                     bitbuf, nMaxOutputBytes);</div><div class="line">        <span class="keyword">if</span> (byteslen &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        add_aac_body(bitbuf, byteslen);<span class="comment">//从bitbuf中得到编码后的aac数据流，放到数据队列</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (bitbuf)</div><div class="line">        <span class="built_in">free</span>(bitbuf);</div><div class="line">    <span class="keyword">if</span> (pcmbuf)</div><div class="line">        <span class="built_in">free</span>(pcmbuf);</div><div class="line"></div><div class="line">    (*env)-&gt;ReleaseByteArrayElements(env, buffer_, b_buffer, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>消费者线程不断从链表中取 RTMPPacket 发送给服务器：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">push_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</div><div class="line">    JNIEnv *env;<span class="comment">//获取当前线程JNIEnv</span></div><div class="line">    (*javaVM)-&gt;AttachCurrentThread(javaVM, &amp;env, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">//建立RTMP连接</span></div><div class="line">    RTMP *rtmp = RTMP_Alloc();</div><div class="line">    <span class="keyword">if</span> (!rtmp) &#123;</div><div class="line">        LOGE(<span class="string">"rtmp初始化失败"</span>);</div><div class="line">        <span class="keyword">goto</span> end;</div><div class="line">    &#125;</div><div class="line">    RTMP_Init(rtmp);</div><div class="line">    rtmp-&gt;Link.timeout = <span class="number">5</span>; <span class="comment">//连接超时的时间</span></div><div class="line">    <span class="comment">//设置流媒体地址</span></div><div class="line">    RTMP_SetupURL(rtmp, rtmp_path);</div><div class="line">    <span class="comment">//发布rtmp数据流</span></div><div class="line">    RTMP_EnableWrite(rtmp);</div><div class="line">    <span class="comment">//建立连接</span></div><div class="line">    <span class="keyword">if</span> (!RTMP_Connect(rtmp, <span class="literal">NULL</span>)) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"RTMP 连接失败"</span>);</div><div class="line">        throwNativeError(env, CONNECT_FAILED);</div><div class="line">        <span class="keyword">goto</span> end;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//计时</span></div><div class="line">    start_time = RTMP_GetTime();</div><div class="line">    <span class="keyword">if</span> (!RTMP_ConnectStream(rtmp, <span class="number">0</span>)) &#123; <span class="comment">//连接流</span></div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"RTMP ConnectStream failed"</span>);</div><div class="line">        throwNativeError(env, CONNECT_FAILED);</div><div class="line">        <span class="keyword">goto</span> end;</div><div class="line">    &#125;</div><div class="line">    is_pushing = TRUE;</div><div class="line">    <span class="comment">//发送AAC头信息</span></div><div class="line">    add_aac_sequence_header();</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (is_pushing) &#123;</div><div class="line">        <span class="comment">//发送</span></div><div class="line">        pthread_mutex_lock(&amp;mutex);</div><div class="line">        pthread_cond_wait(&amp;cond, &amp;mutex);</div><div class="line">        <span class="comment">//取出队列中的RTMPPacket</span></div><div class="line">        RTMPPacket *packet = queue_get_first();</div><div class="line">        <span class="keyword">if</span> (packet) &#123;</div><div class="line">            queue_delete_first(); <span class="comment">//移除</span></div><div class="line">            packet-&gt;m_nInfoField2 = rtmp-&gt;m_stream_id; <span class="comment">//RTMP协议，stream_id数据</span></div><div class="line">            <span class="keyword">int</span> i = RTMP_SendPacket(rtmp, packet, TRUE); <span class="comment">//TRUE放入librtmp队列中，并不是立即发送</span></div><div class="line">            <span class="keyword">if</span> (!i) &#123;</div><div class="line">                LOGE(<span class="string">"RTMP 断开"</span>);</div><div class="line">                RTMPPacket_Free(packet);</div><div class="line">                pthread_mutex_unlock(&amp;mutex);</div><div class="line">                <span class="keyword">goto</span> end;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                LOGI(<span class="string">"%s"</span>, <span class="string">"rtmp send packet"</span>);</div><div class="line">            &#125;</div><div class="line">            RTMPPacket_Free(packet);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pthread_mutex_unlock(&amp;mutex);</div><div class="line">    &#125;</div><div class="line">    end:</div><div class="line">    LOGI(<span class="string">"%s"</span>, <span class="string">"释放资源"</span>);</div><div class="line">    <span class="built_in">free</span>(rtmp_path);</div><div class="line">    RTMP_Close(rtmp);</div><div class="line">    RTMP_Free(rtmp);</div><div class="line">    (*javaVM)-&gt;DetachCurrentThread(javaVM);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="引流"><a href="#引流" class="headerlink" title="引流"></a>引流</h1><p>这里引流就不做展开讲，可以通过 QLive 的 SDK 或者 vitamio （小楠总）等第三方库实现。</p>
<p>基于 vitamio 实现引流：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mVideoView = (VideoView) findViewById(R.id.live_player_view);</div><div class="line">    mVideoView.setVideoPath(SPUtils.getInstance(<span class="keyword">this</span>).getString(SPUtils.KEY_NGINX_SER_URI));</div><div class="line">    mVideoView.setMediaController(<span class="keyword">new</span> MediaController(<span class="keyword">this</span>));</div><div class="line">    mVideoView.requestFocus();</div><div class="line"></div><div class="line">    mVideoView.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">            mp.setPlaybackSpeed(<span class="number">1.0f</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>PS：源码地址：<a href="https://github.com/githubhaohao/NDKLive" target="_blank" rel="external">https://github.com/githubhaohao/NDKLive</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20180229.jpeg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;最
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="直播" scheme="https://githubhaohao.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>NDK 直播流媒体服务器搭建</title>
    <link href="https://githubhaohao.github.io/2018/02/03/NDK-set-up-streaming-media-server/"/>
    <id>https://githubhaohao.github.io/2018/02/03/NDK-set-up-streaming-media-server/</id>
    <published>2018-02-03T05:42:32.000Z</published>
    <updated>2018-02-03T08:22:12.720Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20180218.jpeg" alt="Markdown"></p><p></p>
<p><div align="center">树立一个远大的目标是必要的，然而仅靠目标做动力，这种动力就是强迫式的，而有这种动力的人非常容易焦虑。</div><br></p>
<blockquote>
<p>本篇介绍一下基于 Nginx 搭建一个非常简单的流媒体服务器。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：                                                                                                                                                                                          </p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
<li><a href="http://haohaochang.cn/2018/01/09/NDK-posix-multi-thread/" target="_blank" rel="external">NDK POSIX 多线程编程</a></li>
<li><a href="http://haohaochang.cn/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/" target="_blank" rel="external">NDK Android OpenSL ES 音频采集与播放</a></li>
<li><a href="http://haohaochang.cn/2018/01/20/NDK-FFmpeg-compile/" target="_blank" rel="external">NDK FFmpeg 编译</a></li>
<li><a href="http://haohaochang.cn/2018/01/24/NDK-FFmpeg-video-decoding/" target="_blank" rel="external">NDK FFmpeg 音视频解码</a></li>
</ul>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx 是由俄罗斯人 <a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E6%88%88%E7%88%BE%C2%B7%E8%B3%BD%E7%B4%A2%E8%80%B6%E5%A4%AB" title="Igor Sysoev" target="_blank" rel="external">Igor Sysoev</a> 编写的轻量级 Web 服务器，发音为 “engine x”，也可用作反向代理和负载均衡器，于 2004 年公开发布，遵循 BSD 开源许可，它以高稳定性、丰富的功能以及低系统开销而出名。Nginx 也是一种模块化的服务器，基于 Nginx 可以灵活添加各种功能模块，如 HTTP 模块、WebSocket 模块、RTMP 模块等，不同模块占用不同的端口，相互独立，如本文中要使用的 RTMP 模块默认端口为 1935 。</p>
<p>本文中的 Nginx 服务器只添加了一个 RTMP 模块，用作一个简单的流媒体服务器。</p>
<h1 id="RTMP-协议"><a href="#RTMP-协议" class="headerlink" title="RTMP 协议"></a>RTMP 协议</h1><p>RTMP （ Real Time Message Protocol ）协议是一种实时信息传输协议，由 Adobe 公司开发，用来解决多媒体数据传输流的多路复用（ Multiplexing ）和分包（ packetizing ）的问题，它是应用层协议，传输层通常基于 TCP 实现。RTMP 协议在前期并未受到太多的重视，近两年随着 VR 以及视频直播领域的火热，RTMP 协议正逐渐成为主流。</p>
<h1 id="直播框架"><a href="#直播框架" class="headerlink" title="直播框架"></a>直播框架</h1><p><img src="http://ovv1lq7pk.bkt.clouddn.com/livelive-framework.png" alt=""></p>
<p>搭建一个简易的直播框架需要三个角色：直播（推流）客户端，流媒体服务器和引流客户端。</p>
<h1 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h1><p>环境： Ubuntu 16.04 ，注意：若使用阿里云主机需要配置安全组规则，开放 80 、1935 等端口。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/livemanager-port.png" alt=""></p>
<p>安装 nginx 和 nginx-rtmp 编译依赖工具:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</div></pre></td></tr></table></figure></p>
<p>工作目录：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir nginx</div><div class="line">chmod +x -R nginx/</div><div class="line"><span class="built_in">cd</span> live</div></pre></td></tr></table></figure></p>
<p>下载 nginx 和 nginx-rtmp 源码:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/download/nginx-1.8.1.tar.gz</div><div class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</div></pre></td></tr></table></figure></p>
<p>解压：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 unzip</span></div><div class="line"><span class="comment"># sudo apt-get install unzip</span></div><div class="line">tar -zxvf nginx-1.8.1.tar.gz</div><div class="line">unzip master.zip</div></pre></td></tr></table></figure></p>
<p>添加 rtmp-nginx 模块:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> nginx-1.8.1</div><div class="line">./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master</div></pre></td></tr></table></figure></p>
<p>编译、安装：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编译 nginx 源码</span></div><div class="line">make</div><div class="line"><span class="comment"># 安装</span></div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>启动 Nginx 服务：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service nginx start</div><div class="line"><span class="comment"># sudo service nginx stop 停止</span></div></pre></td></tr></table></figure></p>
<p>打开浏览器 <a href="http://127.0.0.1/" target="_blank" rel="external">http://127.0.0.1/</a> 或者输入阿里云主机的公网 ip :</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/livenginx-index.png" alt=""></p>
<p>安装 FFmpeg：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ffmpeg</div><div class="line"><span class="comment"># 查看版本信息</span></div><div class="line">ffmpeg -v</div></pre></td></tr></table></figure></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/liveffmapeg-version.png" alt=""><br>配置 nginx 服务器：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 进入 nginx 安装目录</span></div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx</div><div class="line"><span class="comment"># 修改配置文件 /usr/local/nginx/conf/nginx.conf</span></div><div class="line"><span class="comment"># 在配置文件中添加以下代码</span></div><div class="line">rtmp &#123;</div><div class="line">    server &#123;</div><div class="line">            listen 1935;</div><div class="line">            chunk_size 4096;</div><div class="line"></div><div class="line">            application live &#123;</div><div class="line">                    live on;</div><div class="line">                    record off;</div><div class="line">                    <span class="built_in">exec</span> ffmpeg -i rtmp://localhost/live/<span class="variable">$name</span> -threads 1 -c:v libx264 -profile:v baseline -b:v 350K <span class="_">-s</span> 640x360 <span class="_">-f</span> flv -c:a aac -ac 1 -strict -2 -b:a 56k rtmp://localhost/live360p/<span class="variable">$name</span>;</div><div class="line">            &#125;</div><div class="line">            application live360p &#123;</div><div class="line">                    live on;</div><div class="line">                    record off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启 nginx 服务器：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<p>到目前为止，一个简单的流媒体服务器搭建完成，接下来将实现服务器与客户端之间的推流和引流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20180218.jpeg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;树
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="Nginx" scheme="https://githubhaohao.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>NDK FFmpeg 音视频解码</title>
    <link href="https://githubhaohao.github.io/2018/01/24/NDK-FFmpeg-video-decoding/"/>
    <id>https://githubhaohao.github.io/2018/01/24/NDK-FFmpeg-video-decoding/</id>
    <published>2018-01-24T13:36:08.000Z</published>
    <updated>2018-01-29T07:12:19.149Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20180204.jpeg" alt="Markdown"></p><p></p>
<p><div align="center">诸葛亮躬耕隆中的时候，与好友石广元、徐庶、孟公威在一起求学，其他三人读书都是一定要滚瓜烂熟，只有诸葛亮只观其大略。</div><br></p>
<blockquote>
<p>本篇介绍一下 FFmpeg 音视频解码。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：                                                                                                                                                                                          </p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
<li><a href="http://haohaochang.cn/2018/01/09/NDK-posix-multi-thread/" target="_blank" rel="external">NDK POSIX 多线程编程</a></li>
<li><a href="http://haohaochang.cn/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/" target="_blank" rel="external">NDK Android OpenSL ES 音频采集与播放</a></li>
<li><a href="http://haohaochang.cn/2018/01/20/NDK-FFmpeg-compile/" target="_blank" rel="external">NDK FFmpeg 编译</a></li>
</ul>
<h1 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h1><p>我们经常所说的视频格式，如 mp4 、 mkv 、 rmvb 、flv 等，表示的是音视频的封装格式，封装格式实质上是把音频数据、视频数据和字幕数据打包成一个文件的规范。从技术的角度来讲，优秀的音视频封装格式应该支持大多数音视频编码标准。<br>主要的封装格式:</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">机构</th>
<th style="text-align:center">支持的视频编码</th>
<th style="text-align:center">支持的音频编码</th>
<th style="text-align:center">使用领域</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVI</td>
<td style="text-align:center">微软</td>
<td style="text-align:center">几乎所有格式</td>
<td style="text-align:center">几乎所有格式</td>
<td style="text-align:center">BT 下载影视</td>
</tr>
<tr>
<td style="text-align:center">MP4</td>
<td style="text-align:center">MPEG</td>
<td style="text-align:center">MPEG-4 ， H.264 ， H.263 等</td>
<td style="text-align:center">AAC ， MPEG-1 等</td>
<td style="text-align:center">互联网视频网站</td>
</tr>
<tr>
<td style="text-align:center">FLV</td>
<td style="text-align:center">Adobe</td>
<td style="text-align:center">VP6 ， H.264</td>
<td style="text-align:center">MP3 ， AAC 等</td>
<td style="text-align:center">互联网视频网站</td>
</tr>
<tr>
<td style="text-align:center">MKV</td>
<td style="text-align:center">CoreCodec</td>
<td style="text-align:center">几乎所有格式</td>
<td style="text-align:center">几乎所有格式</td>
<td style="text-align:center">互联网视频网站</td>
</tr>
<tr>
<td style="text-align:center">RMVB</td>
<td style="text-align:center">Real Networks</td>
<td style="text-align:center">RealVideo 8 ， 9 ， 10</td>
<td style="text-align:center">AAC ， Cook Codec</td>
<td style="text-align:center">BT 下载影视</td>
</tr>
</tbody>
</table>
<h1 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h1><p>编码的目的在于通过压缩算法降低数据量，提高数据的存储和传输效率。视频编码是将视频像素数据（ RGB ， YUV 等）压缩成为视频码流。音频编码是将音频采样数据（ PCM 等）压缩成为音频码流。<br>主要视频编码格式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">机构</th>
<th style="text-align:center">推出时间</th>
<th style="text-align:center">使用领域</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">H.265</td>
<td style="text-align:center">MPEG/ITU-T</td>
<td style="text-align:center">2013</td>
<td style="text-align:center">研发中</td>
</tr>
<tr>
<td style="text-align:center">H.264</td>
<td style="text-align:center">MPEG/ITU-T</td>
<td style="text-align:center">2003</td>
<td style="text-align:center">各个领域</td>
</tr>
<tr>
<td style="text-align:center">MPEG4</td>
<td style="text-align:center">MPEG</td>
<td style="text-align:center">2001</td>
<td style="text-align:center">小众</td>
</tr>
<tr>
<td style="text-align:center">MPEG2</td>
<td style="text-align:center">MPEG</td>
<td style="text-align:center">1994</td>
<td style="text-align:center">数字电视</td>
</tr>
<tr>
<td style="text-align:center">VP9</td>
<td style="text-align:center">Google</td>
<td style="text-align:center">2013</td>
<td style="text-align:center">研发中</td>
</tr>
<tr>
<td style="text-align:center">VP8</td>
<td style="text-align:center">Google</td>
<td style="text-align:center">2008</td>
<td style="text-align:center">小众</td>
</tr>
</tbody>
</table>
<p>主要音频编码格式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">机构</th>
<th style="text-align:center">推出时间</th>
<th style="text-align:center">使用领域</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AAC</td>
<td style="text-align:center">MPEG</td>
<td style="text-align:center">1997</td>
<td style="text-align:center">各个领域</td>
</tr>
<tr>
<td style="text-align:center">AC-3</td>
<td style="text-align:center">Dolby</td>
<td style="text-align:center">1992</td>
<td style="text-align:center">电影</td>
</tr>
<tr>
<td style="text-align:center">MP3</td>
<td style="text-align:center">MPEG</td>
<td style="text-align:center">1993</td>
<td style="text-align:center">早期普及</td>
</tr>
<tr>
<td style="text-align:center">WMV</td>
<td style="text-align:center">微软</td>
<td style="text-align:center">1999</td>
<td style="text-align:center">Windows</td>
</tr>
</tbody>
</table>
<h1 id="音视频解码流程"><a href="#音视频解码流程" class="headerlink" title="音视频解码流程"></a>音视频解码流程</h1><p><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/decode_video.png" alt=""></p>
<ol>
<li>解封装格式。将输入的按照一定格式封装的音视频数据，分离成为音频流压缩编码数据和视频流压缩编码数据。</li>
<li>解码。将视频和音频的压缩编码数据，解码成为非压缩的视频和音频原始数据。视频压缩数据通过解码输出为像素数据，如 YUV420P 、 RGB 等；音频压缩数据通过解码输出为非压缩的音频抽样数据，如 PCM 数据。</li>
<li>音视频同步。同步解码出来的视频和音频数据，并将音视频数据送至系统的声卡和显卡，播放和显示出来。</li>
</ol>
<h1 id="FFmpeg-函数库"><a href="#FFmpeg-函数库" class="headerlink" title="FFmpeg 函数库"></a>FFmpeg 函数库</h1><p>FFmpeg 一般有 8 个函数库，各个函数库的功能如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数库</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">avcodec</td>
<td style="text-align:center">音视频编解码</td>
</tr>
<tr>
<td style="text-align:center">avdevice</td>
<td style="text-align:center">多媒体设备输入输出</td>
</tr>
<tr>
<td style="text-align:center">avfilter</td>
<td style="text-align:center">滤镜特效</td>
</tr>
<tr>
<td style="text-align:center">avformat</td>
<td style="text-align:center">封装格式处理</td>
</tr>
<tr>
<td style="text-align:center">postproc</td>
<td style="text-align:center">后加工</td>
</tr>
<tr>
<td style="text-align:center">avutil</td>
<td style="text-align:center">工具库</td>
</tr>
<tr>
<td style="text-align:center">swresample</td>
<td style="text-align:center">音频采样数据格式转换</td>
</tr>
<tr>
<td style="text-align:center">swscale</td>
<td style="text-align:center">视频像素数据格式转换</td>
</tr>
</tbody>
</table>
<h1 id="FFmpeg-音视频解码"><a href="#FFmpeg-音视频解码" class="headerlink" title="FFmpeg 音视频解码"></a>FFmpeg 音视频解码</h1><p>FFmpeg 音视频解码主要流程代码描述：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. av_register_all() //注册组件</div><div class="line">2. avformat_alloc_context //获取封装格式上下文</div><div class="line">3. avformat_find_stream_info //获取输入文件信息</div><div class="line">4. avcodec_find_decoder //获取解码器</div><div class="line">5. avcodec_open2 //打开解码器</div><div class="line">6. avcodec_decode_video2 或 avcodec_decode_audio4 //解码音视频帧</div></pre></td></tr></table></figure></p>
<p>在 AS 工程中引入 FFmpeg 8 个动态库和 libyuv （负责视频像素数据格式转换）动态库。<br>工程的头文件目录：<br><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/ffmpeg_so_header_file.png" alt=""><br>工程的动态库目录：<br><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/ffmpeg_so.png" alt=""></p>
<p>Java 层 API ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.haohao.ffmpeg;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.media.AudioFormat;</div><div class="line"><span class="keyword">import</span> android.media.AudioManager;</div><div class="line"><span class="keyword">import</span> android.media.AudioTrack;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.Surface;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * author: haohao</div><div class="line"> * time: 2017/12/19</div><div class="line"> * mail: haohaochang86@gmail.com</div><div class="line"> * desc: AVUtils</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AVUtils"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AVCallback AVCallback;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AVCallback sAVCallback;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerCallback</span><span class="params">(AVCallback callback)</span> </span>&#123;</div><div class="line">        sAVCallback = callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"avfilter-5"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"avdevice-56"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"yuv"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"avutil-54"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"swresample-1"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"avcodec-56"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"avformat-56"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"swscale-3"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"postproc-53"</span>);</div><div class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解码视频中的视频压缩数据</div><div class="line">     * <span class="doctag">@param</span> input_file_path 输入的视频文件路径</div><div class="line">     * <span class="doctag">@param</span> output_file_path 视频压缩数据解码后输出的 YUV 文件路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">videoDecode</span><span class="params">(String input_file_path, String output_file_path)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示视频视频解码后像素数据</div><div class="line">     * <span class="doctag">@param</span> input 输入的视频文件路径</div><div class="line">     * <span class="doctag">@param</span> surface 用于显示视频视频解码后的 RGBA 像素数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">videoRender</span><span class="params">(String input, Surface surface)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解码视频中的音频压缩数据</div><div class="line">     * <span class="doctag">@param</span> input 输入的视频文件路径</div><div class="line">     * <span class="doctag">@param</span> output 音频压缩数据解码后输出的 PCM 文件路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">audioDecode</span><span class="params">(String input, String output)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 播放视频中的音频数据</div><div class="line">     * <span class="doctag">@param</span> input 输入的视频文件路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">audioPlay</span><span class="params">(String input)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个 AudioTrack 对象，用于播放音频,在 Native 层中调用。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AudioTrack <span class="title">createAudioTrack</span><span class="params">(<span class="keyword">int</span> sampleRate, <span class="keyword">int</span> num_channel)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</div><div class="line">        Log.i(TAG, <span class="string">"声道数:"</span> + num_channel);</div><div class="line">        <span class="keyword">int</span> channelConfig;</div><div class="line">        <span class="keyword">if</span> (num_channel == <span class="number">1</span>) &#123;</div><div class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_MONO;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_channel == <span class="number">2</span>) &#123;</div><div class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> bufferSize = AudioTrack.getMinBufferSize(sampleRate, channelConfig, audioFormat);</div><div class="line"></div><div class="line">        AudioTrack audioTrack = <span class="keyword">new</span> AudioTrack(</div><div class="line">                AudioManager.STREAM_MUSIC,</div><div class="line">                sampleRate, channelConfig,</div><div class="line">                audioFormat,</div><div class="line">                bufferSize, AudioTrack.MODE_STREAM);</div><div class="line">        <span class="keyword">return</span> audioTrack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AVCallback</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MySurfaceView.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * author: haohao</div><div class="line"> * time: 2017/12/20</div><div class="line"> * mail: haohaochang86@gmail.com</div><div class="line"> * desc: MySurfaceView</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySurfaceView</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySurfaceView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySurfaceView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySurfaceView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 设置像素绘制格式为 RGBA_8888</span></div><div class="line">        SurfaceHolder holder = getHolder();</div><div class="line">        holder.setFormat(PixelFormat.RGBA_8888);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.haohao.ffmpeg.MySurfaceView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/my_surface_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:alpha</span>=<span class="string">"0.7"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/video_decode_btn"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"视频解码"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/video_render_btn"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"视频渲染"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:alpha</span>=<span class="string">"0.7"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/audio_decode_btn"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"音频解码"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/audio_play_btn"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"音频播放"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">AVUtils</span>.<span class="title">AVCallback</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_PATH = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separatorChar;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String input_video_file_path = BASE_PATH</div><div class="line">            + <span class="string">"input.mp4"</span>;</div><div class="line">    <span class="keyword">private</span> String output_video_file_path = BASE_PATH</div><div class="line">            + <span class="string">"output.yuv"</span>;</div><div class="line">    <span class="keyword">private</span> String input_audio_file_path = BASE_PATH</div><div class="line">            + <span class="string">"hello.mp3"</span>;</div><div class="line">    <span class="keyword">private</span> String output_audio_file_path = BASE_PATH</div><div class="line">            + <span class="string">"hello.pcm"</span>;</div><div class="line">    <span class="keyword">private</span> String video_src = BASE_PATH</div><div class="line">            + <span class="string">"ffmpeg.mp4"</span>;</div><div class="line">    <span class="keyword">private</span> Button mDecodeVideoBtn;</div><div class="line">    <span class="keyword">private</span> Button mVideoRenderBtn;</div><div class="line">    <span class="keyword">private</span> Button mAudioPlayBtn, mAudioDecodeBtn;</div><div class="line">    <span class="keyword">private</span> ProgressDialog mProgressDialog;</div><div class="line">    <span class="keyword">private</span> ExecutorService mExecutorService;</div><div class="line">    <span class="keyword">private</span> MySurfaceView mySurfaceView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS&#125;, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mDecodeVideoBtn = (Button)findViewById(R.id.video_decode_btn);</div><div class="line">        mVideoRenderBtn = (Button)findViewById(R.id.video_render_btn);</div><div class="line">        mAudioDecodeBtn = (Button) findViewById(R.id.audio_decode_btn);</div><div class="line">        mAudioPlayBtn = (Button)findViewById(R.id.audio_play_btn);</div><div class="line"></div><div class="line">        mySurfaceView = (MySurfaceView) findViewById(R.id.my_surface_view);</div><div class="line">        mDecodeVideoBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mVideoRenderBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mAudioDecodeBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mAudioPlayBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        AVUtils.registerCallback(<span class="keyword">this</span>);</div><div class="line">        mProgressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        mProgressDialog.setCanceledOnTouchOutside(<span class="keyword">false</span>);</div><div class="line">        mExecutorService = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> id = view.getId();</div><div class="line">        <span class="keyword">switch</span> (id) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.video_decode_btn:</div><div class="line">                mProgressDialog.setMessage(<span class="string">"正在解码..."</span>);</div><div class="line">                mProgressDialog.show();</div><div class="line">                mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        AVUtils.videoDecode(input_video_file_path, output_video_file_path);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.video_render_btn:</div><div class="line">                mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        AVUtils.videoRender(input_video_file_path, mySurfaceView.getHolder().getSurface());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.audio_decode_btn:</div><div class="line">                mProgressDialog.setMessage(<span class="string">"正在解码..."</span>);</div><div class="line">                mProgressDialog.show();</div><div class="line">                mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        AVUtils.audioDecode(input_audio_file_path, output_audio_file_path);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.audio_play_btn:</div><div class="line">                mExecutorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        AVUtils.audioPlay(input_video_file_path);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;</div><div class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (mProgressDialog.isShowing()) &#123;</div><div class="line">                    mProgressDialog.dismiss();</div><div class="line">                &#125;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"解码完成"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mExecutorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nativelib.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//编码</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/libavcodec/avcodec.h"</span></span></div><div class="line"><span class="comment">//封装格式处理</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/libavformat/avformat.h"</span></span></div><div class="line"><span class="comment">//像素处理</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/libswscale/swscale.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,<span class="meta-string">"haohao"</span>,FORMAT,##__VA_ARGS__);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">"haohao"</span>,FORMAT,##__VA_ARGS__);</span></div><div class="line"></div><div class="line"><span class="comment">//中文字符串转换</span></div><div class="line"><span class="function">jstring <span class="title">charsToUTF8String</span><span class="params">(JNIEnv *env, <span class="keyword">char</span> *s)</span> </span>&#123;</div><div class="line">    jclass string_cls = (*env)-&gt;FindClass(env, <span class="string">"java/lang/String"</span>);</div><div class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, string_cls, <span class="string">"&lt;init&gt;"</span>, <span class="string">"([BLjava/lang/String;)V"</span>);</div><div class="line"></div><div class="line">    jbyteArray jb_arr = (*env)-&gt;NewByteArray(env, <span class="built_in">strlen</span>(s));</div><div class="line">    (*env)-&gt;SetByteArrayRegion(env, jb_arr, <span class="number">0</span>, <span class="built_in">strlen</span>(s), s);</div><div class="line"></div><div class="line">    jstring charset = (*env)-&gt;NewStringUTF(env, <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewObject(env, string_cls, mid, jb_arr, charset);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ffmpeg_AVUtils_videoDecode</span><span class="params">(JNIEnv *env, jclass type, jstring input_,</span></div><div class="line">                                           jstring output_) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//访问静态方法</span></div><div class="line">    jmethodID mid = (*env)-&gt;GetStaticMethodID(env, type, <span class="string">"onNativeCallback"</span>, <span class="string">"()V"</span>);</div><div class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = (*env)-&gt;GetStringUTFChars(env, input_, <span class="number">0</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = (*env)-&gt;GetStringUTFChars(env, output_, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//注册所有组件</span></div><div class="line">    av_register_all();</div><div class="line"></div><div class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></div><div class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</div><div class="line"></div><div class="line">    <span class="comment">//打开输入视频文件</span></div><div class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取视频文件信息，例如得到视频的宽高</span></div><div class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取视频流的索引位置</span></div><div class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></div><div class="line">    <span class="keyword">int</span> v_stream_idx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</div><div class="line">        <span class="comment">//判断视频流</span></div><div class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</div><div class="line">            v_stream_idx = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v_stream_idx == <span class="number">-1</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//根据视频的编码方式，获取对应的解码器</span></div><div class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</div><div class="line"></div><div class="line">    <span class="comment">//根据编解码上下文中的编码 id 查找对应的解码器</span></div><div class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器，或者视频已加密\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//打开解码器，解码器有问题（比如说我们编译FFmpeg的时候没有编译对应类型的解码器）</span></div><div class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//输出视频信息</span></div><div class="line">    LOGI(<span class="string">"视频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</div><div class="line">    LOGI(<span class="string">"视频时长：%lld"</span>, (pFormatCtx-&gt;duration) / (<span class="number">1000</span> * <span class="number">1000</span>));</div><div class="line">    LOGI(<span class="string">"视频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</div><div class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</div><div class="line"></div><div class="line">    <span class="comment">//准备读取</span></div><div class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></div><div class="line">    <span class="comment">//缓冲区，开辟空间</span></div><div class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</div><div class="line"></div><div class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></div><div class="line">    <span class="comment">//内存分配</span></div><div class="line">    AVFrame *pFrame = av_frame_alloc();</div><div class="line">    <span class="comment">//YUV420</span></div><div class="line">    AVFrame *pFrameYUV = av_frame_alloc();</div><div class="line">    <span class="comment">//只有指定了AVFrame的像素格式、画面大小才能真正分配内存</span></div><div class="line">    <span class="comment">//缓冲区分配内存</span></div><div class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *) av_malloc(</div><div class="line">            avpicture_get_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height));</div><div class="line">    <span class="comment">//初始化缓冲区</span></div><div class="line">    avpicture_fill((AVPicture *) pFrameYUV, out_buffer, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width,</div><div class="line">                   pCodecCtx-&gt;height);</div><div class="line"></div><div class="line">    <span class="comment">//用于转码（缩放）的参数，转之前的宽高，转之后的宽高，格式等</span></div><div class="line">    <span class="keyword">struct</span> SwsContext *sws_ctx = sws_getContext(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</div><div class="line">                                                pCodecCtx-&gt;pix_fmt,</div><div class="line">                                                pCodecCtx-&gt;width, pCodecCtx-&gt;height,</div><div class="line">                                                AV_PIX_FMT_YUV420P,</div><div class="line">                                                SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">int</span> got_picture, ret;</div><div class="line"></div><div class="line">    <span class="comment">//输出文件</span></div><div class="line">    FILE *fp_yuv = fopen(output, <span class="string">"wb+"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//一帧一帧的读取压缩数据</span></div><div class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></div><div class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</div><div class="line">            <span class="comment">//解码一帧视频压缩数据，得到视频像素数据</span></div><div class="line">            ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</div><div class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//为 0 说明解码完成，非0正在解码</span></div><div class="line">            <span class="keyword">if</span> (got_picture) &#123;</div><div class="line">                <span class="comment">//AVFrame转为像素格式YUV420，宽高</span></div><div class="line">                <span class="comment">//2 6输入、输出数据</span></div><div class="line">                <span class="comment">//3 7输入、输出画面一行的数据的大小 AVFrame 转换是一行一行转换的</span></div><div class="line">                <span class="comment">//4 输入数据第一列要转码的位置 从0开始</span></div><div class="line">                <span class="comment">//5 输入画面的高度</span></div><div class="line">                sws_scale(sws_ctx, pFrame-&gt;data, pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height,</div><div class="line">                          pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</div><div class="line"></div><div class="line">                <span class="comment">//输出到YUV文件</span></div><div class="line">                <span class="comment">//AVFrame像素帧写入文件</span></div><div class="line">                <span class="comment">//data解码后的图像像素数据（音频采样数据）</span></div><div class="line">                <span class="comment">//Y 亮度 UV 色度（压缩了） 人对亮度更加敏感</span></div><div class="line">                <span class="comment">//U V 个数是Y的1/4</span></div><div class="line">                <span class="keyword">int</span> y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</div><div class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">0</span>], <span class="number">1</span>, y_size, fp_yuv);</div><div class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">1</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</div><div class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">2</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</div><div class="line"></div><div class="line">                frame_count++;</div><div class="line">                LOGI(<span class="string">"解码第%d帧"</span>, frame_count);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        av_free_packet(packet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp_yuv);</div><div class="line"></div><div class="line">    av_frame_free(&amp;pFrame);</div><div class="line"></div><div class="line">    avcodec_close(pCodecCtx);</div><div class="line"></div><div class="line">    avformat_free_context(pFormatCtx);</div><div class="line"></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, input_, input);</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, output_, output);</div><div class="line">    <span class="comment">//通知 Java 层解码完毕</span></div><div class="line">    (*env)-&gt;CallStaticVoidMethod(env, type, mid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用这两个 Window 相关的头文件需要在 CMake 脚本中引入 android 库</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/native_window_jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/native_window.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/yuv/libyuv.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ffmpeg_AVUtils_videoRender</span><span class="params">(JNIEnv *env, jclass type, jstring input_,</span></div><div class="line">                                           jobject surface) &#123;</div><div class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = (*env)-&gt;GetStringUTFChars(env, input_, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//注册所有组件</span></div><div class="line">    av_register_all();</div><div class="line">    <span class="comment">//avcodec_register_all();</span></div><div class="line"></div><div class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></div><div class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</div><div class="line"></div><div class="line">    <span class="comment">//打开输入视频文件</span></div><div class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取视频文件信息，例如得到视频的宽高</span></div><div class="line">    <span class="comment">//第二个参数是一个字典，表示你需要获取什么信息，比如视频的元数据</span></div><div class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取视频流的索引位置</span></div><div class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></div><div class="line">    <span class="keyword">int</span> v_stream_idx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="comment">//number of streams</span></div><div class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</div><div class="line">        <span class="comment">//流的类型</span></div><div class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</div><div class="line">            v_stream_idx = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (v_stream_idx == <span class="number">-1</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//获取视频流中的编解码上下文</span></div><div class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</div><div class="line"></div><div class="line">    <span class="comment">//根据编解码上下文中的编码 id 查找对应的解码器</span></div><div class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器，或者视频已加密\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//打开解码器，解码器有问题（比如说我们编译FFmpeg的时候没有编译对应类型的解码器）</span></div><div class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//准备读取</span></div><div class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></div><div class="line">    <span class="comment">//缓冲区，开辟空间</span></div><div class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</div><div class="line"></div><div class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></div><div class="line">    <span class="comment">//内存分配</span></div><div class="line">    AVFrame *yuv_frame = av_frame_alloc();</div><div class="line">    AVFrame *rgb_frame = av_frame_alloc();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> got_picture, ret;</div><div class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//窗体</span></div><div class="line">    ANativeWindow *pWindow = ANativeWindow_fromSurface(env, surface);</div><div class="line">    <span class="comment">//绘制时的缓冲区</span></div><div class="line">    ANativeWindow_Buffer out_buffer;</div><div class="line"></div><div class="line">    <span class="comment">//一帧一帧的读取压缩数据</span></div><div class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></div><div class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</div><div class="line">            <span class="comment">//7.解码一帧视频压缩数据，得到视频像素数据</span></div><div class="line">            ret = avcodec_decode_video2(pCodecCtx, yuv_frame, &amp;got_picture, packet);</div><div class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//为0说明解码完成，非0正在解码</span></div><div class="line">            <span class="keyword">if</span> (got_picture) &#123;</div><div class="line"></div><div class="line">                <span class="comment">//lock window</span></div><div class="line">                <span class="comment">//设置缓冲区的属性：宽高、像素格式（需要与Java层的格式一致）</span></div><div class="line">                ANativeWindow_setBuffersGeometry(pWindow, pCodecCtx-&gt;width, pCodecCtx-&gt;height,</div><div class="line">                                                 WINDOW_FORMAT_RGBA_8888);</div><div class="line">                ANativeWindow_lock(pWindow, &amp;out_buffer, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">                <span class="comment">//初始化缓冲区</span></div><div class="line">                <span class="comment">//设置属性，像素格式、宽高</span></div><div class="line">                <span class="comment">//rgb_frame的缓冲区就是Window的缓冲区，同一个，解锁的时候就会进行绘制</span></div><div class="line">                avpicture_fill((AVPicture *) rgb_frame, out_buffer.bits, AV_PIX_FMT_RGBA,</div><div class="line">                               pCodecCtx-&gt;width,</div><div class="line">                               pCodecCtx-&gt;height);</div><div class="line"></div><div class="line">                <span class="comment">//YUV格式的数据转换成RGBA 8888格式的数据, FFmpeg 也可以转换，但是存在问题，使用libyuv这个库实现</span></div><div class="line">                I420ToARGB(yuv_frame-&gt;data[<span class="number">0</span>], yuv_frame-&gt;linesize[<span class="number">0</span>],</div><div class="line">                           yuv_frame-&gt;data[<span class="number">2</span>], yuv_frame-&gt;linesize[<span class="number">2</span>],</div><div class="line">                           yuv_frame-&gt;data[<span class="number">1</span>], yuv_frame-&gt;linesize[<span class="number">1</span>],</div><div class="line">                           rgb_frame-&gt;data[<span class="number">0</span>], rgb_frame-&gt;linesize[<span class="number">0</span>],</div><div class="line">                           pCodecCtx-&gt;width, pCodecCtx-&gt;height);</div><div class="line"></div><div class="line">                <span class="comment">//3、unlock window</span></div><div class="line">                ANativeWindow_unlockAndPost(pWindow);</div><div class="line"></div><div class="line">                frame_count++;</div><div class="line">                LOGI(<span class="string">"解码绘制第%d帧"</span>, frame_count);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        av_free_packet(packet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    av_frame_free(&amp;yuv_frame);</div><div class="line">    avcodec_close(pCodecCtx);</div><div class="line">    avformat_free_context(pFormatCtx);</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, input_, input);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libswresample/swresample.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIO_FRME_SIZE 48000 * 4</span></div><div class="line"></div><div class="line"><span class="comment">//音频解码（重采样）</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ffmpeg_AVUtils_audioDecode</span><span class="params">(JNIEnv *env, jclass type, jstring input_,</span></div><div class="line">                                           jstring output_) &#123;</div><div class="line">    <span class="comment">//访问静态方法</span></div><div class="line">    jmethodID mid = (*env)-&gt;GetStaticMethodID(env, type, <span class="string">"onNativeCallback"</span>, <span class="string">"()V"</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = (*env)-&gt;GetStringUTFChars(env, input_, <span class="number">0</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = (*env)-&gt;GetStringUTFChars(env, output_, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//注册组件</span></div><div class="line">    av_register_all();</div><div class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</div><div class="line">    <span class="comment">//打开音频文件</span></div><div class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取输入文件信息</span></div><div class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法获取输入文件信息"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取音频流索引位置</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</div><div class="line">            audio_stream_idx = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取解码器</span></div><div class="line">    AVCodecContext *codecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</div><div class="line">    AVCodec *codec = avcodec_find_decoder(codecCtx-&gt;codec_id);</div><div class="line">    <span class="keyword">if</span> (codec == <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法获取解码器"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//打开解码器</span></div><div class="line">    <span class="keyword">if</span> (avcodec_open2(codecCtx, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法打开解码器"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//压缩数据</span></div><div class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</div><div class="line">    <span class="comment">//解压缩数据</span></div><div class="line">    AVFrame *frame = av_frame_alloc();</div><div class="line">    <span class="comment">//frame-&gt;16bit 44100 PCM 统一音频采样格式与采样率</span></div><div class="line">    SwrContext *swrCtx = swr_alloc();</div><div class="line"></div><div class="line">    <span class="comment">//重采样设置参数</span></div><div class="line">    <span class="comment">//输入的采样格式</span></div><div class="line">    <span class="keyword">enum</span> AVSampleFormat in_sample_fmt = codecCtx-&gt;sample_fmt;</div><div class="line">    <span class="comment">//输出采样格式16bit PCM</span></div><div class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</div><div class="line">    <span class="comment">//输入采样率</span></div><div class="line">    <span class="keyword">int</span> in_sample_rate = codecCtx-&gt;sample_rate;</div><div class="line">    <span class="comment">//输出采样率</span></div><div class="line">    <span class="keyword">int</span> out_sample_rate = <span class="number">44100</span>;</div><div class="line">    <span class="comment">//获取输入的声道布局</span></div><div class="line">    <span class="comment">//根据声道个数获取默认的声道布局（2个声道，默认立体声stereo）</span></div><div class="line">    <span class="comment">//av_get_default_channel_layout(codecCtx-&gt;channels);</span></div><div class="line">    <span class="keyword">uint64_t</span> in_ch_layout = codecCtx-&gt;channel_layout;</div><div class="line">    <span class="comment">//输出的声道布局（立体声）</span></div><div class="line">    <span class="keyword">uint64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</div><div class="line"></div><div class="line">    swr_alloc_set_opts(swrCtx,</div><div class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</div><div class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</div><div class="line">                       <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    swr_init(swrCtx);</div><div class="line"></div><div class="line">    <span class="comment">//输出的声道个数</span></div><div class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</div><div class="line"></div><div class="line">    <span class="comment">//重采样设置参数</span></div><div class="line"></div><div class="line">    <span class="comment">//位宽16bit 采样率 44100HZ 的 PCM 数据</span></div><div class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *) av_malloc(MAX_AUDIO_FRME_SIZE);</div><div class="line"></div><div class="line">    FILE *fp_pcm = fopen(output, <span class="string">"wb"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, index = <span class="number">0</span>, ret;</div><div class="line">    <span class="comment">//不断读取压缩数据</span></div><div class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//解码</span></div><div class="line">        ret = avcodec_decode_audio4(codecCtx, frame, &amp;got_frame, packet);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">            LOGI(<span class="string">"%s"</span>, <span class="string">"解码完成"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//解码一帧成功</span></div><div class="line">        <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>) &#123;</div><div class="line">            LOGI(<span class="string">"解码：%d"</span>, index++);</div><div class="line">            swr_convert(swrCtx, &amp;out_buffer, MAX_AUDIO_FRME_SIZE, frame-&gt;data, frame-&gt;nb_samples);</div><div class="line">            <span class="comment">//获取sample的size</span></div><div class="line">            <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(<span class="literal">NULL</span>, out_channel_nb,</div><div class="line">                                                             frame-&gt;nb_samples, out_sample_fmt, <span class="number">1</span>);</div><div class="line">            fwrite(out_buffer, <span class="number">1</span>, out_buffer_size, fp_pcm);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        av_free_packet(packet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp_pcm);</div><div class="line">    av_frame_free(&amp;frame);</div><div class="line">    av_free(out_buffer);</div><div class="line"></div><div class="line">    swr_free(&amp;swrCtx);</div><div class="line">    avcodec_close(codecCtx);</div><div class="line">    avformat_close_input(&amp;pFormatCtx);</div><div class="line"></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, input_, input);</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, output_, output);</div><div class="line">    <span class="comment">//通知 Java 层解码完成</span></div><div class="line">    (*env)-&gt;CallStaticVoidMethod(env, type, mid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ffmpeg_AVUtils_audioPlay</span><span class="params">(JNIEnv *env, jclass type, jstring input_)</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = (*env)-&gt;GetStringUTFChars(env, input_, <span class="number">0</span>);</div><div class="line">    LOGI(<span class="string">"%s"</span>, <span class="string">"sound"</span>);</div><div class="line">    <span class="comment">//注册组件</span></div><div class="line">    av_register_all();</div><div class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</div><div class="line">    <span class="comment">//打开音频文件</span></div><div class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取输入文件信息</span></div><div class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法获取输入文件信息"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取音频流索引位置</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</div><div class="line">            audio_stream_idx = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取解码器</span></div><div class="line">    AVCodecContext *codecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</div><div class="line">    AVCodec *codec = avcodec_find_decoder(codecCtx-&gt;codec_id);</div><div class="line">    <span class="keyword">if</span> (codec == <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法获取解码器"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//打开解码器</span></div><div class="line">    <span class="keyword">if</span> (avcodec_open2(codecCtx, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</div><div class="line">        LOGI(<span class="string">"%s"</span>, <span class="string">"无法打开解码器"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//压缩数据</span></div><div class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</div><div class="line">    <span class="comment">//解压缩数据</span></div><div class="line">    AVFrame *frame = av_frame_alloc();</div><div class="line">    <span class="comment">//frame-&gt;16bit 44100 PCM 统一音频采样格式与采样率</span></div><div class="line">    SwrContext *swrCtx = swr_alloc();</div><div class="line"></div><div class="line">    <span class="comment">//输入的采样格式</span></div><div class="line">    <span class="keyword">enum</span> AVSampleFormat in_sample_fmt = codecCtx-&gt;sample_fmt;</div><div class="line">    <span class="comment">//输出采样格式16bit PCM</span></div><div class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</div><div class="line">    <span class="comment">//输入采样率</span></div><div class="line">    <span class="keyword">int</span> in_sample_rate = codecCtx-&gt;sample_rate;</div><div class="line">    <span class="comment">//输出采样率</span></div><div class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</div><div class="line">    <span class="comment">//获取输入的声道布局</span></div><div class="line">    <span class="comment">//根据声道个数获取默认的声道布局（2个声道，默认立体声stereo）</span></div><div class="line">    <span class="comment">//av_get_default_channel_layout(codecCtx-&gt;channels);</span></div><div class="line">    <span class="keyword">uint64_t</span> in_ch_layout = codecCtx-&gt;channel_layout;</div><div class="line">    <span class="comment">//输出的声道布局（立体声）</span></div><div class="line">    <span class="keyword">uint64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</div><div class="line"></div><div class="line">    swr_alloc_set_opts(swrCtx,</div><div class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</div><div class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</div><div class="line">                       <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    swr_init(swrCtx);</div><div class="line"></div><div class="line">    <span class="comment">//输出的声道个数</span></div><div class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</div><div class="line">    <span class="comment">//AudioTrack对象</span></div><div class="line">    jmethodID create_audio_track_mid = (*env)-&gt;GetStaticMethodID(env, type, <span class="string">"createAudioTrack"</span>,</div><div class="line">                                                                 <span class="string">"(II)Landroid/media/AudioTrack;"</span>);</div><div class="line">    jobject audio_track = (*env)-&gt;CallStaticObjectMethod(env, type, create_audio_track_mid,</div><div class="line">                                                         out_sample_rate, out_channel_nb);</div><div class="line"></div><div class="line">    <span class="comment">//调用AudioTrack.play方法</span></div><div class="line">    jclass audio_track_class = (*env)-&gt;GetObjectClass(env, audio_track);</div><div class="line">    jmethodID audio_track_play_mid = (*env)-&gt;GetMethodID(env, audio_track_class, <span class="string">"play"</span>, <span class="string">"()V"</span>);</div><div class="line">    jmethodID audio_track_stop_mid = (*env)-&gt;GetMethodID(env, audio_track_class, <span class="string">"stop"</span>, <span class="string">"()V"</span>);</div><div class="line">    (*env)-&gt;CallVoidMethod(env, audio_track, audio_track_play_mid);</div><div class="line"></div><div class="line">    <span class="comment">//AudioTrack.write</span></div><div class="line">    jmethodID audio_track_write_mid = (*env)-&gt;GetMethodID(env, audio_track_class, <span class="string">"write"</span>,</div><div class="line">                                                          <span class="string">"([BII)I"</span>);</div><div class="line">    <span class="comment">//16bit 44100 PCM 数据</span></div><div class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *) av_malloc(MAX_AUDIO_FRME_SIZE);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, index = <span class="number">0</span>, ret;</div><div class="line">    <span class="comment">//不断读取压缩数据</span></div><div class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//解码音频类型的Packet</span></div><div class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == audio_stream_idx) &#123;</div><div class="line">            <span class="comment">//解码</span></div><div class="line">            ret = avcodec_decode_audio4(codecCtx, frame, &amp;got_frame, packet);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">                LOGI(<span class="string">"%s"</span>, <span class="string">"解码完成"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//解码一帧成功</span></div><div class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>) &#123;</div><div class="line">                LOGI(<span class="string">"解码：%d"</span>, index++);</div><div class="line">                swr_convert(swrCtx, &amp;out_buffer, MAX_AUDIO_FRME_SIZE,</div><div class="line">                            (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **) frame-&gt;data, frame-&gt;nb_samples);</div><div class="line">                <span class="comment">//获取sample的size</span></div><div class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(<span class="literal">NULL</span>, out_channel_nb,</div><div class="line">                                                                 frame-&gt;nb_samples, out_sample_fmt,</div><div class="line">                                                                 <span class="number">1</span>);</div><div class="line"></div><div class="line">                <span class="comment">//out_buffer缓冲区数据，转成byte数组</span></div><div class="line">                jbyteArray audio_sample_array = (*env)-&gt;NewByteArray(env, out_buffer_size);</div><div class="line">                jbyte *sample_bytep = (*env)-&gt;GetByteArrayElements(env, audio_sample_array, <span class="literal">NULL</span>);</div><div class="line">                <span class="comment">//out_buffer的数据复制到sampe_bytep</span></div><div class="line">                <span class="built_in">memcpy</span>(sample_bytep, out_buffer, out_buffer_size);</div><div class="line">                <span class="comment">//同步</span></div><div class="line">                (*env)-&gt;ReleaseByteArrayElements(env, audio_sample_array, sample_bytep, <span class="number">0</span>);</div><div class="line"></div><div class="line">                <span class="comment">//AudioTrack.write PCM数据</span></div><div class="line">                (*env)-&gt;CallIntMethod(env, audio_track, audio_track_write_mid,</div><div class="line">                                      audio_sample_array, <span class="number">0</span>, out_buffer_size);</div><div class="line">                <span class="comment">//释放局部引用</span></div><div class="line">                (*env)-&gt;DeleteLocalRef(env, audio_sample_array);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        av_free_packet(packet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    (*env)-&gt;CallVoidMethod(env, audio_track, audio_track_stop_mid);</div><div class="line"></div><div class="line">    av_frame_free(&amp;frame);</div><div class="line">    av_free(out_buffer);</div><div class="line"></div><div class="line">    swr_free(&amp;swrCtx);</div><div class="line">    avcodec_close(codecCtx);</div><div class="line">    avformat_close_input(&amp;pFormatCtx);</div><div class="line"></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, input_, input);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CMakeLists.txt<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line">include_directories(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/cpp/include)</div><div class="line"><span class="built_in">set</span>(jnilibs <span class="string">"<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/src/main/jniLibs"</span>)</div><div class="line"><span class="built_in">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library( <span class="comment"># Sets the name of the library.</span></div><div class="line">             native-lib</div><div class="line"></div><div class="line">             <span class="comment"># Sets the library as a shared library.</span></div><div class="line">             SHARED</div><div class="line"></div><div class="line">             <span class="comment"># Provides a relative path to your source file(s).</span></div><div class="line">             src/main/cpp/native-lib.c)</div><div class="line"></div><div class="line"><span class="comment"># 添加 FFmpeg 的 8 个函数库和 yuvlib 库</span></div><div class="line">add_library(avutil-54 SHARED IMPORTED )</div><div class="line">set_target_properties(avutil-54 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavutil-54.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(swresample-1 SHARED IMPORTED )</div><div class="line">set_target_properties(swresample-1 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswresample-1.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(avcodec-56 SHARED IMPORTED )</div><div class="line">set_target_properties(avcodec-56 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavcodec-56.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(avformat-56 SHARED IMPORTED )</div><div class="line">set_target_properties(avformat-56 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavformat-56.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(swscale-3 SHARED IMPORTED )</div><div class="line">set_target_properties(swscale-3 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswscale-3.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(postproc-53 SHARED IMPORTED )</div><div class="line">set_target_properties(postproc-53 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libpostproc-53.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(avfilter-5 SHARED IMPORTED )</div><div class="line">set_target_properties(avfilter-5 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavfilter-5.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(avdevice-56 SHARED IMPORTED )</div><div class="line">set_target_properties(avdevice-56 PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavdevice-56.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">add_library(yuv SHARED IMPORTED )</div><div class="line">set_target_properties(yuv PROPERTIES IMPORTED_LOCATION <span class="string">"<span class="variable">$&#123;jnilibs&#125;</span>/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libyuv.so"</span>)</div><div class="line"></div><div class="line"></div><div class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></div><div class="line">              <span class="built_in">log</span>-lib</div><div class="line"></div><div class="line">              <span class="comment"># Specifies the name of the NDK library that</span></div><div class="line">              <span class="comment"># you want CMake to locate.</span></div><div class="line">              <span class="built_in">log</span> )</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#找到 Android 系统 Window 绘制相关的库</span></div><div class="line">find_library(</div><div class="line">            android-lib</div><div class="line">            android</div><div class="line">            )</div><div class="line"></div><div class="line"></div><div class="line">target_link_libraries( native-lib </div><div class="line">                       <span class="variable">$&#123;log-lib&#125;</span> </div><div class="line">                       <span class="variable">$&#123;android-lib&#125;</span> </div><div class="line">                       avutil-54 </div><div class="line">                       swresample-1</div><div class="line">                       avcodec-56</div><div class="line">                       avformat-56</div><div class="line">                       swscale-3</div><div class="line">                       postproc-53</div><div class="line">                       avfilter-5</div><div class="line">                       avdevice-56</div><div class="line">                       yuv)</div></pre></td></tr></table></figure></p>
<p>PS：</p>
<ol>
<li>注意添加文件读写权限。</li>
<li>关注公众号 <code>AndroidGeeks</code> ，并在后台回复 <code>ffmpeglib</code> 获取相应的函数库。</li>
</ol>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/leixiaohua1020/article/details/15811977" title="雷霄骅" target="_blank" rel="external">雷霄骅博客 http://blog.csdn.net/leixiaohua1020/article/details/15811977</a><br>Jason 的 NDK 开发高级教程</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20180204.jpeg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;诸
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="FFmpeg" scheme="https://githubhaohao.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>NDK FFmpeg 编译</title>
    <link href="https://githubhaohao.github.io/2018/01/20/NDK-FFmpeg-compile/"/>
    <id>https://githubhaohao.github.io/2018/01/20/NDK-FFmpeg-compile/</id>
    <published>2018-01-20T01:35:06.000Z</published>
    <updated>2018-01-20T08:44:36.117Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20180120.jpg" alt="Markdown"></p><p></p>
<p><div align="center">互联网时代限制个人发展的不再是掌握知识和信息的多少，而是个人的认知水平。</div><br></p>
<blockquote>
<p>本篇介绍一下 Linux 环境下 FFmpeg 的编译。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：                                                                                                                                                                                          </p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
<li><a href="http://haohaochang.cn/2018/01/09/NDK-posix-multi-thread/" target="_blank" rel="external">NDK POSIX 多线程编程</a></li>
<li><a href="http://haohaochang.cn/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/" target="_blank" rel="external">NDK Android OpenSL ES 音频采集与播放</a></li>
</ul>
<h1 id="FFmpeg-是什么？"><a href="#FFmpeg-是什么？" class="headerlink" title="FFmpeg 是什么？"></a>FFmpeg 是什么？</h1><p>FFmpeg 全称（First Forward MPEG），是一款领先的开源多媒体框架，采用 LGPL 或 GPL 许可证，除了具有音视频编解码功能外，还有视频格式转换、视频抓图、视频水印、推流等功能。 FFmpeg 在 Linux 平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括 Windows 、Mac OS X 等。</p>
<p>FFmpeg的官方网站是：<a href="http://ffmpeg.org/" target="_blank" rel="external">http://ffmpeg.org/</a></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/TIM%E6%88%AA%E5%9B%BE20180120153405.png" alt=""></p>
<p>Windows 平台下，编译好的可用版本一般有三个： Static ，Shared ，Dev 。Static 里面有 3 个应用程序：ffmpeg.exe ，ffplay.exe ，ffprobe.exe ，动态链接库都被编译在 exe 文件中，每个 exe 的体积都很大，可直接运行，如播放一段视频，命令行下执行：<code>ffmpeg video.mp4</code>。Shared 里面除了 3 个应用程序：ffmpeg.exe ，ffplay.exe ，ffprobe.exe 之外，还有一些动态链接库，如 avcodec-54.dll 之类的，Shared 里面的 exe 体积较小。Dev 版本主要用于开发的，里面包含了一些库文件 xxx.lib 和文件 xxx.h 。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/TIM%E6%88%AA%E5%9B%BE20180120154626.png" alt=""></p>
<p>Linux 平台下，本文选择的版本是 2.6.9 ，地址：<a href="http://ffmpeg.org/olddownload.html" target="_blank" rel="external">http://ffmpeg.org/olddownload.html</a> </p>
<h1 id="编译-FFmpeg"><a href="#编译-FFmpeg" class="headerlink" title="编译 FFmpeg"></a>编译 FFmpeg</h1><p>搭建 Linux 开发环境，安装 Ubuntu 虚拟机或者电脑装成双系统，或者购买一个低配的阿里云主机，文件传输工具推荐 FileZilla 或 XFTP 。</p>
<h2 id="Linux-环境下配置-NDK"><a href="#Linux-环境下配置-NDK" class="headerlink" title="Linux 环境下配置 NDK"></a>Linux 环境下配置 NDK</h2><p>首先下载 Linux 环境下的 NDK （注意科学上网），如 <code>android-ndk-r11c-linux-x86_64.bin</code> 。<br>执行如下命令进行解压缩：<br><code>./android-ndk-r11c-linux-x86_64.bin</code><br>配置环境变量，首先编辑 .bashrc 文件。<br><code>vim ~/.bashrc</code><br>在文件结尾添加两行代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NDKROOT=( NDK 解压的根目录）如 、/usr/workspace/ndk/android-ndk-r11c</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$NDKROOT</span>:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>更新环境变量：<br><code>source ~/.bashrc</code></p>
<h2 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a>编译准备</h2><p>首先下载 FFmpeg ，地址：<a href="http://ffmpeg.org/olddownload.html" target="_blank" rel="external">http://ffmpeg.org/olddownload.html</a>。<br>解压：<code>uzip ffmpeg-2.6.9.zip</code><br>然后编写用于编译的 Shell 脚本，在 ffmpeg-2.6.9 根目录下执行：<code>vim build_android.sh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">make clean</div><div class="line"><span class="built_in">export</span> NDK=/home/wuhuannan/Android/Sdk/ndk-bundle</div><div class="line"><span class="built_in">export</span> SYSROOT=<span class="variable">$NDK</span>/platforms/android-14/arch-arm/</div><div class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64</div><div class="line"><span class="built_in">export</span> CPU=arm</div><div class="line"><span class="built_in">export</span> PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></div><div class="line"><span class="built_in">export</span> ADDI_CFLAGS=<span class="string">"-marm"</span></div><div class="line"></div><div class="line">./configure --target-os=linux \</div><div class="line">--prefix=<span class="variable">$PREFIX</span> --arch=arm \</div><div class="line">--disable-doc \</div><div class="line">--enable-shared \</div><div class="line">--disable-static \</div><div class="line">--disable-yasm \</div><div class="line">--disable-symver \</div><div class="line">--enable-gpl \</div><div class="line">--disable-ffmpeg \</div><div class="line">--disable-ffplay \</div><div class="line">--disable-ffprobe \</div><div class="line">--disable-ffserver \</div><div class="line">--disable-doc \</div><div class="line">--disable-symver \</div><div class="line">--cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</div><div class="line">--enable-cross-compile \</div><div class="line">--sysroot=<span class="variable">$SYSROOT</span> \</div><div class="line">--extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</div><div class="line">--extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</div><div class="line"><span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></div><div class="line">make clean</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>然后修改根目录下的 configure 文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#找到并注释以下代码</span></div><div class="line"><span class="comment">#SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</span></div><div class="line"><span class="comment">#LIB_INSTALL_EXTRA_CMD='$$(RANLIB) "$(LIBDIR)/$(LIBNAME)"'</span></div><div class="line"><span class="comment">#SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</span></div><div class="line"><span class="comment">#SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</span></div><div class="line"></div><div class="line"><span class="comment">#在上述代码下添加以下代码</span></div><div class="line">SLIBNAME_WITH_MAJOR=<span class="string">'$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'</span></div><div class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">'$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'</span></div><div class="line">SLIB_INSTALL_NAME=<span class="string">'$(SLIBNAME_WITH_MAJOR)'</span></div><div class="line">SLIB_INSTALL_LINKS=<span class="string">'$(SLIBNAME)'</span></div></pre></td></tr></table></figure></p>
<p>修改文件权限：</p>
<p><code>chmod +x build_android.sh configure</code></p>
<p>执行一下脚本开始编译：</p>
<p><code>./build_android.sh</code></p>
<p>约几分钟后，编译生成的动态库文件如下：</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ffmpeg/TIM%E6%88%AA%E5%9B%BE20171219183959.png" alt=""></p>
<p>后续我们将在 Android 环境下的音视频编解码中使用这个动态库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20180120.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;互联
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="FFmpeg" scheme="https://githubhaohao.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>NDK Android OpenSL ES 音频采集与播放</title>
    <link href="https://githubhaohao.github.io/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/"/>
    <id>https://githubhaohao.github.io/2018/01/15/NDK-Android-OpenSL-ES-Tutorial/</id>
    <published>2018-01-15T02:16:29.000Z</published>
    <updated>2018-01-15T10:46:29.213Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171202.jpg" alt="Markdown"></p><p></p>
<p><div align="center">不要用战术上的勤奋掩盖战略上的懒惰。</div><br></p>
<blockquote>
<p>本篇详细介绍一下基于 Android OpenSL ES 实现音频的采集与播放。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：</p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
<li><a href="http://haohaochang.cn/2018/01/09/NDK-posix-multi-thread/" target="_blank" rel="external">NDK POSIX 多线程编程</a></li>
</ul>
<h1 id="OpenSL-ES-是什么？"><a href="#OpenSL-ES-是什么？" class="headerlink" title="OpenSL ES 是什么？"></a>OpenSL ES 是什么？</h1><p>OpenSL ES 是一个针对嵌入式系统的开放硬件音频加速库，也可以将其视为一套针对嵌入式平台的音频标准，全称为： Open Sound Library for Embedded Systems ，它提供了一套高性能、 低延迟的音频功能实现方法，并且实现了软硬件音频性能的跨平台部署，大大降低了上层处理音频应用的开发难度。</p>
<p>在 Android 开发中，Google 官方从 Android 2.3 （API 9）开始，便支持了 OpenSL ES 标准 ，并且对其进行了扩展。本文介绍的 OpenSL ES 是针对 Android NDK 开发来说。</p>
<h1 id="OpenSL-ES-的一些基本概念"><a href="#OpenSL-ES-的一些基本概念" class="headerlink" title="OpenSL ES 的一些基本概念"></a>OpenSL ES 的一些基本概念</h1><h2 id="基于-c-语言的面向对象接口"><a href="#基于-c-语言的面向对象接口" class="headerlink" title="基于 c 语言的面向对象接口"></a>基于 c 语言的面向对象接口</h2><p>OpenSL ES 是基于 c 语言实现的，但其提供的接口是采用面向对象的方式实现，OpenSL ES 的大多数 API 是通过对象来调用的。例如，以下代码片段，主要的逻辑是实例化引擎对象和获取引擎对象接口：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SLresult result;</div><div class="line"></div><div class="line"><span class="comment">// realize the engine</span></div><div class="line">result = (*engineObject)-&gt;Realize(engineObject, SL_BOOLEAN_FALSE);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div><div class="line"></div><div class="line">result = (*engineObject)-&gt;GetInterface(engineObject, SL_IID_ENGINE, &amp;engineEngine);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div></pre></td></tr></table></figure></p>
<h2 id="对象和接口概念"><a href="#对象和接口概念" class="headerlink" title="对象和接口概念"></a>对象和接口概念</h2><p>Object 和 Interface OpenSL ES 中的两大基本概念，可以类比为 Java 中的对象和接口。在 OpenSL ES 中， 每个 Object 可以存在一系列的 Interface ，并且为每个对象都提供了一系列的基本操作，如 Realize，GetState，Destroy 等。重要的一点，只有通过 GetInterface 方法拿到 Object 的 Interface ，才能使用 Object 提供的功能。</p>
<h2 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h2><p>OpenSL ES 的 Object 一般有三种状态，分别是： SL_OBJECT_STATE_UNREALIZED （不可用），SL_OBJECT_STATE_REALIZED（可用），SL_OBJECT_STATE_SUSPENDED（挂起）。</p>
<p>Object 处于 SL_OBJECT_STATE_UNREALIZED （不可用）状态时，系统不会为其分配资源；调用 Realize 方法后便进入 SL_OBJECT_STATE_REALIZED（可用）状态，此时对象的各个功能和资源可以正常访问；当系统音频相关的硬件设备被其他进程占用时，OpenSL ES Object 便会进入 SL_OBJECT_STATE_SUSPENDED （挂起）状态，随后调用 Resume 方法可使对象重回 SL_OBJECT_STATE_REALIZED（可用）状态；当 Object 使用结束后，调用 Destroy 方法释放资源，是对象重回 SL_OBJECT_STATE_UNREALIZED （不可用）状态。</p>
<h1 id="OpenSL-ES-常用的-Object-和-Interface"><a href="#OpenSL-ES-常用的-Object-和-Interface" class="headerlink" title="OpenSL ES 常用的 Object 和 Interface"></a>OpenSL ES 常用的 Object 和 Interface</h1><h2 id="Audio-引擎对象和接口"><a href="#Audio-引擎对象和接口" class="headerlink" title="Audio 引擎对象和接口"></a>Audio 引擎对象和接口</h2><p>Audio 引擎对象和接口，即 Engine Object 和 SLEngineItf Interface 。Engine Object 的主要功能是管理 Audio Engine 的生命周期，提供引擎对象的管理接口。引擎对象的使用方法如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">SLresult result;</div><div class="line"><span class="comment">// 创建引擎对象</span></div><div class="line">result = slCreateEngine(&amp;engineObject, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div><div class="line"></div><div class="line"><span class="comment">// 实例化</span></div><div class="line">result = (*engineObject)-&gt;Realize(engineObject, SL_BOOLEAN_FALSE);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div><div class="line"></div><div class="line"><span class="comment">// 获取引擎对象接口</span></div><div class="line">result = (*engineObject)-&gt;GetInterface(engineObject, SL_IID_ENGINE, &amp;engineEngine);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div><div class="line"></div><div class="line"><span class="comment">// 释放引擎对象的资源</span></div><div class="line">result = (*engineObject)-&gt;Destroy(engineObject, SL_BOOLEAN_FALSE);</div><div class="line">assert(SL_RESULT_SUCCESS == result);</div><div class="line">(<span class="keyword">void</span>)result;</div></pre></td></tr></table></figure></p>
<h2 id="SLRecordItf-和-SLPlayItf"><a href="#SLRecordItf-和-SLPlayItf" class="headerlink" title="SLRecordItf 和 SLPlayItf"></a>SLRecordItf 和 SLPlayItf</h2><p>SLRecordItf 和 SLPlayItf 分别抽象多媒体功能 recorder 和 player ，通过 SLEngineItf 的 CreateAudioPlayer 和 CreateAudioRecorder 方法分别创建 player 和 recorder 对象实例。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 audio recorder 对象</span></div><div class="line">result = (*engineEngine)-&gt;CreateAudioRecorder(engineEngine, &amp;recorderObject , &amp;recSource, &amp;dataSink,</div><div class="line">                                                  NUM_RECORDER_EXPLICIT_INTERFACES, iids, required);</div><div class="line"></div><div class="line"><span class="comment">// 创建 audio player 对象</span></div><div class="line">SLresult result = (*engineEngine)-&gt;CreateAudioPlayer(</div><div class="line">        engineEngine,</div><div class="line">        &amp;audioPlayerObject,</div><div class="line">        &amp;dataSource,</div><div class="line">        &amp;dataSink,</div><div class="line">        <span class="number">1</span>,</div><div class="line">        interfaceIDs,</div><div class="line">        requiredInterfaces</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="SLDataSource-和-SLDataSink"><a href="#SLDataSource-和-SLDataSink" class="headerlink" title="SLDataSource 和 SLDataSink"></a>SLDataSource 和 SLDataSink</h2><p>OpenSL ES 中的 SLDataSource 和 SLDataSink 结构体，主要用于构建 audio player 和 recorder 对象，其中 SLDataSource 表示音频数据来源的信息，SLDataSink 表示音频数据输出信息。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数据源简单缓冲队列定位器</span></div><div class="line">SLDataLocator_AndroidSimpleBufferQueue dataSou</div><div class="line">        SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEU</div><div class="line">        <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// PCM 数据源格式</span></div><div class="line">SLDataFormat_PCM dataSourceFormat = &#123;</div><div class="line">        SL_DATAFORMAT_PCM, <span class="comment">// 格式类型</span></div><div class="line">        wav_get_channels(wav), <span class="comment">// 通道数</span></div><div class="line">        wav_get_rate(wav) * <span class="number">1000</span>, <span class="comment">//采样率</span></div><div class="line">        wav_get_bits(wav), <span class="comment">// 位宽</span></div><div class="line">        wav_get_bits(wav),</div><div class="line">        SL_SPEAKER_FRONT_CENTER, <span class="comment">// 通道屏蔽</span></div><div class="line">        SL_BYTEORDER_LITTLEENDIAN <span class="comment">// 字节顺序</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 数据源</span></div><div class="line">SLDataSource dataSource = &#123;</div><div class="line">        &amp;dataSourceLocator,</div><div class="line">        &amp;dataSourceFormat</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 针对数据接收器的输出混合定位器(混音器)</span></div><div class="line">SLDataLocator_OutputMix dataSinkLocator = &#123;</div><div class="line">        SL_DATALOCATOR_OUTPUTMIX, <span class="comment">// 定位器类型</span></div><div class="line">        outputMixObject <span class="comment">// 输出混合</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 输出</span></div><div class="line">SLDataSink dataSink = &#123;</div><div class="line">        &amp;dataSinkLocator, <span class="comment">// 定位器</span></div><div class="line">        <span class="number">0</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="OpenSL-ES-Recorder-和-Player-功能构建"><a href="#OpenSL-ES-Recorder-和-Player-功能构建" class="headerlink" title="OpenSL ES Recorder 和 Player 功能构建"></a>OpenSL ES Recorder 和 Player 功能构建</h1><p>Audio Recorder<br><img src="http://ovv1lq7pk.bkt.clouddn.com/opensles_recorder.png" alt="opensles_recorder"><br>Audio Player<br><img src="http://ovv1lq7pk.bkt.clouddn.com/opensles_player.png" alt="opensles_player"></p>
<p>PS： Audio Player 的 Data Source 也可以是本地存储或缓存的音频数据，以上图片来自于 Jhuster 的博客。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>以下代码主要实现音频数据的采集、保存和播放。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by haohao on 2018/1/12.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SLES/OpenSLES.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SLES/OpenSLES_Android.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> AUDIO_SRC_PATH <span class="meta-string">"/sdcard/audio.pcm"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,<span class="meta-string">"haohao"</span>,FORMAT,##__VA_ARGS__);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">"haohao"</span>,FORMAT,##__VA_ARGS__);</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_RECORDER_EXPLICIT_INTERFACES 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_BUFFER_QUEUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAMPLE_RATE 44100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD_TIME 20  <span class="comment">// 20ms</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FRAME_SIZE SAMPLE_RATE * PERIOD_TIME / 1000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CHANNELS 2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE   (FRAME_SIZE * CHANNELS)</span></div><div class="line"></div><div class="line"><span class="comment">// engine interfaces</span></div><div class="line"><span class="keyword">static</span> SLObjectItf engineObject = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLEngineItf engineEngine = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="comment">// audio recorder interfaces</span></div><div class="line"><span class="keyword">static</span> SLObjectItf recorderObject = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLRecordItf recorderRecord = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLAndroidSimpleBufferQueueItf recorderBuffQueueItf = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLAndroidConfigurationItf configItf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="comment">// pcm audio player interfaces</span></div><div class="line"><span class="keyword">static</span> SLObjectItf playerObject = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLPlayItf playerPlay = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> SLObjectItf outputMixObjext = <span class="literal">NULL</span>; <span class="comment">// 混音器</span></div><div class="line"><span class="keyword">static</span> SLAndroidSimpleBufferQueueItf playerBufferQueueItf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEngine</span><span class="params">()</span></span>&#123;</div><div class="line">    SLEngineOption EngineOption[] = &#123;</div><div class="line">            &#123;(SLuint32) SL_ENGINEOPTION_THREADSAFE, (SLuint32) SL_BOOLEAN_TRUE&#125;</div><div class="line">    &#125;;</div><div class="line">    SLresult result;</div><div class="line">    result = slCreateEngine(&amp;engineObject, <span class="number">1</span>, EngineOption, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">/* Realizing the SL Engine in synchronous mode. */</span></div><div class="line">    result = (*engineObject)-&gt;Realize(engineObject, SL_BOOLEAN_FALSE);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">// get the engine interface, which is needed in order to create other objects</span></div><div class="line">    result = (*engineObject)-&gt;GetInterface(engineObject, SL_IID_ENGINE, &amp;engineEngine);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> AudioContext &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    FILE *pfile;</div><div class="line">    <span class="keyword">uint8_t</span> *buffer;</div><div class="line">    <span class="keyword">size_t</span> bufferSize;</div><div class="line"></div><div class="line">    AudioContext(FILE *pfile, <span class="keyword">uint8_t</span> *buffer, <span class="keyword">size_t</span> bufferSize)&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;pfile = pfile;</div><div class="line">        <span class="keyword">this</span>-&gt;buffer = buffer;</div><div class="line">        <span class="keyword">this</span>-&gt;bufferSize = bufferSize;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> AudioContext *recorderContext = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="comment">// 录制音频时的回调</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AudioRecorderCallback</span><span class="params">(SLAndroidSimpleBufferQueueItf bufferQueueItf, <span class="keyword">void</span> *context)</span></span>&#123;</div><div class="line">    AudioContext *recorderContext = (AudioContext*)context;</div><div class="line">    assert(recorderContext != <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (recorderContext-&gt;buffer != <span class="literal">NULL</span>) &#123;</div><div class="line">        fwrite(recorderContext-&gt;buffer, recorderContext-&gt;bufferSize, <span class="number">1</span>, recorderContext-&gt;pfile);</div><div class="line">        LOGI(<span class="string">"save a frame audio data."</span>);</div><div class="line">        SLresult result;</div><div class="line">        SLuint32 state;</div><div class="line">        result = (*recorderRecord)-&gt;GetRecordState(recorderRecord, &amp;state);</div><div class="line">        assert(SL_RESULT_SUCCESS == result);</div><div class="line">        (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (state == SL_RECORDSTATE_RECORDING) &#123;</div><div class="line">            result = (*bufferQueueItf)-&gt;Enqueue(bufferQueueItf, recorderContext-&gt;buffer, recorderContext-&gt;bufferSize);</div><div class="line">            assert(SL_RESULT_SUCCESS == result);</div><div class="line">            (<span class="keyword">void</span>) result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 播放音频时的回调</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AudioPlayerCallback</span><span class="params">(SLAndroidSimpleBufferQueueItf bufferQueueItf, <span class="keyword">void</span> *context)</span></span>&#123;</div><div class="line">    AudioContext *playerContext = (AudioContext*)context;</div><div class="line">    <span class="keyword">if</span> (!feof(playerContext-&gt;pfile)) &#123;</div><div class="line">        fread(playerContext-&gt;buffer, playerContext-&gt;bufferSize, <span class="number">1</span>, playerContext-&gt;pfile);</div><div class="line">        LOGI(<span class="string">"read a frame audio data."</span>);</div><div class="line">        (*bufferQueueItf)-&gt;Enqueue(bufferQueueItf, playerContext-&gt;buffer, playerContext-&gt;bufferSize);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fclose(playerContext-&gt;pfile);</div><div class="line">        <span class="keyword">delete</span> playerContext-&gt;buffer;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建音频播放器</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createAudioPlayer</span><span class="params">(SLEngineItf engineEngine, SLObjectItf outputMixObject, SLObjectItf &amp;audioPlayerObject)</span></span>&#123;</div><div class="line">    SLDataLocator_AndroidSimpleBufferQueue dataSourceLocator = &#123;</div><div class="line">            SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,</div><div class="line">            <span class="number">1</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// PCM 数据源格式</span></div><div class="line">    SLDataFormat_PCM dataSourceFormat = &#123;</div><div class="line">            SL_DATAFORMAT_PCM,</div><div class="line">            <span class="number">2</span>,</div><div class="line">            SL_SAMPLINGRATE_44_1,</div><div class="line">            SL_PCMSAMPLEFORMAT_FIXED_16,</div><div class="line">            <span class="number">16</span>,</div><div class="line">            SL_SPEAKER_FRONT_LEFT| SL_SPEAKER_FRONT_RIGHT,</div><div class="line">            SL_BYTEORDER_LITTLEENDIAN</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataSource dataSource = &#123;</div><div class="line">            &amp;dataSourceLocator,</div><div class="line">            &amp;dataSourceFormat</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataLocator_OutputMix dataSinkLocator = &#123;</div><div class="line">            SL_DATALOCATOR_OUTPUTMIX, <span class="comment">// 定位器类型</span></div><div class="line">            outputMixObject <span class="comment">// 输出混合</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataSink dataSink = &#123;</div><div class="line">            &amp;dataSinkLocator, <span class="comment">// 定位器</span></div><div class="line">            <span class="number">0</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 需要的接口</span></div><div class="line">    SLInterfaceID interfaceIDs[] = &#123;</div><div class="line">            SL_IID_BUFFERQUEUE</div><div class="line">    &#125;;</div><div class="line">    SLboolean requiredInterfaces[] = &#123;</div><div class="line">            SL_BOOLEAN_TRUE</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 创建音频播放对象</span></div><div class="line">    SLresult result = (*engineEngine)-&gt;CreateAudioPlayer(</div><div class="line">            engineEngine,</div><div class="line">            &amp;audioPlayerObject,</div><div class="line">            &amp;dataSource,</div><div class="line">            &amp;dataSink,</div><div class="line">            <span class="number">1</span>,</div><div class="line">            interfaceIDs,</div><div class="line">            requiredInterfaces</div><div class="line">    );</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"></div><div class="line"><span class="comment">// 开始播放音频</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_opensl_1es_AudioRecorder_startPlay</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">// 创建引擎</span></div><div class="line">    <span class="keyword">if</span> (engineEngine == <span class="literal">NULL</span>) &#123;</div><div class="line">        createEngine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建混音器</span></div><div class="line">    SLresult result;</div><div class="line">    result = (*engineEngine)-&gt;CreateOutputMix(engineEngine, &amp;outputMixObjext, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    result = (*outputMixObjext)-&gt;Realize(outputMixObjext, SL_BOOLEAN_FALSE);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    FILE *p_file = fopen(AUDIO_SRC_PATH, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 创建播放器</span></div><div class="line">    createAudioPlayer(engineEngine, outputMixObjext, playerObject);</div><div class="line"></div><div class="line">    result = (*playerObject)-&gt;Realize(playerObject, SL_BOOLEAN_FALSE);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    result = (*playerObject)-&gt;GetInterface(playerObject, SL_IID_BUFFERQUEUE,</div><div class="line">                                                &amp;playerBufferQueueItf);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    <span class="keyword">uint8_t</span> *buffer = <span class="keyword">new</span> <span class="keyword">uint8_t</span>[BUFFER_SIZE];</div><div class="line">    AudioContext *playerContext = <span class="keyword">new</span> AudioContext(p_file, buffer, BUFFER_SIZE);</div><div class="line">    result = (*playerBufferQueueItf)-&gt;RegisterCallback(playerBufferQueueItf, AudioPlayerCallback,</div><div class="line">                                                    playerContext);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    result = (*playerObject)-&gt;GetInterface(playerObject, SL_IID_PLAY, &amp;playerPlay);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    (<span class="keyword">void</span>) result;</div><div class="line"></div><div class="line">    result = (*playerPlay)-&gt;SetPlayState(playerPlay, SL_PLAYSTATE_PLAYING);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    AudioPlayerCallback(playerBufferQueueItf, playerContext);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 停止播放音频</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_opensl_1es_AudioRecorder_stopPlay</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">if</span> (playerPlay != <span class="literal">NULL</span>) &#123;</div><div class="line">        SLresult result;</div><div class="line">        result = (*playerPlay)-&gt;SetPlayState(playerPlay, SL_PLAYSTATE_STOPPED);</div><div class="line">        assert(SL_RESULT_SUCCESS == result);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 开始采集音频数据，并保存到本地</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_opensl_1es_AudioRecorder_startRecord</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (engineEngine == <span class="literal">NULL</span>) &#123;</div><div class="line">        createEngine();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (recorderObject != <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGI(<span class="string">"Audio recorder already has been created."</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FILE *p_file = fopen(AUDIO_SRC_PATH, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (p_file == <span class="literal">NULL</span>) &#123;</div><div class="line">        LOGI(<span class="string">"Fail to open file."</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SLresult result;</div><div class="line"></div><div class="line">    <span class="comment">/* setup the data source*/</span></div><div class="line">    SLDataLocator_IODevice ioDevice = &#123;</div><div class="line">            SL_DATALOCATOR_IODEVICE,</div><div class="line">            SL_IODEVICE_AUDIOINPUT,</div><div class="line">            SL_DEFAULTDEVICEID_AUDIOINPUT,</div><div class="line">            <span class="literal">NULL</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataSource recSource = &#123;&amp;ioDevice, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    SLDataLocator_AndroidSimpleBufferQueue recBufferQueue = &#123;</div><div class="line">            SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,</div><div class="line">            NUM_BUFFER_QUEUE</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataFormat_PCM pcm = &#123;</div><div class="line">            SL_DATAFORMAT_PCM, <span class="comment">// pcm 格式的数据</span></div><div class="line">            <span class="number">2</span>,  <span class="comment">// 2 个声道（立体声）</span></div><div class="line">            SL_SAMPLINGRATE_44_1, <span class="comment">// 44100hz 的采样频率</span></div><div class="line">            SL_PCMSAMPLEFORMAT_FIXED_16,</div><div class="line">            SL_PCMSAMPLEFORMAT_FIXED_16,</div><div class="line">            SL_SPEAKER_FRONT_LEFT| SL_SPEAKER_FRONT_RIGHT,</div><div class="line">            SL_BYTEORDER_LITTLEENDIAN</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    SLDataSink dataSink = &#123; &amp;recBufferQueue, &amp;pcm &#125;;</div><div class="line">    SLInterfaceID iids[NUM_RECORDER_EXPLICIT_INTERFACES] = &#123;SL_IID_ANDROIDSIMPLEBUFFERQUEUE, SL_IID_ANDROIDCONFIGURATION&#125;;</div><div class="line">    SLboolean required[NUM_RECORDER_EXPLICIT_INTERFACES] = &#123;SL_BOOLEAN_TRUE, SL_BOOLEAN_TRUE&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/* Create the audio recorder */</span></div><div class="line">    result = (*engineEngine)-&gt;CreateAudioRecorder(engineEngine, &amp;recorderObject , &amp;recSource, &amp;dataSink,</div><div class="line">                                                  NUM_RECORDER_EXPLICIT_INTERFACES, iids, required);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* get the android configuration interface*/</span></div><div class="line">    result = (*recorderObject)-&gt;GetInterface(recorderObject, SL_IID_ANDROIDCONFIGURATION, &amp;configItf);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">/* Realize the recorder in synchronous mode. */</span></div><div class="line">    result = (*recorderObject)-&gt;Realize(recorderObject, SL_BOOLEAN_FALSE);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">/* Get the buffer queue interface which was explicitly requested */</span></div><div class="line">    result = (*recorderObject)-&gt;GetInterface(recorderObject, SL_IID_ANDROIDSIMPLEBUFFERQUEUE, (<span class="keyword">void</span>*) &amp;recorderBuffQueueItf);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* get the record interface */</span></div><div class="line">    result = (*recorderObject)-&gt;GetInterface(recorderObject, SL_IID_RECORD, &amp;recorderRecord);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="keyword">uint8_t</span> *buffer = <span class="keyword">new</span> <span class="keyword">uint8_t</span>[BUFFER_SIZE];</div><div class="line">    recorderContext = <span class="keyword">new</span> AudioContext(p_file, buffer, BUFFER_SIZE);</div><div class="line">    result = (*recorderBuffQueueItf)-&gt;RegisterCallback(recorderBuffQueueItf, AudioRecorderCallback, recorderContext);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">/* Enqueue buffers to map the region of memory allocated to store the recorded data */</span></div><div class="line">    result = (*recorderBuffQueueItf)-&gt;Enqueue(recorderBuffQueueItf, recorderContext-&gt;buffer, BUFFER_SIZE);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">    <span class="comment">/* Start recording */</span></div><div class="line">    <span class="comment">// 开始录制音频</span></div><div class="line">    result = (*recorderRecord)-&gt;SetRecordState(recorderRecord, SL_RECORDSTATE_RECORDING);</div><div class="line">    assert(SL_RESULT_SUCCESS == result);</div><div class="line">    LOGI(<span class="string">"Starting recording"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 停止音频采集</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_opensl_1es_AudioRecorder_stopRecord</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">if</span> (recorderRecord != <span class="literal">NULL</span>) &#123;</div><div class="line">        SLresult result = (*recorderRecord)-&gt;SetRecordState(recorderRecord, SL_RECORDSTATE_STOPPED);</div><div class="line">        assert(SL_RESULT_SUCCESS == result);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (recorderContext != <span class="literal">NULL</span>) &#123;</div><div class="line">            fclose(recorderContext-&gt;pfile);</div><div class="line">            <span class="keyword">delete</span> recorderContext-&gt;buffer;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 释放资源</span></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_opensl_1es_AudioRecorder_release</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="keyword">if</span> (recorderObject != <span class="literal">NULL</span>) &#123;</div><div class="line">        (*recorderObject)-&gt;Destroy(recorderObject);</div><div class="line">        recorderObject = <span class="literal">NULL</span>;</div><div class="line">        recorderRecord = <span class="literal">NULL</span>;</div><div class="line">        recorderBuffQueueItf = <span class="literal">NULL</span>;</div><div class="line">        configItf = <span class="literal">NULL</span>;</div><div class="line">        recorderContext = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (playerObject != <span class="literal">NULL</span>) &#123;</div><div class="line">        (*playerObject)-&gt;Destroy(playerObject);</div><div class="line">        playerObject = <span class="literal">NULL</span>;</div><div class="line">        playerPlay = <span class="literal">NULL</span>;</div><div class="line">        playerBufferQueueItf = <span class="literal">NULL</span>;</div><div class="line">        outputMixObjext = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// destroy engine object, and invalidate all associated interfaces</span></div><div class="line">    <span class="keyword">if</span> (engineObject != <span class="literal">NULL</span>) &#123;</div><div class="line">        (*engineObject)-&gt;Destroy(engineObject);</div><div class="line">        engineObject = <span class="literal">NULL</span>;</div><div class="line">        engineEngine = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>CMake 脚本 CMakeLists.txt 。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION <span class="number">3.4</span><span class="number">.1</span>)</div><div class="line"></div><div class="line">add_library( # Sets the name of the library.</div><div class="line">             audio-recorder</div><div class="line"></div><div class="line">             # Sets the library as a shared library.</div><div class="line">             SHARED</div><div class="line"></div><div class="line">             # Provides a relative path to your source file(s).</div><div class="line">             src/main/cpp/audio-recorder.cpp)</div><div class="line"></div><div class="line">target_link_libraries(audio-recorder</div><div class="line">                      android</div><div class="line">                      <span class="built_in">log</span></div><div class="line">                      OpenSLES)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171202.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;不要
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="OpenSL ES" scheme="https://githubhaohao.github.io/tags/OpenSL-ES/"/>
    
  </entry>
  
  <entry>
    <title>NDK POSIX 多线程编程</title>
    <link href="https://githubhaohao.github.io/2018/01/09/NDK-posix-multi-thread/"/>
    <id>https://githubhaohao.github.io/2018/01/09/NDK-posix-multi-thread/</id>
    <published>2018-01-09T12:11:24.000Z</published>
    <updated>2018-01-11T02:16:00.932Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171125.jpg" alt="Markdown"></p><p></p>
<p><div align="center">人价值的高低取决于稀缺性，即不可代替性。</div><br></p>
<blockquote>
<p>本篇详细介绍一下 POSIX 多线程编程常用的 API 。</p>
</blockquote>
<p>本博客 NDK 开发系列文章：</p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
<li><a href="http://haohaochang.cn/2018/01/06/NDK-native-call-java-method/" title="NDK 开发中 Native 与 Java 交互" target="_blank" rel="external">NDK 开发中 Native 与 Java 交互</a></li>
</ul>
<h1 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h1><p>POSIX 全称是 Portable Operating System Interface of UNIX ，表示可移植操作系统接口，本质上是一种编程标准。它定义了操作系统应该为应用程序提供的接口标准，是 IEEE 为要在各种 UNIX 操作系统上运行的软件而定义的一系列 API 标准的总称。</p>
<h1 id="Pthreads"><a href="#Pthreads" class="headerlink" title="Pthreads"></a>Pthreads</h1><p>POSIX 线程是 POSIX 的线程标准，也称为 Pthreads ，它定义了创建和管理线程的一套 API 。本文的 Pthreads 是实现 POSIX 线程标准的 c 语言编程库。在 Linux 系统中，一般多线程的实现由 POSIX 多线程编程实现，而 Android 系统基于 Linux 系统，原生便支持 POSIX 多线程编程。</p>
<p>POSIX Linux 编译命令：<code>gcc hello.c -o hello -lpthread</code>，执行命令：<code>./hello</code>。</p>
<p>由于本文讲的是 NDK 开发，代码编译基于 Android 平台实现。</p>
<h1 id="POSIX-线程创建"><a href="#POSIX-线程创建" class="headerlink" title="POSIX 线程创建"></a>POSIX 线程创建</h1><p>线程创建相关 API：<br>pthread_t 线程 id 。<br>pthread_create 负责创建线程，传入 pthread_t（线程 ID ）的指针，线程的执行方法和传入线程的参数。<br>pthread_join 使当前线程挂起，等待指定线程执行结束，并获取线程返回值。<br>pthread_exit 退出当前线程，并且可以设置当前线程的返回值。<br>pthread_cancel 终止当前线程。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello-thread.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_THREADS 5</span></div><div class="line"></div><div class="line"><span class="comment">// 类似于 Java Runnable</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">run</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</div><div class="line">    <span class="comment">// 取传入当前线程的参数</span></div><div class="line">    <span class="keyword">char</span> *thread_tag = (<span class="keyword">char</span>*)arg;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</div><div class="line">        LOGD(<span class="string">"%s thread %d"</span>, thread_tag, i);</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</div><div class="line">            <span class="comment">// 结束当前线程,参数为线程结束后的返回值</span></div><div class="line">            pthread_exit(thread_tag);</div><div class="line">            <span class="comment">//pthread_cancel(); send a cancellation request to a thread</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 线程正常执行完成后的返回值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_threads</span><span class="params">()</span></span>&#123;</div><div class="line">    LOGD(<span class="string">"Main thread"</span>);</div><div class="line">    <span class="keyword">char</span> tag_arr[][<span class="number">5</span>] = &#123;<span class="string">"No.1"</span>,<span class="string">"No.2"</span>,<span class="string">"No.3"</span>,<span class="string">"No.4"</span>,<span class="string">"No.5"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//线程 id ，用于区分线程，一个线程对应一个唯一的 id</span></div><div class="line">    <span class="keyword">pthread_t</span> tids[NUM_THREADS];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS; ++i) &#123;</div><div class="line">        <span class="comment">// 创建线程，指定 run 方法，传入参数 tags[i]</span></div><div class="line">        pthread_create(&amp;tids[i], <span class="literal">NULL</span>, run, (<span class="keyword">void</span> *) tag_arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> *return_val[NUM_THREADS];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS; ++i) &#123;</div><div class="line">        <span class="comment">// 阻塞当前线程，等待指定 tid 的线程结束，并获取线程返回值</span></div><div class="line">        <span class="comment">// join with a terminated thread</span></div><div class="line">        pthread_join(tids[i], &amp;return_val[i]);</div><div class="line">        LOGD(<span class="string">"thread %s terminated."</span>, (<span class="keyword">char</span>*)return_val[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">I/hello-thread: Main thread</div><div class="line">I/hello-thread: No<span class="number">.1</span> thread <span class="number">0</span></div><div class="line">I/hello-thread: No<span class="number">.1</span> thread <span class="number">1</span></div><div class="line">I/hello-thread: No<span class="number">.1</span> thread <span class="number">2</span></div><div class="line">I/hello-thread: No<span class="number">.1</span> thread <span class="number">3</span></div><div class="line">I/hello-thread: No<span class="number">.1</span> thread <span class="number">4</span></div><div class="line">I/hello-thread: No<span class="number">.2</span> thread <span class="number">0</span></div><div class="line">I/hello-thread: No<span class="number">.2</span> thread <span class="number">1</span></div><div class="line">I/hello-thread: No<span class="number">.2</span> thread <span class="number">2</span></div><div class="line">I/hello-thread: No<span class="number">.2</span> thread <span class="number">3</span></div><div class="line">I/hello-thread: No<span class="number">.2</span> thread <span class="number">4</span></div><div class="line">I/hello-thread: No<span class="number">.3</span> thread <span class="number">0</span></div><div class="line">I/hello-thread: No<span class="number">.3</span> thread <span class="number">1</span></div><div class="line">I/hello-thread: No<span class="number">.3</span> thread <span class="number">2</span></div><div class="line">I/hello-thread: No<span class="number">.3</span> thread <span class="number">3</span></div><div class="line">I/hello-thread: No<span class="number">.3</span> thread <span class="number">4</span></div><div class="line">I/hello-thread: No<span class="number">.4</span> thread <span class="number">0</span></div><div class="line">I/hello-thread: No<span class="number">.4</span> thread <span class="number">1</span></div><div class="line">I/hello-thread: No<span class="number">.4</span> thread <span class="number">2</span></div><div class="line">I/hello-thread: No<span class="number">.4</span> thread <span class="number">3</span></div><div class="line">I/hello-thread: No<span class="number">.4</span> thread <span class="number">4</span></div><div class="line">I/hello-thread: thread No<span class="number">.1</span> terminated.</div><div class="line">I/hello-thread: No<span class="number">.5</span> thread <span class="number">0</span></div><div class="line">I/hello-thread: No<span class="number">.5</span> thread <span class="number">1</span></div><div class="line">I/hello-thread: No<span class="number">.5</span> thread <span class="number">2</span></div><div class="line">I/hello-thread: No<span class="number">.5</span> thread <span class="number">3</span></div><div class="line">I/hello-thread: No<span class="number">.5</span> thread <span class="number">4</span></div><div class="line">I/hello-thread: thread No<span class="number">.2</span> terminated.</div><div class="line">I/hello-thread: thread No<span class="number">.3</span> terminated.</div><div class="line">I/hello-thread: thread No<span class="number">.4</span> terminated.</div><div class="line">I/hello-thread: thread No<span class="number">.5</span> terminated.</div></pre></td></tr></table></figure></p>
<h1 id="POSIX-线程同步"><a href="#POSIX-线程同步" class="headerlink" title="POSIX 线程同步"></a>POSIX 线程同步</h1><p>线程同步相关 API :<br>pthread_mutex_t 互斥锁。<br>pthread_mutex_init 初始化互斥锁，需传入互斥锁的指针。<br>pthread_mutex_destroy 销毁互斥锁，需传入互斥锁的指针。<br>pthread_mutex_lock 加锁，需传入互斥锁的指针。<br>pthread_mutex_unlock 解锁，需传入互斥锁的指针。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello-thread.h"</span></span></div><div class="line"><span class="keyword">int</span> g_count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 互斥锁</span></div><div class="line"><span class="keyword">pthread_mutex_t</span> mutex;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">asyn_run</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</div><div class="line">    <span class="comment">// lock</span></div><div class="line">    pthread_mutex_lock(&amp;mutex);</div><div class="line"></div><div class="line">    <span class="comment">// 取传入当前线程的参数</span></div><div class="line">    <span class="keyword">char</span> *thread_tag = (<span class="keyword">char</span>*)arg;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">        <span class="comment">// 休眠 200 ms</span></div><div class="line">        usleep(<span class="number">200</span> * <span class="number">1000</span>);</div><div class="line">        g_count ++;</div><div class="line">        LOGD(<span class="string">"%s thread %d, g_count = %d"</span>, thread_tag, i, g_count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// unlock</span></div><div class="line">    pthread_mutex_unlock(&amp;mutex);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> thread_tag; <span class="comment">// 线程正常执行完成后的返回值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">syn_thread</span><span class="params">()</span></span>&#123;</div><div class="line">    LOGD(<span class="string">"Main thread"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化互斥锁</span></div><div class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="keyword">pthread_t</span> t1, t2;</div><div class="line"></div><div class="line">    <span class="comment">// 创建 2 个线程</span></div><div class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, asyn_run, <span class="string">"No.1"</span>);</div><div class="line">    pthread_create(&amp;t2, <span class="literal">NULL</span>, asyn_run, <span class="string">"No.2"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">void</span> *rtn_val[<span class="number">2</span>];</div><div class="line">    pthread_join(t1, &amp;rtn_val[<span class="number">0</span>]);</div><div class="line">    pthread_join(t2, &amp;rtn_val[<span class="number">1</span>]);</div><div class="line">    LOGD(<span class="string">"thread %s terminated."</span>, (<span class="keyword">char</span>*)rtn_val[<span class="number">0</span>]);</div><div class="line">    LOGD(<span class="string">"thread %s terminated."</span>, (<span class="keyword">char</span>*)rtn_val[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    <span class="comment">// 销毁互斥锁</span></div><div class="line">    pthread_mutex_destroy(&amp;mutex);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">I/hello-thread: No.1 thread 0, g_count = 1</div><div class="line">I/hello-thread: No.1 thread 1, g_count = 2</div><div class="line">I/hello-thread: No.1 thread 2, g_count = 3</div><div class="line">I/hello-thread: No.1 thread 3, g_count = 4</div><div class="line">I/hello-thread: No.1 thread 4, g_count = 5</div><div class="line">I/hello-thread: No.1 thread 5, g_count = 6</div><div class="line">I/hello-thread: No.1 thread 6, g_count = 7</div><div class="line">I/hello-thread: No.1 thread 7, g_count = 8</div><div class="line">I/hello-thread: No.1 thread 8, g_count = 9</div><div class="line">I/hello-thread: No.1 thread 9, g_count = 10</div><div class="line">I/hello-thread: No.2 thread 0, g_count = 11</div><div class="line">I/hello-thread: No.2 thread 1, g_count = 12</div><div class="line">I/hello-thread: No.2 thread 2, g_count = 13</div><div class="line">I/hello-thread: No.2 thread 3, g_count = 14</div><div class="line">I/hello-thread: No.2 thread 4, g_count = 15</div><div class="line">I/hello-thread: No.2 thread 5, g_count = 16</div><div class="line">I/hello-thread: No.2 thread 6, g_count = 17</div><div class="line">I/hello-thread: No.2 thread 7, g_count = 18</div><div class="line">I/hello-thread: No.2 thread 8, g_count = 19</div><div class="line">I/hello-thread: No.2 thread 9, g_count = 20</div><div class="line">I/hello-thread: thread No.1 terminated.</div><div class="line">I/hello-thread: thread No.2 terminated.</div></pre></td></tr></table></figure></p>
<h1 id="POSIX-线程间通信"><a href="#POSIX-线程间通信" class="headerlink" title="POSIX 线程间通信"></a>POSIX 线程间通信</h1><p>线程间通信相关 API ：<br>pthread_cond_t 条件变量，条件变量是线程同步的一种手段，使线程可以休眠等待某种条件出现。<br>pthread_cond_signal 发送一个信号给另外一个正在处于阻塞等待状态的线程，原本这两个线程竞争同一个 mutex lock 。<br>pthread_cond_wait 使当前线程处于阻塞状态，直到接收到其他线程发送对应的 cond_signal 。<br>pthread_cond_init 初始化条件变量。<br>pthread_cond_destroy 销毁条件变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello-thread.h"</span></span></div><div class="line"><span class="comment">// 共享数据</span></div><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> shared_count = <span class="number">0</span>;</div><div class="line"><span class="keyword">pthread_mutex_t</span> pthread_mutex;</div><div class="line"></div><div class="line"><span class="comment">// 条件变量</span></div><div class="line"><span class="keyword">pthread_cond_t</span> pthread_cond;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> *tag = (<span class="keyword">char</span>*)arg;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        pthread_mutex_lock(&amp;pthread_mutex);</div><div class="line"></div><div class="line">        <span class="comment">// 生产者生产产品</span></div><div class="line">        shared_count ++;</div><div class="line">        LOGD(<span class="string">"%s thread 生产产品, count = %d"</span>, tag, shared_count);</div><div class="line"></div><div class="line">        <span class="comment">// 通知消费者线程消费</span></div><div class="line">        pthread_cond_signal(&amp;pthread_cond);</div><div class="line"></div><div class="line">        pthread_mutex_unlock(&amp;pthread_mutex);</div><div class="line"></div><div class="line">        <span class="comment">// 休眠 200 ms</span></div><div class="line">        usleep(<span class="number">200</span> * <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">void</span>*)<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span>* tag = (<span class="keyword">char</span>*)arg;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        pthread_mutex_lock(&amp;pthread_mutex);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (shared_count == <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">// 当没有产品可以消费时，等待生产者生产（等待条件变量被唤醒，当前线程释放互斥锁）</span></div><div class="line">            <span class="comment">// 当被其他线程唤醒时，解除阻塞状态，重新申请获得互斥锁</span></div><div class="line">            pthread_cond_wait(&amp;pthread_cond, &amp;pthread_mutex);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        shared_count --;</div><div class="line">        LOGD(<span class="string">"%s thread 消费产品, count = %d"</span>, tag, shared_count);</div><div class="line"></div><div class="line">        pthread_mutex_unlock(&amp;pthread_mutex);</div><div class="line"></div><div class="line">        <span class="comment">// 休眠 500 ms</span></div><div class="line">        usleep(<span class="number">500</span> * <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">void</span>*)<span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 线程间通信</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">communicate_thread</span><span class="params">()</span></span>&#123;</div><div class="line">    pthread_mutex_init(&amp;pthread_mutex, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化条件变量</span></div><div class="line">    pthread_cond_init(&amp;pthread_cond, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 线程 id</span></div><div class="line">    <span class="keyword">pthread_t</span> producer_tid, consumer_tid;</div><div class="line"></div><div class="line">    <span class="comment">// 创建生产者线程</span></div><div class="line">    pthread_create(&amp;producer_tid, <span class="literal">NULL</span>, producer, <span class="string">"producer"</span>);</div><div class="line">    <span class="comment">// 创建消费者线程</span></div><div class="line">    pthread_create(&amp;consumer_tid, <span class="literal">NULL</span>, consumer, <span class="string">"consumer"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 等待线程结束</span></div><div class="line">    pthread_join(producer_tid, <span class="literal">NULL</span>);</div><div class="line">    pthread_join(consumer_tid, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 销毁互斥锁</span></div><div class="line">    pthread_mutex_destroy(&amp;pthread_mutex);</div><div class="line">    <span class="comment">// 销毁条件变量</span></div><div class="line">    pthread_cond_destroy(&amp;pthread_cond);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">I/hello-thread: producer thread 生产产品, count = 1</div><div class="line">I/hello-thread: consumer thread 消费产品, count = 0</div><div class="line">I/hello-thread: producer thread 生产产品, count = 1</div><div class="line">I/hello-thread: producer thread 生产产品, count = 2</div><div class="line">I/hello-thread: consumer thread 消费产品, count = 1</div><div class="line">I/hello-thread: producer thread 生产产品, count = 2</div><div class="line">I/hello-thread: producer thread 生产产品, count = 3</div><div class="line">I/hello-thread: consumer thread 消费产品, count = 2</div><div class="line">I/hello-thread: producer thread 生产产品, count = 3</div><div class="line">I/hello-thread: producer thread 生产产品, count = 4</div><div class="line">I/hello-thread: producer thread 生产产品, count = 5</div><div class="line">I/hello-thread: consumer thread 消费产品, count = 4</div><div class="line">I/hello-thread: producer thread 生产产品, count = 5</div><div class="line">I/hello-thread: producer thread 生产产品, count = 6</div><div class="line">I/hello-thread: consumer thread 消费产品, count = 5</div><div class="line">......</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171125.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;人价
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="POSIX 多线程" scheme="https://githubhaohao.github.io/tags/POSIX-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NDK 开发中 Native 与 Java 交互</title>
    <link href="https://githubhaohao.github.io/2018/01/06/NDK-native-call-java-method/"/>
    <id>https://githubhaohao.github.io/2018/01/06/NDK-native-call-java-method/</id>
    <published>2018-01-06T06:00:52.000Z</published>
    <updated>2018-01-10T11:03:55.432Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171118.jpg" alt="Markdown"></p><p></p>
<p><div align="center">人生远比我们想象得漫长，所以不争一城一池的得失，要把一切机会和挫折都放到尽可能长的周期里来思考。</div><br></p>
<blockquote>
<p>本篇详细介绍一下 Native 层与 Java 交互方式</p>
</blockquote>
<p>前面文章分别介绍的 NDK 编译方式和第三方库的引入方式：</p>
<ul>
<li><a href="http://haohaochang.cn/2017/11/04/NDK-compiled-three-ways/" title="NDK 编译的三种方式" target="_blank" rel="external">NDK 编译的三种方式</a></li>
<li><a href="http://haohaochang.cn/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/" title="在 NDK 开发中引入第三方静态库和动态库" target="_blank" rel="external">在 NDK 开发中引入第三方静态库和动态库</a></li>
</ul>
<h1 id="Java-与-JNI-数据类型对应关系"><a href="#Java-与-JNI-数据类型对应关系" class="headerlink" title="Java 与 JNI 数据类型对应关系"></a>Java 与 JNI 数据类型对应关系</h1><table>
<thead>
<tr>
<th>Java 数据类型</th>
<th style="text-align:center">JNI 数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:center">jboolean</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:center">jbyte</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:center">jchar</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:center">jshort</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:center">jint</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:center">jlong</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:center">jfloat</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:center">jdouble</td>
</tr>
<tr>
<td>String</td>
<td style="text-align:center">jstring</td>
</tr>
<tr>
<td>Object</td>
<td style="text-align:center">jobject</td>
</tr>
<tr>
<td>byte[]</td>
<td style="text-align:center">jbyteArray</td>
</tr>
<tr>
<td>Object[]</td>
<td style="text-align:center">jobjectArray</td>
</tr>
</tbody>
</table>
<h1 id="Native-中的签名"><a href="#Native-中的签名" class="headerlink" title="Native 中的签名"></a>Native 中的签名</h1><p>NDK 开发中会用到 Java 对象的属性签名和方法签名，用于区分不同的属性和方法。</p>
<h2 id="属性签名"><a href="#属性签名" class="headerlink" title="属性签名"></a>属性签名</h2><p>属性的签名就是属性类型的简称。<br>属性类型与其签名的对应关系如下：</p>
<table>
<thead>
<tr>
<th>属性类型</th>
<th style="text-align:left">类型签名</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:left">Z</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">B</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">C</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">S</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">I</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">L</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">F</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">D</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">V</td>
</tr>
<tr>
<td>String</td>
<td style="text-align:left">Ljava/lang/String;</td>
</tr>
<tr>
<td>Object</td>
<td style="text-align:left">以 L 开头，后加完整的包名，并以分号结束</td>
</tr>
<tr>
<td>byte[]</td>
<td style="text-align:left">[B</td>
</tr>
<tr>
<td>Object[]</td>
<td style="text-align:left">以 [ 开头，后加对象类型签名，例如 String[] 对应 [Ljava/lang/String;</td>
</tr>
</tbody>
</table>
<h2 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h2><p>方法签名格式：<br><code>(参数类型签名)返回值类型签名</code></p>
<p>那么如何获取方法签名？<br>执行命令 <code>javah &lt;class 文件的全名&gt;</code><br>如 <code>javah com.haohao.hellojni.NativeTest.class</code> 生成 com_haohao_hellojni_NativeTest.h 文件，文件中便标出了方法的 Signature 。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_haohao_hellojni_NativeTest */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_haohao_hellojni_NativeTest</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_haohao_hellojni_NativeTest</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_getString__</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    getString</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_getString__Ljava_lang_String_2</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    getInt</div><div class="line"> * Signature: ()I</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_getInt__</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    getInt</div><div class="line"> * Signature: (I)I</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_getInt__I</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jint)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    input</div><div class="line"> * Signature: (Ljava/lang/String;I)V</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_input__Ljava_lang_String_2I</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jstring, jint)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    input</div><div class="line"> * Signature: ([Ljava/lang/String;I)V</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_input___3Ljava_lang_String_2I</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray, jint)</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_haohao_hellojni_NativeTest</div><div class="line"> * Method:    getBytes</div><div class="line"> * Signature: ([Ljava/lang/String;Ljava/lang/String;)[B</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jbyteArray JNICALL <span class="title">Java_com_haohao_hellojni_NativeTest_getBytes</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jobjectArray, jstring)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h1 id="Native-与-Java-交互"><a href="#Native-与-Java-交互" class="headerlink" title="Native 与 Java 交互"></a>Native 与 Java 交互</h1><p>设置一个简单的类 NativeUtils.java 用于测试，Native 与 Java 交互的实现类似于 Java 的反射机制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.haohao.hellojni;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * author: haohao</div><div class="line"> * time: 2018/1/1</div><div class="line"> * mail: haohaochang86@gmail.com</div><div class="line"> * desc: description</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"native-utils"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NativeUtils"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticProp = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> prop = -<span class="number">1</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStringFromJava</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"getStringFromJava: "</span>+ str);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello C , I am from Java."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringFromJavaStatic</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"getStringFromJavaStatic: "</span> + str);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello C , I am from Java static."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessJavaClassProp</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">callJavaClassMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessStaticJavaProp</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">callStaticJavaMethod</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="访问-Java-对象的非静态属性"><a href="#访问-Java-对象的非静态属性" class="headerlink" title="访问 Java 对象的非静态属性"></a>访问 Java 对象的非静态属性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_accessJavaClassProp</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">//访问 Java 对象的非静态属性</span></div><div class="line"></div><div class="line">    <span class="comment">//通过 JNIEnv 和对象 instance 实例拿到 class 。</span></div><div class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, instance);</div><div class="line">    <span class="comment">//获取属性的 field id</span></div><div class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"prop"</span>, <span class="string">"I"</span>);</div><div class="line">    <span class="comment">//通过 field id 获取属性的值</span></div><div class="line">    jint prop = (*env)-&gt;GetIntField(env, instance, fid);</div><div class="line">    <span class="comment">//在 Native 层修改属性</span></div><div class="line">    prop += <span class="number">101</span>;</div><div class="line">    (*env)-&gt;SetIntField(env, instance, fid, prop);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调用-Java-对象的非静态方法"><a href="#调用-Java-对象的非静态方法" class="headerlink" title="调用 Java 对象的非静态方法"></a>调用 Java 对象的非静态方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_callJavaClassMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">//调用 Java 对象的非静态方法</span></div><div class="line"></div><div class="line">    jclass myClass = (*env)-&gt;GetObjectClass(env, instance);</div><div class="line">    <span class="comment">//获取发方法的 method id</span></div><div class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, myClass, <span class="string">"getStringFromJava"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//调用 Java 对象的方法</span></div><div class="line">    jstring  jstr = (*env)-&gt;CallObjectMethod(env, instance, mid, (*env)-&gt;NewStringUTF(env, <span class="string">"Hello Java, I am From C."</span>));</div><div class="line">    <span class="comment">//jstring 转换为 c 的字符串</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="literal">NULL</span>);</div><div class="line">    LOGD(<span class="string">"%s"</span>, cstr);</div><div class="line">    <span class="comment">//注意区别对待 Java 字符串和 C 的字符串，除了基本数据类型之外，其他都需要进行类型转换</span></div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, jstr, cstr);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="访问-Java-对象的静态属性"><a href="#访问-Java-对象的静态属性" class="headerlink" title="访问 Java 对象的静态属性"></a>访问 Java 对象的静态属性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_accessStaticJavaProp</span><span class="params">(JNIEnv *env, jclass type)</span> &#123;</div><div class="line">    <span class="comment">//访问 Java 对象的静态属性,</span></div><div class="line"></div><div class="line">    jfieldID fid = (*env)-&gt;GetStaticFieldID(env, type, <span class="string">"staticProp"</span>, <span class="string">"I"</span>);</div><div class="line">    jint staticProp = (*env)-&gt;GetStaticIntField(env, type, fid);</div><div class="line">    staticProp += <span class="number">101</span>;</div><div class="line">    (*env)-&gt;SetStaticIntField(env, type, fid, staticProp);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调用-Java-对象的静态方法"><a href="#调用-Java-对象的静态方法" class="headerlink" title="调用 Java 对象的静态方法"></a>调用 Java 对象的静态方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_callStaticJavaMethod</span><span class="params">(JNIEnv *env, jclass type)</span> &#123;</div><div class="line">    <span class="comment">//调用 Java 对象的静态方法</span></div><div class="line"></div><div class="line">    jmethodID mid = (*env)-&gt;GetStaticMethodID(env, type, <span class="string">"getStringFromJavaStatic"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (*env)-&gt;CallStaticObjectMethod(env, type, mid, (*env)-&gt;NewStringUTF(env, <span class="string">"Hello Java, I am From C."</span>));</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="literal">NULL</span>);</div><div class="line">    LOGD(<span class="string">"%s"</span>, cstr);</div><div class="line"></div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, jstr, cstr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">nativeUtils = <span class="keyword">new</span> NativeUtils();</div><div class="line">Log.i(TAG, <span class="string">"old prop : "</span> + nativeUtils.prop);</div><div class="line">nativeUtils.accessJavaClassProp();</div><div class="line">Log.i(TAG, <span class="string">"new prop : "</span> + nativeUtils.prop);</div><div class="line">Log.i(TAG, <span class="string">"old static prop : "</span> + NativeUtils.staticProp);</div><div class="line">NativeUtils.accessStaticJavaProp();</div><div class="line">Log.i(TAG, <span class="string">"new static prop : "</span> + NativeUtils.staticProp);</div><div class="line">nativeUtils.callJavaClassMethod();</div><div class="line">NativeUtils.callStaticJavaMethod();</div></pre></td></tr></table></figure>
<p>native-utils.c 完整代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by haohao on 2018/1/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TAG <span class="meta-string">"native-utils"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_INFO,TAG ,__VA_ARGS__) <span class="comment">// 定义LOGD类型</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_accessJavaClassProp</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">//访问 Java 对象的非静态属性</span></div><div class="line"></div><div class="line">    <span class="comment">//通过 JNIEnv 和对象 instance 实例拿到 class 。</span></div><div class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, instance);</div><div class="line">    <span class="comment">//获取属性的 field id</span></div><div class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"prop"</span>, <span class="string">"I"</span>);</div><div class="line">    <span class="comment">//通过 field id 获取属性的值</span></div><div class="line">    jint prop = (*env)-&gt;GetIntField(env, instance, fid);</div><div class="line">    <span class="comment">//在 Native 层修改属性</span></div><div class="line">    prop += <span class="number">101</span>;</div><div class="line">    (*env)-&gt;SetIntField(env, instance, fid, prop);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_callJavaClassMethod</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">    <span class="comment">//调用 Java 对象的非静态方法</span></div><div class="line"></div><div class="line">    jclass myClass = (*env)-&gt;GetObjectClass(env, instance);</div><div class="line">    <span class="comment">//获取发方法的 method id</span></div><div class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, myClass, <span class="string">"getStringFromJava"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">//调用 Java 对象的方法</span></div><div class="line">    jstring  jstr = (*env)-&gt;CallObjectMethod(env, instance, mid, (*env)-&gt;NewStringUTF(env, <span class="string">"Hello Java, I am From C."</span>));</div><div class="line">    <span class="comment">//jstring 转换为 c 的字符串</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="literal">NULL</span>);</div><div class="line">    LOGD(<span class="string">"%s"</span>, cstr);</div><div class="line">    <span class="comment">//注意区别对待 Java 字符串和 C 的字符串，除了基本数据类型之外，其他都需要进行类型转换</span></div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, jstr, cstr);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_accessStaticJavaProp</span><span class="params">(JNIEnv *env, jclass type)</span> &#123;</div><div class="line">    <span class="comment">//访问 Java 对象的静态属性,</span></div><div class="line"></div><div class="line">    jfieldID fid = (*env)-&gt;GetStaticFieldID(env, type, <span class="string">"staticProp"</span>, <span class="string">"I"</span>);</div><div class="line">    jint staticProp = (*env)-&gt;GetStaticIntField(env, type, fid);</div><div class="line">    staticProp += <span class="number">101</span>;</div><div class="line">    (*env)-&gt;SetStaticIntField(env, type, fid, staticProp);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_hellojni_NativeUtils_callStaticJavaMethod</span><span class="params">(JNIEnv *env, jclass type)</span> &#123;</div><div class="line">    <span class="comment">//调用 Java 对象的静态方法</span></div><div class="line"></div><div class="line">    jmethodID mid = (*env)-&gt;GetStaticMethodID(env, type, <span class="string">"getStringFromJavaStatic"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>);</div><div class="line">    jstring jstr = (*env)-&gt;CallStaticObjectMethod(env, type, mid, (*env)-&gt;NewStringUTF(env, <span class="string">"Hello Java, I am From C."</span>));</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="literal">NULL</span>);</div><div class="line">    LOGD(<span class="string">"%s"</span>, cstr);</div><div class="line"></div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, jstr, cstr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">I/MainActivity: old prop : -<span class="number">1</span></div><div class="line">I/MainActivity: <span class="keyword">new</span> prop : <span class="number">100</span></div><div class="line">I/MainActivity: old <span class="keyword">static</span> prop : -<span class="number">1</span></div><div class="line">I/MainActivity: <span class="keyword">new</span> <span class="keyword">static</span> prop : <span class="number">100</span></div><div class="line">I/NativeUtils: getStringFromJava: Hello Java, I am From C.</div><div class="line">I/<span class="keyword">native</span>-utils: Hello C , I am from Java.</div><div class="line">I/NativeUtils: getStringFromJavaStatic: Hello Java, I am From C.</div><div class="line">I/<span class="keyword">native</span>-utils: Hello C , I am from Java <span class="keyword">static</span>.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171118.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;人生
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="Native 与 Java 交互" scheme="https://githubhaohao.github.io/tags/Native-%E4%B8%8E-Java-%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>你好 2018</title>
    <link href="https://githubhaohao.github.io/2018/01/01/hello-2018/"/>
    <id>https://githubhaohao.github.io/2018/01/01/hello-2018/</id>
    <published>2018-01-01T12:42:13.000Z</published>
    <updated>2018-01-04T06:39:15.303Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20180101.jpg" alt="Markdown"></p><p></p>
<p><div align="center">为 2018 立几个 FLAG </div><br></p>
<h1 id="回看-2017"><a href="#回看-2017" class="headerlink" title="回看 2017"></a>回看 2017</h1><p>2017 是极其平淡的一年，也是孕育希望的一年。2017 我还在读研，2017 我还在租房。如果非要用几个字来形容 2017 年，那就是“学习”、“美食”、“电影”。</p>
<p>整个 2017 年，我和媳妇儿，看了很多场电影，吃了很多顿大餐（直接的后果就是导致我的体重增加 10 斤），这也许是我们最大的共同爱好。2017 年主要靠媳妇儿的工作收入和我研究生的微薄补足，支撑着我们的“电影”、“美食”和房租，另外我们还喜欢到处走走。</p>
<p>接下来主要总结一下，2017 年在技术方面的一些收获。除了搞项目之外，上半年主要掌握了 Facebook 的全家桶，包括 RN 和 React 前端开发技术，下半年以完成论文为目的学习了 Python 和 TensorFlow 开发，再到后来，系统地学习了 Kotlin Android 开发。以上技术学习都是基于个人兴趣，自己做了几个小项目，并没有运用的生产环境中。总体来说，对常规开发中的技术栈有了一定的掌握，但并没有深入，这也是兴趣太广泛的缺点。</p>
<p>回望 2017 ，非常感谢导师和同学在生活和学习上给予我的帮助，感谢我的家人给予我的陪伴和支持。</p>
<h1 id="展望-2018"><a href="#展望-2018" class="headerlink" title="展望 2018"></a>展望 2018</h1><p>不得不说，时间过得真的是太快了，大一的生活还历历在目，可是那已经是 7 年前的事了。正如，上帝悄悄偷走了我们的纯真，却神圣地说是成长的代价。</p>
<p>马上就要毕业了，接下来必须要独当一面，给我的 2018 立几个 FLAG （希望明年再看这篇文章的时候不会脸疼）。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>继续培养我和媳妇儿共同爱好，“电影”、“美食”，在追加一个“到处走走”。<br>继续培养我的新技能–烹饪，具体一点就是精通媳妇儿最喜欢吃的那几道菜的做法。等未来什么时候人工智能也淘汰了，那我就当厨师咯，人类总要吃饭的，哈哈。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>熟练掌握音视频编解码技术，至少搞一个开源项目；<br>掌握基于移动端的 TensorFlow 开发。</p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>继续打理自己的公众号、博客，保证周期性更新。</p>
<h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>毫无疑问，身体是革命的本钱，是一切美好的基石，尤其是针对经常调侃自己是吃青春饭的程序员来说。</p>
<p>2017 年由于实验室制度等各种原因（其实主要是自己太懒），周期运动都没坚持下来。</p>
<p>2018 年量化目标，确保体重比现在下降 10 斤。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20180101.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;为 
    
    </summary>
    
      <category term="生活" scheme="https://githubhaohao.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="规划" scheme="https://githubhaohao.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>推荐 2 款 Google 访问工具</title>
    <link href="https://githubhaohao.github.io/2017/12/31/recommended-2-Google-access-tools/"/>
    <id>https://githubhaohao.github.io/2017/12/31/recommended-2-Google-access-tools/</id>
    <published>2017-12-31T07:33:25.000Z</published>
    <updated>2018-01-02T01:43:53.334Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://mmbiz.qpic.cn/mmbiz_png/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBiaGoOWLJdUBUWqLyqeLQ8v1iaUdicQZvUiaOibfKYKkUshSIve4IcY5WcfeA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="Markdown"></p><p></p>
<div align="center">影响人生命运的选择，不在于某个重要关头的重大事件，而在于一些很无所谓的事情。</div><br><br><br>&gt; 2017 年最后一篇文章，只有福利，没有干货。<br><br><br># iShadow #<br>iShadow 是一个提供科学上网服务的网站。当然科学上网工具不只有某风、某灯、**-Net 等，iShadow 网站整体风格独树一帜，进入该网站后，你首先会因看到一大堆美食而口水直流。<br><br><img src="http://mmbiz.qpic.cn/mmbiz_jpg/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBiaKquZFvw2hLYjSt4F44d0I80PRCicIOGmalK5hFkV5HqDmpIkZwEO3rg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="iShadow 网站主界面"><br><br><div align="center">iShadow 网站主界面</div>

<p>这个网站给人的第一感觉就是，它是搞美食烹饪的，但细想一下也没错，毕竟大部分程序员都是吃货。该网站提供免费和付费的 SS 账号，免费账号的密码每 6 个小时更换一次，速度良好，对于一般需求的开发者足够了。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBiapblxh2FcgtD61NgtTYsjPL5vHrHmFnibf09XVeGeycaFwG3q2nV0UUQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>使用教程支持四种平台，配置非常方便。点击一道美食后，上方会出现一个二维码，用你的客户端扫描一下就完成配置。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBia2knS8Ol2AJdkuCq7V4oX5APsvEjbkRhzx9IyxPdiaUcg5PObkrqFqyw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>iShadow 网站地址：</p>
<p><a href="https://global.ishadowx.net/" title="https://global.ishadowx.net/ " target="_blank" rel="external">https://global.ishadowx.net/ </a></p>
<p>由于不可抗力，网址会不断变更，但只需要记住和搜索 iShadow 关键词。</p>
<h1 id="Google-访问助手"><a href="#Google-访问助手" class="headerlink" title="Google 访问助手"></a>Google 访问助手</h1><p><img src="http://mmbiz.qpic.cn/mmbiz_png/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBia0375y7Iun4yYmgFGvXkGWicFxqzdT3q22JoATzVFzldCDjXrneVcibeQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>Google 访问助手是一款浏览器插件，该插件可以助你使用 Google 所提供的服务，如搜索引擎、Gmail 等，使用非常方便，但是屏蔽掉了大部分国外网站，包括 Android 官网等。那么，怎样才能获得插件呢？关注『 <strong>AndroidGeeks</strong> 』公众号 ，并在公众号后台回复关键字『 <strong>Google</strong> 』，即可获得该插件。</p>
<p>获得该插件后，打开 Chrome 浏览器，然后进入chrome://extensions/ 扩展程序页面，将 .crx 文件直接拖进去，即完成插件安装。</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz_png/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBiazMmBA9QbmRrYoYyyYyonIqqeCwcqSsSmX5MrldHrzvs3zd3aDM98Og/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>安装完成后，进入 Chrome 浏览器的设置页面，即 chrome://settings/ ，将启动页设置为 hao123 主页（忍忍吧），重启浏览器，即可以使用 Google 服务。</p>
<p><a href="https://mp.weixin.qq.com/s/Zh5aZQH7er6CAzZNUifwLA" title="https://mp.weixin.qq.com/s/Zh5aZQH7er6CAzZNUifwLA" target="_blank" rel="external">公众号文章链接 https://mp.weixin.qq.com/s/Zh5aZQH7er6CAzZNUifwLA </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_png/Y4w7CnSkUZLM1wRaSEg5ibFl92pJ3ZsBiaGoOWLJdUBUWqLyqeLQ8v1iaUdicQZvUiaOibfKYK
    
    </summary>
    
      <category term="工具" scheme="https://githubhaohao.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="科学上网" scheme="https://githubhaohao.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>在 NDK 开发中引入第三方静态库和动态库</title>
    <link href="https://githubhaohao.github.io/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/"/>
    <id>https://githubhaohao.github.io/2017/11/11/NDK-packaging-third-party-static-and-dynamic-lib/</id>
    <published>2017-11-11T04:33:25.000Z</published>
    <updated>2018-01-02T01:37:03.017Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171111.jpg" alt="Markdown"></p><p></p>
<p><div align="center">自律的前期是兴奋的，中期是痛苦的，后期是享受的。</div><br></p>
<blockquote>
<p>本篇介绍在 NDK 开发中通过 CMake 引入第三方静态库和动态库。</p>
</blockquote>
<h1 id="静态库和动态库"><a href="#静态库和动态库" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h1><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>静态库文件后缀一般为 .a ，利用静态库编译成的可执行文件通常比较大，编译后的执行程序不需要外部函数库的支持。但是，如果一个程序依赖的静态库发生改变，那么这个程序就需要重新编译。</p>
<h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>动态库也称为共享库，动态库文件后缀一般为 .so (Linux) 或 .dll (Windows) ，相对于静态库，动态库在编译时, 并没有被编译进目标代码中，程序执行到相关函数时才调用动态库里的相关函数，动态库编译后所产生的可执行文件通常较小。由于动态库没有被整合进程序，而是程序运行时动态地申请并调用，因此程序的运行环境中必须提供相应的库。动态库的改变并不影响程序，便于升级。</p>
<h2 id="两种函数库特点"><a href="#两种函数库特点" class="headerlink" title="两种函数库特点"></a>两种函数库特点</h2><p>静态库：编译后的执行程序不需要外部的函数库支持，编译过程中已经被载入可执行程序,程序运行时将不再需要该静态库；<br>动态库：动态库的代码在程序运行时才载入内存，而编译过程中仅简单的引用，代码体积较小，并且动态库与程序代码独立，可复用，耦合度低；</p>
<h1 id="生成第三方动态库和静态库"><a href="#生成第三方动态库和静态库" class="headerlink" title="生成第三方动态库和静态库"></a>生成第三方动态库和静态库</h1><p>本文主要通过 CMake 工具构建，请确保 AS 版本在 2.2 以上。本节简单生成一个动态库和静态库，模仿我们要引入的第三方库文件。<br>新建一个工程，选择 Support C++ ，文件结构：</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndklib/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt=""></p>
<p>文件 haohao/haohao.h ，定义一个简单的结构体和一个简单的类。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by haohao on 2017/12/14.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDKLIB_HAOHAO_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NDKLIB_HAOHAO_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_E(...)  __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">"HaoHao"</span>,__VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> (*getResponse)();</div><div class="line">&#125; HaoHao_FUN;</div><div class="line"></div><div class="line"><span class="keyword">class</span> HaoHao&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    HaoHao(<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getHaoHaoWord</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> __attribute__ ((visibility (<span class="string">"default"</span>))) HaoHao_FUN haohao_fun;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//NDKLIB_HAOHAO_H</span></span></div></pre></td></tr></table></figure>
<p>haohao/haohao.cpp ，实例化一个结构体。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"haohao.h"</span></span></div><div class="line"></div><div class="line">HaoHao::HaoHao(<span class="built_in">std</span>::<span class="built_in">string</span> name, <span class="keyword">int</span> age) &#123;</div><div class="line">    <span class="keyword">this</span>-&gt;name = name;</div><div class="line">    <span class="keyword">this</span>-&gt;age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> HaoHao::getHaoHaoWord() &#123;</div><div class="line">    <span class="keyword">char</span> tem[<span class="number">3</span>];</div><div class="line">    <span class="built_in">sprintf</span>(tem, <span class="string">"%d"</span>, age);</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, My name is "</span> + name + <span class="string">" I am "</span> + tem + <span class="string">" years old"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">get_response</span><span class="params">()</span></span>&#123;</div><div class="line">    HaoHao hao = HaoHao(<span class="string">"chary"</span>, <span class="number">23</span>);</div><div class="line">    <span class="keyword">return</span> hao.getHaoHaoWord();</div><div class="line">&#125;</div><div class="line"></div><div class="line">__attribute__ ((visibility (<span class="string">"default"</span>))) HaoHao_FUN haohao_fun = &#123;</div><div class="line">     get_response</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>haohao/CMakeLists.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line">add_library(haohao STATIC haohao.cpp ) // 添加为静态库</div><div class="line"></div><div class="line">find_library(log-lib  log )</div><div class="line"></div><div class="line">target_link_libraries(haohao $&#123;log-lib&#125; )</div></pre></td></tr></table></figure>
<p>nannan/nannan.h ，定义一个简单的结构体，提供给其他程序使用。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDKLIB_NANNAN_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NDKLIB_NANNAN_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  LOG_E(...)  __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">"NanNan"</span>,__VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> (*getResponse)();</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="keyword">int32_t</span> (*getNanNanKey)();</div><div class="line">&#125; NANNAN_FUN;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> __attribute__ ((visibility (<span class="string">"default"</span>))) NANNAN_FUN nannan_fun;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//NDKLIB_NANNAN_H</span></span></div></pre></td></tr></table></figure>
<p>nannan/nannan.cpp</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nannan.h"</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">get_nannan_response</span><span class="params">()</span></span>&#123;</div><div class="line">    LOG_E(<span class="string">"Nannan get response"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, My name is Nannan!"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="keyword">int32_t</span> get_nannan_age()&#123;</div><div class="line">    LOG_E(<span class="string">"Nannan get age"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">23</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">__attribute__ ((visibility (<span class="string">"default"</span>))) NANNAN_FUN nannan_fun = &#123;</div><div class="line">        get_nannan_response,</div><div class="line">        get_nannan_age</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>nannan/CmakeLists.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line">add_library(nannan SHARED nannan.cpp ) // 添加为动态库</div><div class="line"></div><div class="line">find_library(log-lib  log )</div><div class="line"></div><div class="line">target_link_libraries(nannan $&#123;log-lib&#125; )</div></pre></td></tr></table></figure>
<p>根目录下的 CMakeLists.txt </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line">include_directories($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp)</div><div class="line">set(jnilibs &quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs&quot;)</div><div class="line">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;jnilibs&#125;/$&#123;ANDROID_ABI&#125;)</div><div class="line"></div><div class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125;  -std=c++14 -pthread -DMGULK_LOG_STDERR=1 -Wall -Wextra -Wnon-virtual-dtor -g&quot;)</div><div class="line"></div><div class="line">ADD_SUBDIRECTORY($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/haohao)</div><div class="line">ADD_SUBDIRECTORY($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/nannan)</div></pre></td></tr></table></figure>
<p>app/build.gradle</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndklib/genlib-gradle.png" alt=""></p>
<p>make 工程，在 app/src/main/jniLibs 目录下生成了我们需要的第三方库文件。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndklib/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.png" alt=""></p>
<h1 id="引入第三方库"><a href="#引入第三方库" class="headerlink" title="引入第三方库"></a>引入第三方库</h1><p>新建一个工程，将上节生成的第三方库文件拷贝到 app/src/main/jniLibs 目录下，在 cpp 目录下新建 include 目录，拷贝第三方库的头文件在 include 目录下。<br>工程目录</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndklib/%E4%B8%BB%E5%B7%A5%E7%A8%8B.png" alt=""></p>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.haohao.ndklib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"native"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// Example of a call to a native method</span></div><div class="line">        TextView tv = (TextView) findViewById(R.id.sample_text);</div><div class="line">        tv.setText(stringFromJNI());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A native method that is implemented by the 'native-lib' native library,</div><div class="line">     * which is packaged with this application.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>native/native.cpp ，调用第三方库提供的 API 。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;nannan.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;haohao.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line">&#123;</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ndklib_MainActivity_stringFromJNI</span><span class="params">(JNIEnv</span></div><div class="line">                                                  *env, jobject instance) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> age[<span class="number">3</span>];</div><div class="line">    <span class="built_in">sprintf</span>(age, <span class="string">"%d"</span>, nannan_fun.getNanNanKey());</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> value = nannan_fun.getResponse() + <span class="string">" I am "</span> + age + <span class="string">" years old.\n"</span>;</div><div class="line">    value += haohao_fun.getResponse();</div><div class="line">    <span class="comment">//std::string value = "Hello";</span></div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(value.c_str());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>native/CMakeLists.txt 文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">add_library(native SHARED native.cpp)</div><div class="line"></div><div class="line"># 引入 .so 文件</div><div class="line">add_library(nannan SHARED IMPORTED )</div><div class="line">set_target_properties(nannan PROPERTIES IMPORTED_LOCATION &quot;$&#123;jnilibs&#125;/$&#123;ANDROID_ABI&#125;/libnannan.so&quot;)</div><div class="line"></div><div class="line"># 引入 .a 文件</div><div class="line">add_library(haohao STATIC IMPORTED )</div><div class="line">set_target_properties(haohao PROPERTIES IMPORTED_LOCATION &quot;$&#123;jnilibs&#125;/$&#123;ANDROID_ABI&#125;/libhaohao.a&quot;)</div><div class="line"></div><div class="line">find_library( log-lib log )</div><div class="line"></div><div class="line">target_link_libraries(native nannan haohao $&#123;log-lib&#125;)</div></pre></td></tr></table></figure>
<p>根目录下的 CMakeLists.txt 文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line">include_directories($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/include)</div><div class="line">set(jnilibs &quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs&quot;)</div><div class="line">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;jnilibs&#125;/$&#123;ANDROID_ABI&#125;)</div><div class="line"></div><div class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125;  -std=c++14 -pthread -DMGULK_LOG_STDERR=1 -Wall -Wextra -Wnon-virtual-dtor -g&quot;)</div><div class="line"></div><div class="line">ADD_SUBDIRECTORY($&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/native)</div></pre></td></tr></table></figure>
<p>app/build.gradle 文件配置。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.3"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.haohao.ndklib"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            cmake &#123;</div><div class="line">                arguments <span class="string">'-DANDROID_PLATFORM=android-15'</span>,</div><div class="line">                        <span class="string">'-DANDROID_TOOLCHAIN=clang'</span>, <span class="string">'-DANDROID_STL=gnustl_static'</span></div><div class="line"><span class="comment">//                cppFlags "-DANDROID_STL=c++_static"</span></div><div class="line">                abiFilters <span class="string">'armeabi-v7a'</span>,<span class="string">'x86_64'</span>, <span class="string">'arm64-v8a'</span>,<span class="string">'x86'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    externalNativeBuild &#123;</div><div class="line">        cmake &#123;</div><div class="line">            path <span class="string">"CMakeLists.txt"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</div><div class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.android.support'</span>, module: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:25.3.1'</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>build 工程后，生成 libnative.so ，直接运行项目，安装 apk 。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndklib/%E4%B8%BB%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90%E5%BA%93.png" alt=""></p>
<p><a href="https://github.com/githubhaohao/NDKLib" target="_blank" rel="external">本文示例代码 https://github.com/githubhaohao/NDKLib</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171111.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;自律
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK 第三方库" scheme="https://githubhaohao.github.io/tags/NDK-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>NDK 编译的三种方式</title>
    <link href="https://githubhaohao.github.io/2017/11/04/NDK-compiled-three-ways/"/>
    <id>https://githubhaohao.github.io/2017/11/04/NDK-compiled-three-ways/</id>
    <published>2017-11-04T05:53:25.000Z</published>
    <updated>2018-01-12T12:00:39.143Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171104.jpg" alt="Markdown"></p><p></p>
<p><div align="center">做任何事都不可能有 100% 的准备，我们都是一边准备一边面对未知。</div><br></p>
<blockquote>
<p>本篇以图文的方式介绍一下 Android NDK 编译的几种方式</p>
</blockquote>
<h1 id="通过-Android-Studio-默认的方式"><a href="#通过-Android-Studio-默认的方式" class="headerlink" title="通过 Android Studio 默认的方式"></a>通过 Android Studio 默认的方式</h1><p>创建带有 native 方法的类，build 项目。<br><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-0.png" alt="img"></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-1.png" alt="img"></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-2.png" alt="img"></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-3.png" alt="img"></p>
<p>生成与类名相关的 .h 文件。<br>进入 app -&gt; build -&gt; intermediates -&gt; classes -&gt; debug 目录下<br>执行： <code>javah com.haohao.hellojni.MyJNI</code> （先配置好 JDK 的环境变量）,生成 com_haohao_hellojni_MyJNI.h 文件</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-4.png" alt="img"></p>
<p>创建 cpp 文件。<br>在 main 文件夹下，新建 jni 目录，剪切 .h 文件到 jni 目录下，创建 hello.cpp 文件</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-5.png" alt="img"></p>
<p>hello.cpp</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-6.png" alt=""></p>
<p>配置 build.gradle 文件。<br>修改 app/build.gradle 文件， muduleName 为引入的 .so name , 直接运行项目，安装 apk ，运行就 OK 了</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-7.png" alt=""></p>
<p>生成的 .so 文件位置。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-8.png" alt=""></p>
<p>PS： 未指定 CPU 框架时，AS 会生成支持所有 CPU 框架的 .so 文件。</p>
<h1 id="通过-ndk-build"><a href="#通过-ndk-build" class="headerlink" title="通过 ndk-build"></a>通过 ndk-build</h1><p>创建 Android.mk 和 Application.mk 文件。<br>新建一个项目，在 app 目录下（任目录下都可以）新建 jni 文件，添加 Android.mk 和 Application.mk 文件，以及 com_haohao_hellojni_MyJNI.h 文件（运用上一小节的方法生成）。<br>Android.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line"># 要生成的.so库名称。java代码System.loadLibrary(&quot;hello&quot;);加载的就是它</div><div class="line">LOCAL_MODULE := hello</div><div class="line"></div><div class="line"># C++文件</div><div class="line">LOCAL_SRC_FILES := hello.cpp</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure></p>
<p>Application.mk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 不写 APP_ABI 会生成全部支持的平台,目前支持：armeabi arm64-v8a armeabi-v7a</div><div class="line"># APP_ABI := armeabi arm64-v8a armeabi-v7a mips mips64 x86 x86_64</div><div class="line">APP_ABI := armeabi arm64-v8a armeabi-v7a</div></pre></td></tr></table></figure></p>
<p>生成 .so 文件。<br>在 jni 目录下（配置好NDK环境变量）直接执行 ndk-build ， 生成 .so 文件。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-9.png" alt=""></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-10.png" alt=""></p>
<p>配置项目工程。<br>在 main 目录下新建 jniLibs 目录，并拷贝 armeabi arm64-v8a armeabi-v7a 文件夹，运行 proj 。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-11.png" alt=""></p>
<h1 id="通过-CMake-工具。"><a href="#通过-CMake-工具。" class="headerlink" title="通过 CMake 工具。"></a>通过 CMake 工具。</h1><p>从 Android Studio 2.2 开始，就默认使用 CMake 工具构建 NDK 项目，请确保你的 AS 版本大于 2.2 。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-11-1.png" alt=""></p>
<h2 id="通过-IDE-自动构建"><a href="#通过-IDE-自动构建" class="headerlink" title="通过 IDE 自动构建"></a>通过 IDE 自动构建</h2><p>创建项目时，勾选 <code>Include C++ support</code> </p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-12.png" alt=""></p>
<p>选择默认的 <code>Toolchain Default</code></p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-13.png" alt=""></p>
<p>AS 自动生成 CMakeLists.txt 文件（CMake 构建脚本）</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-14.png" alt=""></p>
<p>CMakeLists.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"># For more information about using CMake with Android Studio, read the</div><div class="line"># documentation: https://d.android.com/studio/projects/add-native-code.html</div><div class="line"></div><div class="line"># Sets the minimum version of CMake required to build the native library. </div><div class="line"># 指定CMake的最小版本</div><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line"># Creates and names a library, sets it as either STATIC</div><div class="line"># or SHARED, and provides the relative paths to its source code.</div><div class="line"># You can define multiple libraries, and CMake builds them for you.</div><div class="line"># Gradle automatically packages shared libraries with your APK.</div><div class="line"># 设置模块名为 native-lib，SHARED 可分享的，以及配置源文件的路径</div><div class="line">add_library( # Sets the name of the library. 设置模块名</div><div class="line">             native-lib</div><div class="line"></div><div class="line">             # Sets the library as a shared library. </div><div class="line">             SHARED </div><div class="line"></div><div class="line">             # Provides a relative path to your source file(s). 文件路径</div><div class="line">             src/main/cpp/native-lib.cpp )</div><div class="line"></div><div class="line"># Searches for a specified prebuilt library and stores the path as a</div><div class="line"># variable. Because CMake includes system libraries in the search path by</div><div class="line"># default, you only need to specify the name of the public NDK library</div><div class="line"># you want to add. CMake verifies that the library exists before</div><div class="line"># completing its build.</div><div class="line"># 找到 log 本地模块</div><div class="line">find_library( # Sets the name of the path variable. </div><div class="line">              log-lib</div><div class="line"></div><div class="line">              # Specifies the name of the NDK library that</div><div class="line">              # you want CMake to locate.</div><div class="line">              log )</div><div class="line"></div><div class="line"># Specifies libraries CMake should link to your target library. You</div><div class="line"># can link multiple libraries, such as libraries you define in this</div><div class="line"># build script, prebuilt third-party libraries, or system libraries.</div><div class="line"># 关联 native-lib 模块和 log 模块</div><div class="line">target_link_libraries( # Specifies the target library.</div><div class="line">                       native-lib</div><div class="line"></div><div class="line">                       # Links the target library to the log library</div><div class="line">                       # included in the NDK.</div><div class="line">                       $&#123;log-lib&#125; )</div></pre></td></tr></table></figure></p>
<p>在配置 app/build.gradle ，针对特殊平台 abiFilters 。配置完成之后，同步，运行。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-15.png" alt=""></p>
<h2 id="手动构建"><a href="#手动构建" class="headerlink" title="手动构建"></a>手动构建</h2><p>新建一个工程，创建 native 类，快捷键 Alt + Enter ,自动创建 jni 目录和相应的 .cpp 文件。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-16.png" alt=""></p>
<p>native-lib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL</span></div><div class="line"><span class="title">Java_com_haohao_ndk_1cpp_MyJNI_stringFromJNI</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在工程根目录下创建 CMakeLists.txt 文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 指定CMake的最小版本</div><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line">add_library( # Sets the name of the library. 设置模块名</div><div class="line">             native-lib</div><div class="line"></div><div class="line">             # Sets the library as a shared library. </div><div class="line">             SHARED </div><div class="line"></div><div class="line">             # Provides a relative path to your source file(s). 文件路径</div><div class="line">             src/main/cpp/native-lib.cpp )</div></pre></td></tr></table></figure></p>
<p>选择 <code>app</code> modulde ，右击选择<code>Link C++ Project with Gradle</code>。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-17.png" alt=""></p>
<p>选择脚本文件的路径。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-18.png" alt=""></p>
<p>app/build.gradle 会自动同步。同步完成后，运行项目。</p>
<p><img src="http://ovv1lq7pk.bkt.clouddn.com/ndk-compiledndk-19.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171104.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;做任
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="NDK" scheme="https://githubhaohao.github.io/categories/Android/NDK/"/>
    
    
      <category term="NDK 编译" scheme="https://githubhaohao.github.io/tags/NDK-%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>在 Android 系统源码中自定义系统服务</title>
    <link href="https://githubhaohao.github.io/2017/10/27/custom-android-system-service/"/>
    <id>https://githubhaohao.github.io/2017/10/27/custom-android-system-service/</id>
    <published>2017-10-27T05:52:04.000Z</published>
    <updated>2017-12-16T06:09:15.631Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171027.jpg" alt="Markdown"></p><p></p>
<p><div align="center">一件事如果犹豫做还是不做，选“做”。 做了也可能会后悔，但是这种后悔和“没做”而产生的一辈子的妄念相比，坏处小多了。</div><br></p>
<blockquote>
<p>本篇详细介绍一下在 Android 系统源码中自定义系统服务的过程。</p>
</blockquote>
<h1 id="在-Android-系统源码中自定义系统服务（Custom-System-Service-in-AOSP）"><a href="#在-Android-系统源码中自定义系统服务（Custom-System-Service-in-AOSP）" class="headerlink" title="在 Android 系统源码中自定义系统服务（Custom System Service in AOSP）"></a>在 Android 系统源码中自定义系统服务（Custom System Service in AOSP）</h1><h2 id="配置编译环境（Initial-AOSP-build-environment-）"><a href="#配置编译环境（Initial-AOSP-build-environment-）" class="headerlink" title="配置编译环境（Initial AOSP build environment.）"></a>配置编译环境（Initial AOSP build environment.）</h2><p><code>cd AOSP root dir</code><br><code>source build/envsetup.sh</code><br><code>lunch</code><br><code>2</code></p>
<h2 id="定义-Service-的-AIDL-文件（Define-service-AIDL-file）"><a href="#定义-Service-的-AIDL-文件（Define-service-AIDL-file）" class="headerlink" title="定义 Service 的 AIDL 文件（Define service AIDL file）"></a>定义 Service 的 AIDL 文件（Define service AIDL file）</h2><p>path: frameworks/base/core/java/android/os/<br>Create <code>IHaoHaoService.aidl</code> file</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.os;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IHaoHaoService</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setVal</span><span class="params">(String key,String value)</span></span>;</div><div class="line"></div><div class="line">   <span class="function">String <span class="title">getVal</span><span class="params">(String key)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改-Android-模块文件（Modify-Android-mk-file）"><a href="#修改-Android-模块文件（Modify-Android-mk-file）" class="headerlink" title="修改 Android 模块文件（Modify Android.mk file）"></a>修改 Android 模块文件（Modify Android.mk file）</h2><p>path: frameworks/base/Android.mk</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">## READ ME: ########################################################</div><div class="line">##</div><div class="line">## When updating this list of aidl files, consider if that aidl is</div><div class="line">## part of the SDK API.  If it is, also add it to the list below that</div><div class="line">## is preprocessed and distributed with the SDK.  This list should</div><div class="line">## not contain any aidl files for parcelables, but the one below should</div><div class="line">## if you intend for 3rd parties to be able to send those objects</div><div class="line">## across process boundaries.</div><div class="line">##</div><div class="line">## READ ME: ########################################################</div><div class="line">LOCAL_SRC_FILES += \</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">	core/java/android/os/IPowerManager.aidl \</div><div class="line">	core/java/android/os/IRemoteCallback.aidl \</div><div class="line">	core/java/android/os/ISchedulingPolicyService.aidl \</div><div class="line">	core/java/android/os/IUpdateLock.aidl \</div><div class="line">	core/java/android/os/IUserManager.aidl \</div><div class="line">	core/java/android/os/IVibratorService.aidl \</div><div class="line">	core/java/android/os/IHaoHaoService.aidl \</div><div class="line"></div><div class="line">	......</div></pre></td></tr></table></figure>
<p>进行模块编译：</p>
<p><code>~/aosp/android-6.0.1_r1$ mmm frameworks/base</code></p>
<p>generate <code>IHaoHaoService.java</code> file.</p>
<h2 id="创建-HaoHaoService-文件（Create-HaoHaoService-file）"><a href="#创建-HaoHaoService-文件（Create-HaoHaoService-file）" class="headerlink" title="创建 HaoHaoService 文件（Create HaoHaoService file）"></a>创建 HaoHaoService 文件（Create HaoHaoService file）</h2><p>path: frameworks/base/services/core/java/com/android/server/<br>Create HaoHaoService.java file.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.android.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.util.Slog; </div><div class="line"><span class="keyword">import</span> android.os.RemoteException;</div><div class="line"><span class="keyword">import</span> android.os.IHaoHaoService;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaoHaoService</span> <span class="keyword">extends</span> <span class="title">IHaoHaoService</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String,String&gt; mCache = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG=<span class="string">"HaoHaoService"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HaoHaoService</span><span class="params">()</span> </span>&#123;</div><div class="line">    	 mCache = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    	 Slog.d(TAG, <span class="string">"HaoHaoService starting."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(String key, String value)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        mCache.put(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVal</span><span class="params">(String key)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        <span class="keyword">return</span> mCache.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册服务（Register-service）"><a href="#注册服务（Register-service）" class="headerlink" title="注册服务（Register service）"></a>注册服务（Register service）</h2><p>Modify  <code>frameworks/base/core/java/android/content/Context.java</code><br>Add:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * Use with &#123;<span class="doctag">@link</span> #getSystemService&#125; to retrieve a</div><div class="line"> * &#123;<span class="doctag">@link</span> android.os.IHaoHaoService&#125; for accessing the HaoHao service.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #getSystemService</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HAOHAO_SERVICE = <span class="string">"haohao"</span>;</div></pre></td></tr></table></figure>
<p>Modify <code>frameworks/base/services/java/com/android/server/SystemServer.java</code><br>Find function <code>startOtherServices()</code><br>Add:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Slog.i(TAG, <span class="string">"***HaoHao Service***"</span>);</div><div class="line">    ServiceManager.addService(Context.HAOHAO_SERVICE, <span class="keyword">new</span> HaoHaoService());</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">    Slog.e(TAG, <span class="string">"Failure starting HaoHao Service"</span>, e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Create-HaoHaoServiceManager-java-file"><a href="#Create-HaoHaoServiceManager-java-file" class="headerlink" title="Create HaoHaoServiceManager.java file"></a>Create HaoHaoServiceManager.java file</h2><p>path: frameworks/base/core/java/android/app/ </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.app;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by haohao on 17/10/2.</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> android.annotation.SdkConstant;</div><div class="line"><span class="keyword">import</span> android.annotation.SystemApi;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"><span class="keyword">import</span> android.os.Parcel;</div><div class="line"><span class="keyword">import</span> android.os.Parcelable;</div><div class="line"><span class="keyword">import</span> android.os.RemoteException;</div><div class="line"><span class="keyword">import</span> android.os.IHaoHaoService;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaoHaoServiceManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HaoHaoServiceManager"</span>;</div><div class="line">    <span class="keyword">private</span> IHaoHaoService mService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HaoHaoServiceManager</span><span class="params">(Context context, IHaoHaoService service)</span></span>&#123;</div><div class="line">        mService = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            mService.setVal(key,value);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line"></div><div class="line">            Log.e(TAG, e.toString());</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVal</span><span class="params">(String key)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mService.getVal(key);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            </div><div class="line">            Log.e(TAG, e.toString());</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Register-service-in-SystemServiceRegistry-java-file"><a href="#Register-service-in-SystemServiceRegistry-java-file" class="headerlink" title="Register service in SystemServiceRegistry.java file"></a>Register service in SystemServiceRegistry.java file</h2><p>path: frameworks/base/core/java/android/app/SystemServiceRegistry.java<br>Add:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.os.IHaoHaoService;</div><div class="line">      </div><div class="line">        ......</div><div class="line"></div><div class="line">         registerService(Context.HAOHAO_SERVICE, HaoHaoServiceManager.class,</div><div class="line">                <span class="keyword">new</span> CachedServiceFetcher&lt;HaoHaoServiceManager&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> HaoHaoServiceManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</div><div class="line">                        IBinder binder = ServiceManager.getService(Context.HAOHAO_SERVICE);</div><div class="line">                        IHaoHaoService service = IHaoHaoService.Stub.asInterface(binder);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> HaoHaoServiceManager(ctx, service);</div><div class="line">            &#125;&#125;);</div><div class="line"></div><div class="line">        ......</div></pre></td></tr></table></figure>
<h2 id="Modify-SePolicy-Build-Check"><a href="#Modify-SePolicy-Build-Check" class="headerlink" title="Modify SePolicy Build Check"></a>Modify SePolicy Build Check</h2><p>path: external/sepolicy/service.te</p>
<p>Add:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type haohao_service, system_api_service, system_server_service, service_manager_type;</div></pre></td></tr></table></figure>
<p>path: external/sepolicy/service_contexts</p>
<p>Add:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">haohao u:object_r:haohao_service:s0</div></pre></td></tr></table></figure>
<p>service_contexts</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">accessibility                             u:object_r:accessibility_service:s0</div><div class="line">account                                   u:object_r:account_service:s0</div><div class="line">activity                                  u:object_r:activity_service:s0</div><div class="line">alarm                                     u:object_r:alarm_service:s0</div><div class="line">haohao                                    u:object_r:haohao_service:s0</div><div class="line">android.security.keystore                 u:object_r:keystore_service:s0</div><div class="line">android.service.gatekeeper.IGateKeeperService    u:object_r:gatekeeper_service:s0</div></pre></td></tr></table></figure>
<h2 id="Update-api-and-build"><a href="#Update-api-and-build" class="headerlink" title="Update api and build"></a>Update api and build</h2><p><code>~/aosp/android-6.0.1_r1$ make update-api -j8</code></p>
<p><code>~/aosp/android-6.0.1_r1$ make -j8</code></p>
<h2 id="Test-service-in-your-Activity"><a href="#Test-service-in-your-Activity" class="headerlink" title="Test service in your Activity"></a>Test service in your Activity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">    mHaoHaoServiceManager = (HaoHaoServiceManager)getSystemService(Context.HAOHAO_SERVICE);</div><div class="line">    mHaoHaoServiceManager.setVal(<span class="string">"haohao"</span>, <span class="string">"Android Developer"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171027.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;一件
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="Android 系统" scheme="https://githubhaohao.github.io/categories/Android/Android-%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="自定义系统服务" scheme="https://githubhaohao.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法（Java 实现）之线性表（三）</title>
    <link href="https://githubhaohao.github.io/2017/10/20/Java-data-structure-stack-and-queue/"/>
    <id>https://githubhaohao.github.io/2017/10/20/Java-data-structure-stack-and-queue/</id>
    <published>2017-10-20T00:20:42.000Z</published>
    <updated>2017-10-20T10:16:58.785Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20171020.jpg" alt="Markdown"></p><p></p>
<p><div align="center">生活苟且的人，傻了吧唧的去了诗和远方；而鼓吹诗和远方的人，工作比谁都积极。</div><br></p>
<blockquote>
<p>本篇简单介绍一下栈和队列的实现，它们是数据结构与算法中非常重要的基础。</p>
</blockquote>
<h1 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h1><p><img src="http://ovv1lq7pk.bkt.clouddn.com/stack.PNG" alt="stack"></p>
<p><strong>栈</strong>是限定在表尾进行插入和删除的线性表。允许插入的端称为栈顶，另一端称为栈底。</p>
<h2 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="栈的实现-链栈"><a href="#栈的实现-链栈" class="headerlink" title="栈的实现(链栈)"></a>栈的实现(链栈)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span>&lt;<span class="title">T</span>&gt;  <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Node head;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        head = <span class="keyword">null</span>;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"the stack is null."</span>);</div><div class="line">        &#125;</div><div class="line">        Node node = head;</div><div class="line">        head = head.getNext();</div><div class="line">        node.setNext(<span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> (T) node.getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span> </span>&#123;</div><div class="line">        Node node = <span class="keyword">new</span> Node(item);</div><div class="line">        node.setNext(head);</div><div class="line">        head = node;</div><div class="line">        count ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Node p = head;</div><div class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">                stringBuilder.append(p.getElement()).append(<span class="string">"\n"</span>);</div><div class="line">                p = p.getNext();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        LinkedStack&lt;String&gt; linkedStack = <span class="keyword">new</span> LinkedStack&lt;String&gt;();</div><div class="line">        linkedStack.push(<span class="string">"Android"</span>);</div><div class="line">        linkedStack.push(<span class="string">"iOS"</span>);</div><div class="line">        linkedStack.push(<span class="string">"Kotlin"</span>);</div><div class="line"></div><div class="line">        System.out.println(linkedStack.toString());</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"pop -&gt; "</span> + linkedStack.pop());</div><div class="line">        System.out.println(<span class="string">"pop -&gt; "</span> + linkedStack.pop());</div><div class="line"></div><div class="line">        System.out.println(linkedStack.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Kotlin</div><div class="line">iOS</div><div class="line">Android</div><div class="line"></div><div class="line">pop -&gt; Kotlin</div><div class="line">pop -&gt; iOS</div><div class="line">Android</div></pre></td></tr></table></figure>
<h1 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h1><p><img src="http://ovv1lq7pk.bkt.clouddn.com/queue.PNG" alt="queue"></p>
<p><strong>队列</strong>是只允许在一端进行插入操作，在另一端进行删除操作的线性表。队列是一种先进先出的线性表（FIFO）。允许插入的一段称为队尾，允许删除的一端称为队头。</p>
<h2 id="队列的抽象数据类型"><a href="#队列的抽象数据类型" class="headerlink" title="队列的抽象数据类型"></a>队列的抽象数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(T item)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">deQueue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">peek</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="队列实现（链队列）"><a href="#队列实现（链队列）" class="headerlink" title="队列实现（链队列）"></a>队列实现（链队列）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">private</span> Node head;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        head = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(T item)</span> </span>&#123;</div><div class="line">        Node node = <span class="keyword">new</span> Node(item);</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">            head = node;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Node p = head;</div><div class="line">            Node prev = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.getNext();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            prev.setNext(node);</div><div class="line">        &#125;</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"the queue is empty."</span>);</div><div class="line">        &#125;</div><div class="line">        Node node = head;</div><div class="line">        head = head.getNext();</div><div class="line">        node.setNext(<span class="keyword">null</span>);</div><div class="line">        size --;</div><div class="line">        <span class="keyword">return</span> (T) node.getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) head.getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            Node p = head;</div><div class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">                stringBuilder.append(p.getElement()).append(<span class="string">"\n"</span>);</div><div class="line">                p = p.getNext();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        LinkedQueue&lt;String&gt; linkedQueue = <span class="keyword">new</span> LinkedQueue&lt;String&gt;();</div><div class="line">        linkedQueue.enQueue(<span class="string">"Android"</span>);</div><div class="line">        linkedQueue.enQueue(<span class="string">"iOS"</span>);</div><div class="line">        linkedQueue.enQueue(<span class="string">"Kotlin"</span>);</div><div class="line">        linkedQueue.enQueue(<span class="string">"Java"</span>);</div><div class="line"></div><div class="line">        System.out.println(linkedQueue.toString());</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"LinkedQueue dequeue -&gt; "</span> + linkedQueue.deQueue());</div><div class="line">        System.out.println(<span class="string">"LinkedQueue dequeue -&gt; "</span> + linkedQueue.deQueue());</div><div class="line"></div><div class="line">        System.out.println(linkedQueue.toString());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Android</div><div class="line">iOS</div><div class="line">Kotlin</div><div class="line">Java</div><div class="line"></div><div class="line">LinkedQueue dequeue -&gt; Android</div><div class="line">LinkedQueue dequeue -&gt; iOS</div><div class="line">Kotlin</div><div class="line">Java</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20171020.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;生活
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://githubhaohao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="https://githubhaohao.github.io/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="https://githubhaohao.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Socket Socket.io Websocket 与 HTTP 之间的区别</title>
    <link href="https://githubhaohao.github.io/2017/09/30/diff-between-socket-websocket-socket-io-and-http/"/>
    <id>https://githubhaohao.github.io/2017/09/30/diff-between-socket-websocket-socket-io-and-http/</id>
    <published>2017-09-30T07:33:45.000Z</published>
    <updated>2017-10-03T05:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170930.jpg" alt="Markdown"></p><p></p>
<p><div align="center">教育的目的从来都是精神的独立而不是给予苦头，除非有人不希望看到你太“自在”，需要通过制度展示权力的威严</div><br></p>
<hr>
<blockquote>
<p>本篇从特征角度介绍一下，Socket、 Socket.io、 Websocket、 HTTP 之间的区别。</p>
</blockquote>
<h1 id="Socket-、-Socket-io-、-Websocket-、-HTTP-之间的区别"><a href="#Socket-、-Socket-io-、-Websocket-、-HTTP-之间的区别" class="headerlink" title="Socket 、 Socket.io 、 Websocket 、 HTTP 之间的区别"></a>Socket 、 Socket.io 、 Websocket 、 HTTP 之间的区别</h1><p><img src="http://ox31eiczv.bkt.clouddn.com/socket.jpg" alt="socket"><br><br></p>
<p>Socket 是操作系统提供的<strong>对于传输层（TCP / UDP）抽象的接口</strong>，是一个<strong>编程概念</strong>，而 Websocket 、Socket.io 与 HTTP 一样是一个<strong>成文的互联网协议</strong>。另外，Websocket 和 HTTP 都是基于 TCP 传输数据，Socket.io 可以看作是对 Websocket 和 HTTP 的又一次封装。</p>
<p><img src="http://ox31eiczv.bkt.clouddn.com/http.png" alt="http"><br><br></p>
<p>HTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接。<br><strong>无状态</strong>：每次连接只处理一个请求，请求结束后断开连接。<br><strong>无连接</strong>：对于事务处理没有记忆能力，服务器不知道客户端是什么状态。</p>
<p>以往实现即时通讯的手段：<br>轮询：客户端定时向服务器发送 Ajax 请求，服务器接到请求后马上返回响应信息并关闭连接。<br>长轮询：客户端向服务器发送 Ajax 请求，<strong>服务器接到请求后 hold 住连接</strong>，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。<br>长连接：在页面里嵌入一个隐蔵 iframe，将这个隐蔵 iframe 的 src 属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。<br>Flash Socket：在页面中内嵌入一个使用了 Socket 类的 Flash 程序 JavaScript 通过调用此 Flash 程序提供的 Socket 接口与服务器端的 Socket 接口进行通信，JavaScript 在收到服务器端传送的信息后控制页面的显示。</p>
<p><img src="http://ox31eiczv.bkt.clouddn.com/websocket-lifecycle.png" alt="websocket"><br><br></p>
<p>Websocket 的出现就是为了解决 HTTP 在即时通信中存在的不足，HTTP 是通过 Polling 实现即时通信存在很大的资源开销。</p>
<p>Webscoket 握手阶段采用 HTTP 协议，连接建立之后便与 HTTP 协议没有任何关系，Websocket 连接建立之后，client 与 server 可以同时收发数据，全双工通讯。</p>
<p><img src="http://ox31eiczv.bkt.clouddn.com/socket_io.png" alt="socketio"></p>
<p>Socket.io 支持 Websocket 协议，支持多种轮询机制，它实现了实时、双向、基于事件的通讯机制，天生用来解决实时通讯问题。另外，Socket.io 能够根据浏览器对通讯机制的支持情况自动地选择最佳的方式来实现网络实时应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170930.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;教育
    
    </summary>
    
      <category term="计算机网络基础" scheme="https://githubhaohao.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络协议" scheme="https://githubhaohao.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法（Java 实现）之线性表（二）</title>
    <link href="https://githubhaohao.github.io/2017/09/26/Java-data-structure-linkedlist/"/>
    <id>https://githubhaohao.github.io/2017/09/26/Java-data-structure-linkedlist/</id>
    <published>2017-09-26T13:43:22.000Z</published>
    <updated>2017-10-03T06:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170927.jpg" alt="Markdown"></p><p></p>
<p><div align="center">因为我们的言语表达了我们的想法，而我们的想法创造了我们的生活。</div><br></p>
<hr>
<blockquote>
<p>本篇简单介绍一下单链表，单循环链表和双向循环链表。链表是线性表的核心内容，单链表可以很方便地构成栈和队列。</p>
</blockquote>
<h2 id="单链表节点"><a href="#单链表节点" class="headerlink" title="单链表节点"></a>单链表节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    Object data; <span class="comment">// 数据元素</span></div><div class="line">    Node next;   <span class="comment">// 下一节点的对象引用</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node nextval)</span> </span>&#123; <span class="comment">// 用于头结点的构造函数</span></div><div class="line">        next = nextval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object obj, Node nextval)</span> </span>&#123; <span class="comment">// 用于下一节点的构造函数</span></div><div class="line">        data = obj;</div><div class="line">        next = nextval;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getElement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElement</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><img src="http://ovv1lq7pk.bkt.clouddn.com/single_linklist.PNG" alt="单链表"></p>
<p>本篇的单链表是带头结点的单链表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/9.</div><div class="line"> * 单链表</div><div class="line"> * |  a0  | next | --&gt; |  a1  | next | --&gt; |  a2  | next | --&gt; ... --&gt; |  an  | null |</div><div class="line"> * 时间复杂度O(n)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</div><div class="line">    Node head; <span class="comment">// 头指针</span></div><div class="line">    Node current; <span class="comment">// 当前节点位置</span></div><div class="line">    <span class="keyword">int</span> size; <span class="comment">// 数据元素个数</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">        head = current = <span class="keyword">new</span> Node(<span class="keyword">null</span>);</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        locate(index - <span class="number">1</span>);</div><div class="line">        current.setNext(<span class="keyword">new</span> Node(o, current.next));</div><div class="line">        size ++;</div><div class="line">        System.out.println(<span class="string">"insert node : "</span> + o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"链表已空，没有元素可以删除"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        locate(index - <span class="number">1</span>);</div><div class="line">        Object o = current.next.getElement();</div><div class="line">        current.setNext(current.next.next);</div><div class="line">        size --;</div><div class="line">        System.out.println(<span class="string">"delete node : "</span> + o);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        locate(index);</div><div class="line">        <span class="keyword">return</span> current.getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">locate</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123; <span class="comment">// 定位</span></div><div class="line">        <span class="keyword">if</span> (index &lt; -<span class="number">1</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">            current = head;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        current = head.next;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span> &amp;&amp; j &lt; index) &#123;</div><div class="line">            current = current.next;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SingleLinkedList singleLinkedList = <span class="keyword">new</span> SingleLinkedList();</div><div class="line">        singleLinkedList.insert(<span class="number">0</span>, <span class="string">"Android"</span>);</div><div class="line">        singleLinkedList.insert(<span class="number">1</span>, <span class="string">"iOS"</span>);</div><div class="line">        singleLinkedList.insert(<span class="number">2</span>, <span class="string">"React Native"</span>);</div><div class="line">        singleLinkedList.insert(<span class="number">3</span>, <span class="string">"Kotlin"</span>);</div><div class="line"></div><div class="line">        singleLinkedList.delete(<span class="number">0</span>);</div><div class="line"></div><div class="line">        System.out.println(singleLinkedList.size());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>运行输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">insert node : Android</div><div class="line">insert node : iOS</div><div class="line">insert node : React Native</div><div class="line">insert node : Kotlin</div><div class="line">delete node : Android</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="单循环链表"><a href="#单循环链表" class="headerlink" title="单循环链表"></a>单循环链表</h2><p><img src="http://ovv1lq7pk.bkt.clouddn.com/single_cir_linkedlist.PNG" alt="单循环链表"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCirLinkedList</span> <span class="keyword">implements</span> <span class="title">List</span></span>&#123;</div><div class="line"></div><div class="line">    Node head;</div><div class="line">    Node current;</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleCirLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">        head = current = <span class="keyword">new</span> Node(<span class="keyword">null</span>);</div><div class="line">        head.setNext(head);</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        locate(index - <span class="number">1</span>);</div><div class="line">        current.setNext(<span class="keyword">new</span> Node(o, current.getNext()));</div><div class="line">        size ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        locate(index - <span class="number">1</span>);</div><div class="line">        Object o = current.getNext().getElement();</div><div class="line">        System.out.println(<span class="string">"delete : "</span> + o);</div><div class="line">        current.setNext(current.getNext().getNext());</div><div class="line">        size --;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException</span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        locate(index - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> current.getNext().getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</div><div class="line">        &#125;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        Node p = head.getNext();</div><div class="line">        <span class="keyword">while</span> (p != head) &#123;</div><div class="line">            stringBuilder.append(p.getElement()).append(<span class="string">"\n"</span>);</div><div class="line">            p = p.getNext();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * index 取值范围 -1 至 size - 2 需要考虑 0 -1 这两种特殊情况</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">locate</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &lt; -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">            current = head;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        current = head.getNext();</div><div class="line">        <span class="keyword">while</span> (current != head &amp;&amp; j &lt; index) &#123;</div><div class="line">            current = current.getNext();</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SingleCirLinkedList cirLinkedList = <span class="keyword">new</span> SingleCirLinkedList();</div><div class="line">        cirLinkedList.insert(<span class="number">0</span>, <span class="string">"Android"</span>);</div><div class="line">        cirLinkedList.insert(<span class="number">1</span>, <span class="string">"iOS"</span>);</div><div class="line">        cirLinkedList.insert(<span class="number">2</span>, <span class="string">"Kotlin"</span>);</div><div class="line"></div><div class="line">        System.out.println(cirLinkedList.getData(<span class="number">0</span>));</div><div class="line">        System.out.println(cirLinkedList.getData(<span class="number">1</span>));</div><div class="line">        System.out.println(cirLinkedList.getData(<span class="number">2</span>));</div><div class="line"></div><div class="line">        cirLinkedList.delete(<span class="number">1</span>);</div><div class="line"></div><div class="line">        System.out.println(cirLinkedList.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Android</div><div class="line">iOS</div><div class="line">Kotlin</div><div class="line">delete : iOS</div><div class="line">Android</div><div class="line">Kotlin</div></pre></td></tr></table></figure></p>
<h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><p>双向循环链表节点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/25.</div><div class="line"> * 双向链表的节点</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DulNode</span> </span>&#123;</div><div class="line">    Object element;</div><div class="line">    DulNode prior; <span class="comment">// 直接前驱指针</span></div><div class="line">    DulNode next;  <span class="comment">// 直接后继指针</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DulNode</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DulNode</span><span class="params">(Object element, DulNode prior, DulNode next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.element = element;</div><div class="line">        <span class="keyword">this</span>.prior = prior;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getElement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> DulNode <span class="title">getPrior</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> prior;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> DulNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElement</span><span class="params">(Object element)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.element = element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrior</span><span class="params">(DulNode prior)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.prior = prior;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(DulNode next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>双向循环链表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CirDulLinkedList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</div><div class="line"></div><div class="line">    DulNode head; <span class="comment">// 头结点</span></div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CirDulLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 初始化头结点</span></div><div class="line">        head = <span class="keyword">new</span> DulNode();</div><div class="line">        head.setPrior(head);</div><div class="line">        head.setNext(head);</div><div class="line">        head.setElement(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index == size) &#123;  <span class="comment">// 特殊情况，在尾部直接添加节点</span></div><div class="line">            add(o);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            DulNode p = search(index);</div><div class="line">            DulNode s = p.getPrior();</div><div class="line">            DulNode newNode = <span class="keyword">new</span> DulNode(o, s, p);</div><div class="line">            s.setNext(newNode);</div><div class="line">            p.setPrior(newNode);</div><div class="line">            size++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        DulNode p = search(index);</div><div class="line">        Object o = p.getElement();</div><div class="line">        DulNode s = p.getPrior();</div><div class="line">        s.setNext(p.getNext());</div><div class="line">        p.getNext().setPrior(s);</div><div class="line">        size--;</div><div class="line">        System.out.println(<span class="string">"CirDulLinkedList.delete : "</span> + o);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> search(index).getElement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"链表为空"</span>);</div><div class="line">        &#125;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        DulNode p = head.getNext();</div><div class="line">        <span class="keyword">while</span> (p != head) &#123;</div><div class="line">            stringBuilder.append(p.getElement()).append(<span class="string">"\n"</span>);</div><div class="line">            p = p.getNext();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 直接在链表尾部添加节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        DulNode rear = head.getPrior();</div><div class="line">        DulNode newNode = <span class="keyword">new</span> DulNode(o, rear, head);</div><div class="line">        rear.setNext(newNode);</div><div class="line">        head.setPrior(newNode);</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 按照位置查找节点</span></div><div class="line">    <span class="function"><span class="keyword">private</span> DulNode <span class="title">search</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        DulNode p = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (index &gt; size / <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// 位于链表的后半部分，反向查询</span></div><div class="line">            p = head.getPrior();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</div><div class="line">                p = p.getPrior();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 位于链表的前半部分，正向查询</span></div><div class="line">            p = head.getNext();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</div><div class="line">                p = p.getNext();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CirDulLinkedList cirDulLinkedList = <span class="keyword">new</span> CirDulLinkedList();</div><div class="line">        cirDulLinkedList.insert(<span class="number">0</span>, <span class="string">"Android"</span>);</div><div class="line">        cirDulLinkedList.insert(<span class="number">1</span>, <span class="string">"iOS"</span>);</div><div class="line">        cirDulLinkedList.insert(<span class="number">2</span>, <span class="string">"Kotlin"</span>);</div><div class="line">        cirDulLinkedList.add(<span class="string">"ReactNative"</span>);</div><div class="line"></div><div class="line">        System.out.println(cirDulLinkedList.toString());</div><div class="line"></div><div class="line">        cirDulLinkedList.delete(<span class="number">2</span>);</div><div class="line"></div><div class="line">        System.out.println(cirDulLinkedList.toString());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170927.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;因为
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://githubhaohao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性表" scheme="https://githubhaohao.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="链表" scheme="https://githubhaohao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法（Java 实现）之线性表（一）</title>
    <link href="https://githubhaohao.github.io/2017/09/26/Java-data-structure-lineartable/"/>
    <id>https://githubhaohao.github.io/2017/09/26/Java-data-structure-lineartable/</id>
    <published>2017-09-26T12:51:58.000Z</published>
    <updated>2017-09-26T13:45:40.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170926.jpg" alt="Markdown"></p><p></p>
<p><div align="center">成年人学习的目的，应该是追求更好的思维模型，而不是更多的知识。</div><br></p>
<hr>
<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p><img src="http://img.mukewang.com/55adb5490001776c11520129.jpg" alt="linearlist"></p>
<blockquote>
<p>线性表（Linear List）是由 n（n≥0）个数据元素（结点）a[0]，a[1]，a[2]…，a[n-1] 组成的有限序列。</p>
</blockquote>
<p><img src="http://img.mukewang.com/55adb597000177c611520310.jpg" alt=""><br>线性表按照存储结构分为：顺序表和链表<br>顺序表：<strong>用一块地址连续的存储空间依次存储线性表中的数据元素</strong>；<br>链表：链式存储结构的线性表，<strong>逻辑上相邻的元素在物理上可以不相邻</strong>，元素间的逻辑关系表现在节点的连接上。</p>
<h2 id="抽象线性表"><a href="#抽象线性表" class="headerlink" title="抽象线性表"></a>抽象线性表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/8.</div><div class="line"> * 抽象线性表操作</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/8.</div><div class="line"> * 顺序表</div><div class="line"> * 数据元素存储在连续地址空间的内存单元</div><div class="line"> * 插入/删除操作时间复杂度O(n)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SeqList"</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> defultSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> maxSize;</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    Object[] array;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">()</span> </span>&#123;</div><div class="line">        initiate(defultSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        initiate(size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initiate</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</div><div class="line">        maxSize = sz;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        array = <span class="keyword">new</span> Object[sz];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (maxSize == index) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Seq list is full."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument error."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</div><div class="line">            array[i] = array[i-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        array[index] = o;</div><div class="line">        size ++;</div><div class="line">        System.out.println(<span class="string">"insert item : "</span> + o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (maxSize == size) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Seq list is full."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        array[size] = o;</div><div class="line">        size ++;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"add item : "</span> + o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Seq list is empty."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument error."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Object o = array[index];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">            array[i] = array[i + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size --;</div><div class="line">        System.out.println(<span class="string">"delete item : "</span> + o + <span class="string">",index : "</span> + index);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Seq list is empty."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument error."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</div><div class="line">        &#125;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            stringBuilder.append(<span class="string">"index : "</span>).append(i).append(<span class="string">", value : "</span>).append(array[i]).append(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SeqList seqList = <span class="keyword">new</span> SeqList();</div><div class="line">        seqList.insert(<span class="number">0</span>, <span class="string">"Kotlin"</span>);</div><div class="line">        seqList.add(<span class="string">"Android"</span>);</div><div class="line">        seqList.insert(<span class="number">2</span>, <span class="string">"NodeJS"</span>);</div><div class="line"></div><div class="line">        System.out.println(seqList);</div><div class="line"></div><div class="line">        seqList.delete(<span class="number">0</span>);</div><div class="line">        seqList.delete(<span class="number">0</span>);</div><div class="line"></div><div class="line">        System.out.println(seqList);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">insert item : Kotlin</div><div class="line">add item : Android</div><div class="line">insert item : NodeJS</div><div class="line">index : <span class="number">0</span>, value : Kotlin</div><div class="line">index : <span class="number">1</span>, value : Android</div><div class="line">index : <span class="number">2</span>, value : NodeJS</div><div class="line"></div><div class="line">delete item : Kotlin,index : <span class="number">0</span></div><div class="line">delete item : Android,index : <span class="number">0</span></div><div class="line">index : <span class="number">0</span>, value : NodeJS</div></pre></td></tr></table></figure></p>
<p>可变容量的顺序表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by HaohaoChang on 2017/9/13.</div><div class="line"> * 可变容量顺序表</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarSeqList</span> <span class="keyword">implements</span> <span class="title">List</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> defaultSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">int</span> length;</div><div class="line">    Object[] array;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VarSeqList</span><span class="params">()</span> </span>&#123;</div><div class="line">        array = <span class="keyword">new</span> Object[defaultSize];</div><div class="line">        size = defaultSize;</div><div class="line">        length = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (length == size) &#123;</div><div class="line">            extend();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;</div><div class="line">            array[i] = array[i -<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        array[index] = o;</div><div class="line">        length ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        System.out.println(index + <span class="string">" ,"</span> + length);</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"列表为空"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        Object o = array[index];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length - <span class="number">1</span>; i++) &#123;</div><div class="line">            array[i] = array[i + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        length --;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"列表为空"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"参数错误"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> length == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"列表为空"</span>);</div><div class="line">        &#125;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            stringBuilder.append(getData(i)).append(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (length == size) &#123;</div><div class="line">            extend();</div><div class="line">        &#125;</div><div class="line">        array[length] = o;</div><div class="line">        length ++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 小心越界</span></div><div class="line">        size *= <span class="number">2</span>;</div><div class="line">        Object[] newArray = <span class="keyword">new</span> Object[size];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            newArray[i] = array[i];</div><div class="line">        &#125;</div><div class="line">        array = newArray;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        length = <span class="number">0</span>;</div><div class="line">        size = defaultSize;</div><div class="line">        array = <span class="keyword">new</span> Object[size];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        VarSeqList varSeqList = <span class="keyword">new</span> VarSeqList();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            varSeqList.add(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">995</span>; i++) &#123;</div><div class="line">            varSeqList.delete(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(varSeqList.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170926.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;成年
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://githubhaohao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性表" scheme="https://githubhaohao.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
      <category term="顺序表" scheme="https://githubhaohao.github.io/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器从输入 Url 到展示出页面都经历了哪些过程</title>
    <link href="https://githubhaohao.github.io/2017/09/23/from-url-to-page-displaying/"/>
    <id>https://githubhaohao.github.io/2017/09/23/from-url-to-page-displaying/</id>
    <published>2017-09-23T08:09:25.000Z</published>
    <updated>2017-09-23T08:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170923.jpg" alt="Markdown"></p><p></p>
<div align="center">当你想完全准备好再做一件事的时候，不如先做起来，边做边准备</div>

<hr>
<blockquote>
<p>本篇简单介绍一下，浏览器从输入 Url 到展示出页面都经历了哪些过程。</p>
</blockquote>
<h2 id="输入域名"><a href="#输入域名" class="headerlink" title="输入域名"></a>输入域名</h2><p>在浏览器输入网址时，浏览器会根据历史记录、书签智能匹配补全域名或者 url 。<br>例如 chrome 浏览器，甚至会根据匹配结果直接把网页加载出来。</p>
<h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>请求发起时，浏览器首先解析域名，一般会首先查看本地的 hosts 文件，查找相关域名与 ip 地址的对应规则，若查找到的话，就直接使用 hosts 文件里面的 ip 地址。</p>
<p>若在本地 hosts 文件中，未找到目标域名与 ip 地址的对应关系，浏览器便会向本地 DNS 服务器发起一个 DNS 请求，本地 DNS 服务器收到请求之后，便会查询其缓存记录，若查询到此记录便直接返回结果。</p>
<p>若本地 DNS 服务器缓存中未查询到相关记录，便向 DNS 根服务器进行查询，根 DNS 服务器没有记录具体的域名与 ip 地址的映射关系，而是返回域服务器的地址。</p>
<p>本地 DNS 继续向域服务器发起请求，域服务器收到请求之后，返回域名解析服务器的地址。最后本地 DNS 服务器向域名解析服务器发送请求，域名解析服务器收到请求之后，返回域名与 ip 映射关系信息，然后本地 DNS 服务器将映射信息保存到其缓存中，同时也将 ip 地址返回给用户电脑。</p>
<p><img src="http://ow23qx875.bkt.clouddn.com/dns.jpg" alt="dns"></p>
<div align="center">图片来自网络</div>

<h2 id="浏览器发起-http-请求"><a href="#浏览器发起-http-请求" class="headerlink" title="浏览器发起 http 请求"></a>浏览器发起 http 请求</h2><p>浏览器获取到域名对应的 ip 地址之后，便会以一个随机端口（1024&lt; port &lt; 65535）向服务端 web 程序 80 端口发起 TCP 连接请求。</p>
<p>浏览器与服务端经过 3 次 TCP 握手之后，建立 TCP 连接，然后浏览器发起一个 http 请求。一般的浏览器只能发起 GET 或者 POST 请求。</p>
<p>请求信格式包含四个部分：</p>
<ol>
<li><strong>请求行（请求方法 URI 协议/版本）</strong></li>
<li><strong>请求头(缓存、客户端身份信息等)</strong></li>
<li><strong>空行</strong></li>
<li><strong>消息体</strong></li>
</ol>
<p>http 请求格式示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /index.html HTTP/1.1</div><div class="line">Cache-Control:max-age=0</div><div class="line">Cookie:gsScrollPos=; _ga=GA1.2.329038035.1465891024; _gat=1</div><div class="line">If-Modified-Since:Sun, 01 May 2016 23:59:59 GMT</div><div class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36</div><div class="line"></div><div class="line">//消息体</div></pre></td></tr></table></figure></p>
<p>PS：<br>常用的请求方法有 GET/POST/DELETE/PUT/HEAD 。</p>
<p><img src="http://ow23qx875.bkt.clouddn.com/tcp.jpg" alt="tcp"></p>
<div align="center">三次握手四次挥手示意图</div>

<p>TCP 三次握手的目的是：<strong>为了防止已经失效的连接请求报文发送到服务端，服务端因而产生不必要的响应开销</strong>。</p>
<blockquote>
<p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。</p>
</blockquote>
<p>TCP 四次挥手的目的是：为确保收发双方数据传输的完整性。</p>
<blockquote>
<p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>
</blockquote>
<h2 id="服务器返回-http-响应"><a href="#服务器返回-http-响应" class="headerlink" title="服务器返回 http 响应"></a>服务器返回 http 响应</h2><p>服务端返回 http 响应的格式包含四个部分:</p>
<ol>
<li>响应行（状态行）（协议/版本号 状态码 状态说明）</li>
<li>响应头（响应头是服务器传递给客户端用于说明服务器的一些信息，以及将来继续访问该资源时的策略。）</li>
<li>空行</li>
<li>消息体（响应体是服务端返回给客户端的 HTML 文本内容，或者其他格式的数据，比如：视频流、图片或者音频数据。）</li>
</ol>
<p>http 响应格式示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Sat, 31 Dec 2016 23:59:59 GMT</div><div class="line">Content-Type: text/html;charset=ISO-8859-1</div><div class="line">Content-Length: 113</div><div class="line"></div><div class="line">＜html＞</div><div class="line">＜head＞</div><div class="line">＜title＞Haohao＜/title＞</div><div class="line">＜/head＞</div><div class="line">＜body＞</div><div class="line">Hello World！</div><div class="line">＜/body＞</div><div class="line">＜/html＞</div></pre></td></tr></table></figure></p>
<p>PS：<br>服务器在返回响应之前可能会经过重定向、反向代理服务器请求等过程。</p>
<h2 id="浏览器处理响应"><a href="#浏览器处理响应" class="headerlink" title="浏览器处理响应"></a>浏览器处理响应</h2><p>以服务端响应消息体为 HTML 文本为例，浏览器解析 HTML 文本时，会”自上而下“加载，并在加载过程中进行解析渲染展现给用户。在解析过程中，如果遇到请求外部资源时，如图片、外链的 CSS 、 js 等，请求过程是异步的，并不会影响整个 HTML 文档的加载。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://foofish.net/http-request-process.html" title="一次完整的HTTP请求过程" target="_blank" rel="external">https://foofish.net/http-request-process.html</a></p>
<p><a href="https://github.com/jawil/blog/issues/14" title="通俗大白话来理解TCP协议的三次握手和四次分手" target="_blank" rel="external">https://github.com/jawil/blog/issues/14</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170923.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;当你想完全
    
    </summary>
    
      <category term="计算机网络基础" scheme="https://githubhaohao.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络请求" scheme="https://githubhaohao.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>接口与抽象类的区别（Java 7版本）</title>
    <link href="https://githubhaohao.github.io/2017/09/20/diff-between-interface-and-abstract-class/"/>
    <id>https://githubhaohao.github.io/2017/09/20/diff-between-interface-and-abstract-class/</id>
    <published>2017-09-20T02:15:31.000Z</published>
    <updated>2017-09-20T02:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170919.jpg" alt="Markdown"></p><p></p>
<p><div align="center">你看起来像什么地位，你就是什么地位，互联网时代也是一个看颜的时代，虽无奈，但是事实</div><br></p>
<blockquote>
<p>本篇从 8 个方面介绍一下，接口与抽象类的区别。</p>
</blockquote>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>接口与抽象类具备抽象多类对象相同属性特征的特点，均可作为一种规范。</p>
<h2 id="属性（成员变量）"><a href="#属性（成员变量）" class="headerlink" title="属性（成员变量）"></a>属性（成员变量）</h2><p>抽象类中的成员变量与普通的 Java 类声明一样；<br>接口中的成员变量<strong>只能是</strong> public static final 类型的。</p>
<h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><p>抽象类可以有方法实现，也可以用 abstract 关键字将其抽象化；<br>接口不存在方法实现，所有的方法均为 public 抽象方法。</p>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>抽象类有构造函数，但不能实例化，除了不能实例化之外，与普通的 Java 类没有区别；<br>接口没有实例化的概念，无构造函数。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>抽象类只能有一个父类，但可以实现多个接口；<br>一个接口可以继承多个接口。</p>
<h2 id="子类实现"><a href="#子类实现" class="headerlink" title="子类实现"></a>子类实现</h2><p>子类通过 extends 关键字来继承抽象类，如果子类不是抽象类的话，它需要提供抽象类中所有抽象方法的实现；<br>子类通过 implements 关键字来实现接口，需要提供接口中所有声明方法的实现。</p>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>抽象类中抽象方法可以有 public、 protected 和 default 这些修饰符；<br>接口方法默认修饰符是 public ，<strong>不可以使用其它修饰符</strong>。</p>
<h2 id="访问速度"><a href="#访问速度" class="headerlink" title="访问速度"></a>访问速度</h2><p>同等条件下，对抽象类方法的访问速度快于接口，接口需要花时间寻找类中实现的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170919.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;你看
    
    </summary>
    
      <category term="Java 基础" scheme="https://githubhaohao.github.io/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="抽象类" scheme="https://githubhaohao.github.io/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>2017 下半年学习规划</title>
    <link href="https://githubhaohao.github.io/2017/09/06/2017-study-plan/"/>
    <id>https://githubhaohao.github.io/2017/09/06/2017-study-plan/</id>
    <published>2017-09-06T13:11:16.000Z</published>
    <updated>2017-10-20T10:29:13.581Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ovv1lq7pk.bkt.clouddn.com/Woman-Gazing-Under-Large-Tree.jpg" alt="Markdown"></p><p></p>
<p><div align="center">种一棵树最好的时间是 10 年前，其次是现在。</div><br></p>
<blockquote>
<p>最近差不多解决了小论文的问题，心理负担一下子减轻一大半。上个月花了 20  多天时间在外地维护项目，坑啊，哪是维护项目，其实就是现场开发调试测试新功能。这一搞不要紧，彻底打乱了个人计划，本来论文是九月初完成，一直拖到现在，搞得现在计划很混乱，自己很头疼，更特么头疼的是自己的博客和公众号也有将近一个月没维护了，又一次被“啪啪”打脸。</p>
<p>我习惯于未来的生活有一个大致的安排，中间可以有点小插曲，但是不要打乱节奏就好。</p>
<p>接下来就是毕业季找工作，压力山大，所以目前必须要有一个明确的规划。主要应对接下来的面试、论文。</p>
<p>接下来每天解决掉的知识点都会在上面做记录。</p>
</blockquote>
<h1 id="2017-下学年学习规划"><a href="#2017-下学年学习规划" class="headerlink" title="2017 下学年学习规划"></a>2017 下学年学习规划</h1><h2 id="大论文"><a href="#大论文" class="headerlink" title="大论文"></a>大论文</h2><p>10 月份之前完成论文框架，其他 TBD</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>按照 Java 工程师的标准储备 Java 基础知识</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="Android-进阶书籍"><a href="#Android-进阶书籍" class="headerlink" title="Android 进阶书籍"></a>Android 进阶书籍</h3><p>反复学习 《Android开发艺术探索》《Android源码设计模式》 专业书籍</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>熟悉常用的设计模式<br>六大原则 + 24 种设计模式</p>
<h3 id="Android-架构"><a href="#Android-架构" class="headerlink" title="Android 架构"></a>Android 架构</h3><p>熟悉 MVP MVVM Clean 架构</p>
<h3 id="开源库源码阅读"><a href="#开源库源码阅读" class="headerlink" title="开源库源码阅读"></a>开源库源码阅读</h3><p>熟悉 RxJava Retrofit Glide 等常用开源库的原理和流程。</p>
<p>每天阅读优秀的开源库源码不少于半个小时。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>解决掉两本书：</p>
<ol>
<li>大话数据结构</li>
<li>程序员代码面试指南</li>
</ol>
<p><del>算法时间复杂度</del><br><del>线性表 顺序表</del><br><del>线性表 单链表</del><br><del>线性表 循环单链表</del><br><del>线性表 循环双链表</del><br><del>栈 顺序栈</del><br><del>栈 链栈</del><br><del>队列 顺序循环队列</del><br><del>队列 链队列</del><br><del>二叉树，树</del><br><del>图</del></p>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>计算机网路基础<br><del>物理层</del><br><del>数据链路层</del><br><del>网络层</del><br><del>运输层</del></p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>操作系统原理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ovv1lq7pk.bkt.clouddn.com/Woman-Gazing-Under-Large-Tree.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div al
    
    </summary>
    
      <category term="生活" scheme="https://githubhaohao.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="规划" scheme="https://githubhaohao.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程的七种状态</title>
    <link href="https://githubhaohao.github.io/2017/07/21/Java-thread-7-kinds-of-state/"/>
    <id>https://githubhaohao.github.io/2017/07/21/Java-thread-7-kinds-of-state/</id>
    <published>2017-07-21T02:54:16.000Z</published>
    <updated>2017-09-16T01:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://ow23qx875.bkt.clouddn.com/cover_20170721.jpg" alt="Markdown"></p><p></p>
<p><div align="center">明知对要做的事情进行拖延，它所消耗的心理能量会远远多于做事情本身</div><br></p>
<blockquote>
<p>本篇感性地介绍一下 Java 线程的七种状态以及状态之间的转换</p>
</blockquote>
<h1 id="Java-线程状态转换图"><a href="#Java-线程状态转换图" class="headerlink" title="Java 线程状态转换图"></a>Java 线程状态转换图</h1><p></p><p align="center"><img src="http://ovv1lq7pk.bkt.clouddn.com/java-thread-state.png" alt="Markdown"></p><p></p>
<p><div align="center">Java 线程状态转换图</div><br></p>
<h1 id="Java-线程状态"><a href="#Java-线程状态" class="headerlink" title="Java 线程状态"></a>Java 线程状态</h1><p>在 Java 线程的生命周期中，按复杂的并发场景考虑，可将 Java 线程的状态分为七种，分别是：新建（New），可运行（Runnable 或 Ready），运行（Running），无限期等待（Waiting），限期等待（Timed Waiting），阻塞（Blocked），结束（Terminated）。</p>
<h2 id="新建（New）状态"><a href="#新建（New）状态" class="headerlink" title="新建（New）状态"></a>新建（New）状态</h2><p>新创建一个线程对象，尚未执行。</p>
<h2 id="可运行（Runnable-或-Ready）状态"><a href="#可运行（Runnable-或-Ready）状态" class="headerlink" title="可运行（Runnable 或 Ready）状态"></a>可运行（Runnable 或 Ready）状态</h2><p>新创建的线程调用 start 方法后便处于 Runnable 状态，刚刚结束等待（获取到锁）或刚结束阻塞状态的线程也会处于 Runnable 状态，处于该状态的线程位于可运行线程池中，等待获取 CPU 资源。</p>
<h2 id="运行（Running）状态"><a href="#运行（Running）状态" class="headerlink" title="运行（Running）状态"></a>运行（Running）状态</h2><p>处于 Runnable 状态的线程获取到 CPU 资源，执行程序代码。</p>
<h2 id="无限期等待（Waiting）状态"><a href="#无限期等待（Waiting）状态" class="headerlink" title="无限期等待（Waiting）状态"></a>无限期等待（Waiting）状态</h2><p>synchronized 代码块内被锁住的对象调用了它的 wait() 方法或者在当前线程中调用了其他线程的 join() 方法，那么当前线程将会释放占有的锁，<strong>释放 CPU 资源，阻塞在等待队列里面</strong>，一直等待被 synchronized 修饰的对象调用 notify() 或 notifyAll() 方法唤醒或者 join 的其他线程执行结束（异常退出）。在并发时，处于无限期等待状态的线程被唤醒之后，还要去竞争对象的锁，如果竞争不到，线程将会被阻塞在对象的锁池中，竞争到锁之后，线程将会处于 Runnable 状态。</p>
<h2 id="限期等待（Timed-Waiting）状态"><a href="#限期等待（Timed-Waiting）状态" class="headerlink" title="限期等待（Timed Waiting）状态"></a>限期等待（Timed Waiting）状态</h2><p>与无限期等待（Waiting）状态不同之处在于，调用 wait 和 join 方法时传入了等待限定时间。另外，线程调用 sleep() 方法也会处于限期等待（Timed Waiting）状态，<strong>会释放 CPU 资源，但并不会释放锁</strong>，一直到休眠结束变成 Runnable 状态。</p>
<h2 id="阻塞（Blocked）状态"><a href="#阻塞（Blocked）状态" class="headerlink" title="阻塞（Blocked）状态"></a>阻塞（Blocked）状态</h2><p>线程程序执行到 synchronized 代码块或 Reentrant.lock() 方法，对象的锁被其他线程占用时，当前线程将会被阻塞在对象的锁池中，处于阻塞（Blocked）状态。</p>
<h2 id="结束（Terminated）状态"><a href="#结束（Terminated）状态" class="headerlink" title="结束（Terminated）状态"></a>结束（Terminated）状态</h2><p>线程 run 方法执行完毕或者异常退出，则该线程的生命周期终结，不能再次使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://ow23qx875.bkt.clouddn.com/cover_20170721.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;明知
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="线程" scheme="https://githubhaohao.github.io/categories/Android/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="线程状态" scheme="https://githubhaohao.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
</feed>
