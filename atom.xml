<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haohao</title>
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://githubhaohao.github.io/"/>
  <updated>2017-07-21T07:07:45.366Z</updated>
  <id>https://githubhaohao.github.io/</id>
  
  <author>
    <name>haohao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 线程的七种状态</title>
    <link href="https://githubhaohao.github.io/2017/07/21/Java-thread-7-kinds-of-state/"/>
    <id>https://githubhaohao.github.io/2017/07/21/Java-thread-7-kinds-of-state/</id>
    <published>2017-07-21T02:54:16.000Z</published>
    <updated>2017-07-21T07:07:45.366Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://i2.kiimg.com/588795/0cd39acc71dfc741.jpg" alt="Markdown"></p><p></p>
<p><div align="center">明知对要做的事情进行拖延，它所消耗的心理能量会远远多于做事情本身</div><br></p>
<blockquote>
<p>本篇感性地介绍一下 Java 线程的七种状态以及状态之间的转换</p>
</blockquote>
<h1 id="Java-线程状态转换图"><a href="#Java-线程状态转换图" class="headerlink" title="Java 线程状态转换图"></a>Java 线程状态转换图</h1><p></p><p align="center"><img src="http://i1.buimg.com/588795/9b63465fe1dfa0dd.png" alt="Markdown"></p><p></p>
<p><div align="center">Java 线程状态转换图</div><br></p>
<h1 id="Java-线程状态"><a href="#Java-线程状态" class="headerlink" title="Java 线程状态"></a>Java 线程状态</h1><p>在 Java 线程的生命周期中，按复杂的并发场景考虑，可将 Java 线程的状态分为七种，分别是：新建（New），可运行（Runnable 或 Ready），运行（Running），无限期等待（Waiting），限期等待（Timed Waiting），阻塞（Blocked），结束（Terminated）。</p>
<h2 id="新建（New）状态"><a href="#新建（New）状态" class="headerlink" title="新建（New）状态"></a>新建（New）状态</h2><p>新创建一个线程对象，尚未执行。</p>
<h2 id="可运行（Runnable-或-Ready）状态"><a href="#可运行（Runnable-或-Ready）状态" class="headerlink" title="可运行（Runnable 或 Ready）状态"></a>可运行（Runnable 或 Ready）状态</h2><p>新创建的线程调用 start 方法后便处于 Runnable 状态，刚刚结束等待（获取到锁）或阻塞状态的线程也会处于 Runnable 状态，处于该状态的线程位于可运行线程池中，等待获取 CPU 资源。</p>
<h2 id="运行（Running）状态"><a href="#运行（Running）状态" class="headerlink" title="运行（Running）状态"></a>运行（Running）状态</h2><p>处于 Runnable 状态的线程获取到 CPU 资源，执行程序代码。</p>
<h2 id="无限期等待（Waiting）状态"><a href="#无限期等待（Waiting）状态" class="headerlink" title="无限期等待（Waiting）状态"></a>无限期等待（Waiting）状态</h2><p>synchronized 代码块内被锁住的对象调用了它的 wait() 方法或者在当前线程中调用了其他线程的 join() 方法，那么当前线程将会释放占有的锁，释放 CPU 资源，阻塞在等待队列里面，一直等待被 synchronized 修饰的对象调用 notify() 或 notifyAll() 方法唤醒或者 join 的其他线程执行结束（异常退出）。在并发时，处于无限期等待状态的线程被唤醒之后，还要去竞争对象的锁，如果竞争不到，线程将会被阻塞在对象的锁池中，竞争到锁之后，线程将会处于 Runnable 状态。</p>
<h2 id="限期等待（Timed-Waiting）状态"><a href="#限期等待（Timed-Waiting）状态" class="headerlink" title="限期等待（Timed Waiting）状态"></a>限期等待（Timed Waiting）状态</h2><p>与无限期等待（Waiting）状态不同之处在于，调用 wait 和 join 方法时传入了等待限定时间。另外，线程调用 sleep() 方法也会处于限期等待（Timed Waiting）状态，<strong>会释放 CPU 资源，但并不会释放锁</strong>，一直到休眠结束变成 Runnable 状态。</p>
<h2 id="阻塞（Blocked）状态"><a href="#阻塞（Blocked）状态" class="headerlink" title="阻塞（Blocked）状态"></a>阻塞（Blocked）状态</h2><p>线程程序执行到 synchronized 代码块或 Reentrant.lock() 方法，对象的锁被其他线程占用时，当前线程将会被阻塞在对象的锁池中，处于阻塞（Blocked）状态。</p>
<h2 id="结束（Terminated）状态"><a href="#结束（Terminated）状态" class="headerlink" title="结束（Terminated）状态"></a>结束（Terminated）状态</h2><p>线程 run 方法执行完毕或者异常退出，则该线程的生命周期终结，不能再次使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.kiimg.com/588795/0cd39acc71dfc741.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;明知对要做的
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="线程" scheme="https://githubhaohao.github.io/categories/Android/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="线程状态" scheme="https://githubhaohao.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机基础知识（二）</title>
    <link href="https://githubhaohao.github.io/2017/07/20/Basic-knowledge-of-JVM-GC/"/>
    <id>https://githubhaohao.github.io/2017/07/20/Basic-knowledge-of-JVM-GC/</id>
    <published>2017-07-20T13:33:28.000Z</published>
    <updated>2017-07-21T12:18:33.322Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://i4.piimg.com/588795/fa2868bfc687952a.png" alt="Markdown"></p><p></p>
<p><div align="center">一切努力都应该指向现实，给生活带来直接、可触碰的变化<div><br></div></div></p>
<blockquote>
<p>本篇是 Java 虚拟机系列的第二篇，主要介绍 Java 虚拟机垃圾回收机制。</p>
</blockquote>
<h1 id="JVM-垃圾回收机制"><a href="#JVM-垃圾回收机制" class="headerlink" title="JVM 垃圾回收机制"></a>JVM 垃圾回收机制</h1><p>理解 JVM 垃圾回收机制需要弄清楚两个问题：</p>
<ul>
<li>什么是垃圾，或者怎么判定垃圾？</li>
<li>怎么回收，或者通过什么方式回收垃圾？</li>
</ul>
<h1 id="什么是垃圾，或者怎么判定垃圾？"><a href="#什么是垃圾，或者怎么判定垃圾？" class="headerlink" title="什么是垃圾，或者怎么判定垃圾？"></a>什么是垃圾，或者怎么判定垃圾？</h1><p>“垃圾”即不再存活的对象，判定对象是否存活，一般有两种方法：</p>
<ul>
<li>引用计数算法</li>
<li>可达性分析算法</li>
</ul>
<h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>为每一个创建的对象分配一个引用计数器，用来存储该对象被引用的个数。当有一个地方引用它，引用计数器就加 1 ；当引用失效，引用计数器就减 1 ；当引用计数器为 0 ，意味这个对象没有被使用，可以认为“对象死去”。</p>
<p>但是，引用计数算法很难检测出对象之间的循环引用，当两个对象互相引用，即时它俩都不被外界任何东西引用，它俩的计数都不为零，因此永远不会被回收。所以， JVM 并没有用此方案来检测对象是否存活。</p>
<h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>可达性分析算法的基本思路是以一系列 GC Roots 对象为起点出发，然后向下搜索，搜索所走过的路经称为引用链，处在引用链上的对象称为可达对象，或存活对象；而当一个对象到 GC Roots 对象没有任何引用链相连，则被视为不可达对象，或垃圾。JVM 采用可达性分析算法判断对象是否存活。</p>
<p></p><p align="center"><img src="http://i4.piimg.com/588795/9c021991a9ec09cc.jpg" alt="Markdown"></p><p></p>
<p><div align="center">可达性分析算法判断对象是否存活</div><br><br>JVM 中哪些对象可以作为 GC Roots？GC Roots 对象本身一定是可达的，这样从它们出发遍历到的对象才能保证一定可达。一般有如下几种：</p>
<ul>
<li>虚拟机栈（帧栈中的本地变量表）中引用的对象。</li>
<li>方法区中静态属性引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中 JNI 引用的对象。</li>
</ul>
<h1 id="通过什么方式回收垃圾？"><a href="#通过什么方式回收垃圾？" class="headerlink" title="通过什么方式回收垃圾？"></a>通过什么方式回收垃圾？</h1><p>常用的垃圾回收方式有：</p>
<ul>
<li>标记-清除算法 (Mark-Sweep)</li>
<li>标记-整理算法 (Mark-Compact)</li>
<li>复制算法 (Copying)</li>
<li>分代收集算法 (Generational Collection)</li>
</ul>
<h2 id="标记-清除算法-Mark-Sweep"><a href="#标记-清除算法-Mark-Sweep" class="headerlink" title="标记-清除算法 (Mark-Sweep)"></a>标记-清除算法 (Mark-Sweep)</h2><p>基本原理：先标记出需要回收的对象，然后一并回收被标记过的对象。</p>
<p>通过可达性分析算法判定对象不可用，是标记的第一步，如果对象已经被标记一次，它将被进行一次筛选，筛选条件为对象是否重写了 finalize() 方法，或者 finalize() 已经被虚拟机调用。当对象没重写或 finalize() 已经被执行过，就证明对象已经没有可能再回到可用状态，待虚拟机第二次标记它时，就会被放到回收的集合中。</p>
<p>标记-清除算法缺点：</p>
<ul>
<li>效率低，标记和清除两个过程的效率都不高</li>
<li>易产生内存碎片，标记清除之后会导致内存中出现大量的不连续的内存碎片，之后分配较大对象的内存空间时，导致没有足够的连续内存，可能会触发另一次的垃圾回收，这个问题也间接的反映出了效率不高。<br>当然， JVM 并不是只用这一个算法去回收垃圾，而是在对象存活率较高的时候，使用这个算法。</li>
</ul>
<h2 id="标记-整理算法-Mark-Compact"><a href="#标记-整理算法-Mark-Compact" class="headerlink" title="标记-整理算法 (Mark-Compact)"></a>标记-整理算法 (Mark-Compact)</h2><p>标记-整理算法可以说是标记-清除算法的完善版，标记-清除算法容易产生内存碎片。标记-整理算法是在标记后，将所有存活的对象都向一端移动，然后再清理掉边界以外的内存。</p>
<h2 id="复制算法-Copying"><a href="#复制算法-Copying" class="headerlink" title="复制算法 (Copying)"></a>复制算法 (Copying)</h2><p>复制算法的基本思想是将可用内存容量划分为大小相等的两块，每次只用其中的一块，当这块内存用完了，就将还存活的对象复制到另一块上，然后清除已使用的那块。这样每次固定回收一半内存，实现简单，运行高效，并且不会出现内存碎片。这个算法的代价也很大，就是要牺牲一半的内存。<br>主流的商业虚拟机一般采用复制算法来回收新生代，因为新生代里的对象 98% 都是“朝生夕死”，所以并不需要按照 1：1 的比例划分内存空间。一般新生代只有 10% （不绝对）左右的对象存活，虚拟机的划分比例往往高于 8：1 。</p>
<h2 id="分代收集算法-Generational-Collection"><a href="#分代收集算法-Generational-Collection" class="headerlink" title="分代收集算法 (Generational Collection)"></a>分代收集算法 (Generational Collection)</h2><p>目前主流的商业虚拟机均采用分代收集算法，根据对象存活周期的不同将内存划分为几块，一般分为新生代和老年代。</p>
<ul>
<li>新生代：对象存活率低，每次垃圾回收后都只有少量对象存活，因此适合用复制算法。</li>
<li>老年代：对象存活率高，适合使用标记-清除或者标记-整理算法。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.piimg.com/588795/fa2868bfc687952a.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;一切努力都应
    
    </summary>
    
      <category term="JVM" scheme="https://githubhaohao.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://githubhaohao.github.io/tags/JVM/"/>
    
      <category term="GC" scheme="https://githubhaohao.github.io/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式之代理模式</title>
    <link href="https://githubhaohao.github.io/2017/07/07/Android-design-pattern-Proxy-pattern/"/>
    <id>https://githubhaohao.github.io/2017/07/07/Android-design-pattern-Proxy-pattern/</id>
    <published>2017-07-07T07:27:00.000Z</published>
    <updated>2017-07-08T04:54:24.941Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><img src="http://i4.piimg.com/588795/34f77050f4ca445e.jpg" alt="Markdown"></p><p></p>
<p><div align="center">生活中的很多烦恼都源于盲目的攀比，而忘了享受自己的生活</div><br></p>
<blockquote>
<p>本文是 Android 设计模式的第五篇，接下来会陆续推出整个常用的设计模式系列。<br>本篇主要介绍一下在 Android 开发中无所不在的一种设计模式 – 代理模式。说它无所不在，主要是因为 Android 四大组件的创建和使用均会涉及与 Framework 层进行频繁的 IPC ，而 Binder IPC 模型使用的就是代理模式。</p>
</blockquote>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式（Proxy Pattern）：为访问对象提供一个代理对象来实现对被访问者的访问，其实就是在访问对象与被访问对象之间添加一个中介，用来隔离访问者与被访问者的具体实现细节。它是一种结构型设计模式。</p>
<h1 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h1><ul>
<li>抽象对象：声明了目标对象和代理对象的共同接口；</li>
<li>目标对象：被代理或者被访问的对象；</li>
<li>代理对象：代理对象内部持有目标对象的引用，代理对象与目标对象实现相同的接口， Client 访问代理对象相当于间接访问目标对象。</li>
</ul>
<p></p><p align="center"><img src="https://github.com/simple-android-framework/android_design_patterns_analysis/raw/master/proxy/singwhatiwanna/images/proxy-uml.png" alt=""></p><p></p>
<p><div align="center">图片来自于网络</div><br></p>
<h1 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h1><p>下面是一个非常简单的例子。</p>
<h2 id="抽象对象"><a href="#抽象对象" class="headerlink" title="抽象对象"></a>抽象对象</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CommonInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">operate</span><span class="params">(str: <span class="type">String</span>)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectObj</span> : <span class="type">CommonInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">operate</span><span class="params">(str: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        println(<span class="string">"目标对象 : <span class="subst">$str</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyObj</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> subjectObj: SubjectObj) : CommonInterface &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">operate</span><span class="params">(str: <span class="type">String</span>)</span></span> &#123;</div><div class="line">        println(<span class="string">"代理对象 : 调用目标对象"</span>)</div><div class="line">        subjectObj.operate(str)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> subjectObj = SubjectObj()</div><div class="line">    <span class="keyword">val</span> proxyObj = ProxyObj(subjectObj)</div><div class="line"></div><div class="line">    proxyObj.operate(<span class="string">"执行操作"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">代理对象 : 调用目标对象</div><div class="line">目标对象 : 执行操作</div></pre></td></tr></table></figure></p>
<h1 id="Android-中的代理模式"><a href="#Android-中的代理模式" class="headerlink" title="Android 中的代理模式"></a>Android 中的代理模式</h1><p>Android Binder 类是实现进程间通信的媒介，由于进程间通信贯穿四大组件使用的始末，所以在 Android 开发过程中进程间通信随处可见，而 Android Binder IPC 模型是基于代理模式。 </p>
<p>Android Binder IPC 通信模型：</p>
<ul>
<li>Client : 持有 Server 的本地 Binder 对象的代理对象；  </li>
<li>Server : 持有本地 Binder 对象，为 Client 端提供功能性服务；</li>
<li>ServiceManager : 负责管理 Binder 服务，可以根据 Binder Name 获取 Binder 引用，功能类似于 DNS 服务器；</li>
<li>Binder 驱动 : Client 与 Server ，以及 Server 与 ServiceManager 之间的通信都会经过 Binder 驱动，维持 Binder Proxy 与 Binder 实体引用之间的映射，根据 Client 端由 Binder Proxy 打包发送过来数据包，调用 Server 方法，再将返回结果打包由 Binder Proxy 传回 Client 端。</li>
</ul>
<p>下面实现一个最简单的 Binder IPC 模型：</p>
<h2 id="抽象对象接口"><a href="#抽象对象接口" class="headerlink" title="抽象对象接口"></a>抽象对象接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteCompute</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">    <span class="comment">// 实现一个远程加法调用，并将结果返回给 Client 端 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remoteAdd</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="目标对象（Binder-本地对象）"><a href="#目标对象（Binder-本地对象）" class="headerlink" title="目标对象（Binder 本地对象）"></a>目标对象（Binder 本地对象）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Stub 就是 Binder 本地对象，它的方法是在 Server 进程中执行。 </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">RemoteCompute</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"cn.haohao.ipc.ICompute"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Construct the stub at attach it to the interface.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Cast an IBinder object into an cn.haohao.ipc.ICompute interface,</div><div class="line">     * generating a proxy if needed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemoteCompute <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">        <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> RemoteCompute))) &#123;</div><div class="line">            <span class="keyword">return</span> ((RemoteCompute) iin);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RemoteCompute.Stub.Proxy(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                reply.writeString(DESCRIPTOR);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_remoteAdd: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                <span class="keyword">int</span> _arg0;</div><div class="line">                _arg0 = data.readInt();</div><div class="line">                <span class="keyword">int</span> _arg1;</div><div class="line">                _arg1 = data.readInt();</div><div class="line">                <span class="keyword">int</span> _result = <span class="keyword">this</span>.remoteAdd(_arg0, _arg1);</div><div class="line">                reply.writeNoException();</div><div class="line">                reply.writeInt(_result);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_remoteAdd = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代理对象-1"><a href="#代理对象-1" class="headerlink" title="代理对象"></a>代理对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 IPC 时 Proxy 对象只是持有 Binder Proxy 对象的引用，严格来说它是间接的代理。</span></div><div class="line"><span class="comment">// Proxy 负责打包 Client 端的请求参数，发送给 Binder 驱动，由 Binder 驱动调用 Server 端本地 Binder 对象解析数据并执行对应的操作，同时 Client 端线程挂起，当 Server 端方法执行完毕后，再将返回结果打包，通过 Binder 驱动传回到 Client 端的 Binder Proxy，Binder Proxy 会解析数据包中的内容并将原始结果返回给 Client 端。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">RemoteCompute</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> android.os.IBinder mRemote; <span class="comment">// IPC 时由 Binder 驱动返回的 Binder Proxy (Binder 代理对象)</span></div><div class="line">    Proxy(android.os.IBinder remote) &#123;</div><div class="line">        mRemote = remote;</div><div class="line">        Log.d(TAG, <span class="string">"Proxy: remote : "</span> + mRemote);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remoteAdd</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"remoteAdd() called with: arg1 = ["</span> + arg1 + <span class="string">"], arg2 = ["</span> + arg2 + <span class="string">"]"</span>);</div><div class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">        <span class="keyword">int</span> _result;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            _data.writeInt(arg1);</div><div class="line">            _data.writeInt(arg2);</div><div class="line">            mRemote.transact(Stub.TRANSACTION_remoteAdd, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">            _result = _reply.readInt();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> _result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ServiceConnection mConn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">        <span class="comment">// 在 IPC 时，service 就是 Binder 驱动返回的 Binder Proxy 对象的引用。</span></div><div class="line">        remoteCompute = RemoteCompute.Stub.asInterface(service);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 调用远程方法</span></div><div class="line"><span class="keyword">int</span> result = remoteCompute.remoteAdd(<span class="number">88</span>, <span class="number">12</span>);</div></pre></td></tr></table></figure>
<h1 id="代理模式的优点和缺点"><a href="#代理模式的优点和缺点" class="headerlink" title="代理模式的优点和缺点"></a>代理模式的优点和缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>降低访问者与被访问者之间的耦合度</li>
<li>可以控制访问者对被访问者的访问权限</li>
<li>虚拟代理通过使用一个小对象来代理一个大对象，可以减少系统开销</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>代理对象会增加逻辑的复杂度</li>
<li>减慢对目标对象的访问速度</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.piimg.com/588795/34f77050f4ca445e.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;生活中的很多
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="设计模式" scheme="https://githubhaohao.github.io/categories/Android/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理模式" scheme="https://githubhaohao.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统启动流程</title>
    <link href="https://githubhaohao.github.io/2017/07/04/Android-system-boot-process/"/>
    <id>https://githubhaohao.github.io/2017/07/04/Android-system-boot-process/</id>
    <published>2017-07-04T12:39:40.000Z</published>
    <updated>2017-07-04T14:06:36.886Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.kiimg.com/588795/8cb3f10500429125.jpg" alt="Markdown"></p>

<p align="center">凡事都往好的一面去想，这种习惯比收入千磅还好</p>

<blockquote>
<p>对于 Android 系统的启动流程，每一位 Android Developer 都应该烂熟于心，它在某种程度上代表着 Android 开发的学习路线。本篇感性地介绍一下 Android 系统的启动流程。</p>
</blockquote>
<h1 id="Android-系统启动流程示意图"><a href="#Android-系统启动流程示意图" class="headerlink" title="Android 系统启动流程示意图"></a>Android 系统启动流程示意图</h1><p align="center"><img src="http://i1.buimg.com/588795/5cfc8539a35b8eea.jpg" alt="Markdown"></p><br><p align="center">图片来自于网络</p>

<p>启动过程： Loader -&gt; Kernel -&gt; Native -&gt; Framework -&gt; App 。</p>
<h1 id="Android-系统启动过程"><a href="#Android-系统启动过程" class="headerlink" title="Android 系统启动过程"></a>Android 系统启动过程</h1><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>Loader 层执行过程分为两步：</p>
<ol>
<li>Android 设备上电以后，引导芯片执行固化在 Boot ROM 里的启动引导代码，加载 Boot Loader 代码到内存；</li>
<li>Boot Loader 代码开始执行，检查 RAM ，完成硬件的初始化，加载Linux内核代码到内存。</li>
</ol>
<h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p>Linux 内核开始启动，初始化各种软硬件环境，加载驱动程序，挂载根文件系统，执行init程序。</p>
<h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><ul>
<li>init 进程 fork 出 logd 、 healthd 、 installd 、 adbd 等用户守护进程；</li>
<li>启动 ServiceManager 和 MediaServer（本地服务）；</li>
<li>fork 出 Zygote 进程，<strong>Zygote 进程是所有 Java 进程的父进程</strong>。</li>
</ul>
<h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><p>Framework 层由 C++ Framework 层和 Java Framework 层组成。</p>
<h3 id="C-Framework-层"><a href="#C-Framework-层" class="headerlink" title="C++ Framework 层"></a>C++ Framework 层</h3><p>C++ Framework 层主要运行本地服务，即 MediaServer 进程，它是由 init 进程 fork 而来，负责启动和管理整个 C++ framework ，包含 AudioFlinger ，Camera Service 等服务。</p>
<h3 id="Java-Framework-层"><a href="#Java-Framework-层" class="headerlink" title="Java Framework 层"></a>Java Framework 层</h3><p>Java Framework 层主要运行 SystemServer 进程，SystemServer 进程是 Zygote 进程 fork 出的第一个 Java 进程，SystemServer 负责启动和管理 Java Framework ，主要管理 Android 服务，如 ActivityManagerService ，NotificationManagerService ，WindowManagerService 等，它们均以线程的方式运行在 SystemServer 进程中。</p>
<h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><p>Zygote 进程 fork 出来的第一个 App 进程是 Launcher ，即桌面 App ，所有的 App 进程都是由 Zygote 进程 fork 生成的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.kiimg.com/588795/8cb3f10500429125.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;凡事都往好的一面去想，这种习惯比收入千磅还好&lt;/
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="Android 系统" scheme="https://githubhaohao.github.io/categories/Android/Android-%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Android System" scheme="https://githubhaohao.github.io/tags/Android-System/"/>
    
  </entry>
  
  <entry>
    <title>RxJava for Kotlin 实践（三）</title>
    <link href="https://githubhaohao.github.io/2017/07/01/RxJava-to-Kotlin-Util-and-Operator/"/>
    <id>https://githubhaohao.github.io/2017/07/01/RxJava-to-Kotlin-Util-and-Operator/</id>
    <published>2017-07-01T12:43:50.000Z</published>
    <updated>2017-07-01T13:40:43.899Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.kiimg.com/588795/b6f9215228073a9a.jpg" alt="Markdown"></p>

<p align="center">我们很少想我们已经拥有的，而总是想我们所没有的</p>

<blockquote>
<p>本篇是 RxJava for Kotlin 系列的第三篇，本系列从可观察系列的创建、组合变换以及监听的实践入手，最后一直到 RxJava 的实现原理分析。</p>
<p><a href="http://haohaochang.cn/2017/06/17/RxJava-for-Kotlin-practice-transforming-and-combining/" target="_blank" rel="external">上一篇主要介绍了 RxJava 可观察序列常用的组合和变换方式，</a>本篇主要简单介绍可观察序列在生产和消费时线程的转换方式以及如何自定义 RxJava 操作符。</p>
</blockquote>
<h1 id="RxJava-线程转换"><a href="#RxJava-线程转换" class="headerlink" title="RxJava 线程转换"></a>RxJava 线程转换</h1><p>RxJava 的精髓在于它的异步处理，可以轻松实现线程切换。</p>
<p>RxJava 常用线程切换操作符： <code>subscribeOn</code> ，<code>observeOn</code> 。</p>
<ul>
<li><code>subscribeOn</code> : 指定 Observable 自身在哪个调度器上执行，即<strong>指定生产者所在的线程</strong>。</li>
<li><code>observeOn</code> : 指定一个观察者在哪个调度器上观察这个 Observable 即<strong>指定消费者所在的线程</strong>.</li>
</ul>
<p>另外还有一个常用的操作符 <code>doOnNext</code> ，事件序列被消费之前，注册一个回调，接收 Observable 发射的每一项数据，但是不消费事件。通常在事件被消费之前做一些保存操作，例如，在进行网络请求时，对响应数据做一下缓存操作。</p>
<p>一个简单的线程切换例子：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * observeOn 指定一个观察者在哪个调度器上观察这个 Observable 即指定消费者所在的线程。</div><div class="line">    *</div><div class="line">    * subscribeOn 指定 Observable 自身在哪个调度器上执行，即指定生产者所在的线程。</div><div class="line">    *</div><div class="line">    * doOnNext 事件序列被消费之前，注册一个回调，接收 Observable 发射的每一项数据，但是不消费事件。</div><div class="line">    * */</div><div class="line">    Observable.from(arrayOf(<span class="string">"Hello Kotlin"</span>, <span class="string">"Hello RxJava"</span>, <span class="string">"Hello Android"</span>))</div><div class="line">            .doOnNext &#123; println(<span class="string">"<span class="subst">$&#123;Thread.currentThread().name&#125;</span> : <span class="subst">$it</span>"</span>) &#125;</div><div class="line">            .subscribeOn(Schedulers.io())</div><div class="line">            .observeOn(Schedulers.newThread())</div><div class="line">            .subscribe&#123; p -&gt;</div><div class="line">                println(<span class="string">"<span class="subst">$&#123;Thread.currentThread().name&#125;</span> : <span class="subst">$p</span>"</span>)</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RxIoScheduler-<span class="number">2</span> : Hello Kotlin</div><div class="line">RxIoScheduler-<span class="number">2</span> : Hello RxJava</div><div class="line">RxIoScheduler-<span class="number">2</span> : Hello Android</div><div class="line">RxNewThreadScheduler-<span class="number">1</span> : Hello Kotlin</div><div class="line">RxNewThreadScheduler-<span class="number">1</span> : Hello RxJava</div><div class="line">RxNewThreadScheduler-<span class="number">1</span> : Hello Android</div></pre></td></tr></table></figure></p>
<h1 id="自定义操作符"><a href="#自定义操作符" class="headerlink" title="自定义操作符"></a>自定义操作符</h1><p>RxJava 提供了接口 Operator 和 Transformer 接口用于轻松实现自定义操作符。</p>
<h2 id="自定义序列操作符"><a href="#自定义序列操作符" class="headerlink" title="自定义序列操作符"></a>自定义序列操作符</h2><p>这里需要说一下 <code>lift</code> 操作符，它可以将我们自定义的操作符和其它的操作符一起做链式调用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//序列操作符</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOperator</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> name: String) : Observable.Operator&lt;String, String&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">call</span><span class="params">(p0: <span class="type">Subscriber</span>&lt;<span class="type">in</span> <span class="type">String</span>&gt;)</span></span>: Subscriber&lt;<span class="keyword">in</span> String&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">object</span> : Subscriber&lt;String&gt;(p0) &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(t: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">                <span class="keyword">if</span> (!p0.isUnsubscribed) &#123;</div><div class="line">                    p0.onError(t)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">                <span class="keyword">if</span> (!p0.isUnsubscribed) &#123;</div><div class="line">                    p0.onCompleted()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(t: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                <span class="comment">// 对每一项进行简单的标记打印操作</span></div><div class="line">                <span class="keyword">if</span> (!p0.isUnsubscribed) &#123;</div><div class="line">                    println(<span class="string">"<span class="subst">$name</span> : <span class="subst">$t</span>"</span>)</div><div class="line">                    p0.onNext(t)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="string">"Hello Kotlin"</span>, <span class="string">"Hello RxJava"</span>, <span class="string">"Hello Android"</span>))</div><div class="line">            .lift(MyOperator(<span class="string">"Opt-1"</span>))</div><div class="line">            .lift(MyOperator(<span class="string">"Opt-2"</span>))</div><div class="line">            .subscribe&#123;</div><div class="line">                println(it)</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MyOperator : Hello Kotlin</div><div class="line">Hello Kotlin</div><div class="line">MyOperator : Hello RxJava</div><div class="line">Hello RxJava</div><div class="line">MyOperator : Hello Android</div><div class="line">Hello Android</div></pre></td></tr></table></figure></p>
<h2 id="自定义变换操作符"><a href="#自定义变换操作符" class="headerlink" title="自定义变换操作符"></a>自定义变换操作符</h2><p>这里需要说一下 <code>compose</code> 操作符，它同 <code>lift</code> 操作符类似，可以将自定义操作符与标准的 RxJava 操作符一起使用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 变换操作符</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransformer</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> name: String) : Observable.Transformer&lt;<span class="built_in">Int</span>, String&gt; &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">call</span><span class="params">(p0: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;)</span></span>: Observable&lt;String&gt;  = p0.map &#123;</div><div class="line">        <span class="string">"<span class="subst">$name</span> : <span class="subst">$it</span>"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>))</div><div class="line">            .compose(MyTransformer(<span class="string">"Transformer-1"</span>))</div><div class="line">            .subscribe&#123;</div><div class="line">                println(it)</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Transformer-<span class="number">1</span> : <span class="number">123</span></div><div class="line">Transformer-<span class="number">1</span> : <span class="number">456</span></div><div class="line">Transformer-<span class="number">1</span> : <span class="number">789</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.kiimg.com/588795/b6f9215228073a9a.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;我们很少想我们已经拥有的，而总是想我们所没有的&lt;
    
    </summary>
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/tags/RxJava/"/>
    
      <category term="Kotlin" scheme="https://githubhaohao.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机基础知识（一）</title>
    <link href="https://githubhaohao.github.io/2017/06/24/Basic-knowledge-of-JVM/"/>
    <id>https://githubhaohao.github.io/2017/06/24/Basic-knowledge-of-JVM/</id>
    <published>2017-06-24T06:24:38.000Z</published>
    <updated>2017-07-01T12:11:55.261Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.buimg.com/588795/03525bdedcadceeb.jpg" alt="Markdown"></p>

<p align="center">唯有进入经常失败的未知空间，才能产生创造力</p>

<blockquote>
<p>本篇是 Java 虚拟机系列的开篇，从本篇开始，将构建适用于 Android 开发者的 Java 虚拟机基本知识体系。另外，本博客暂时不会再开的系列，到目前为止，本博客一共维护三个系列：Java 设计模式、 RxJava for Kotlin 系列以及 Java 虚拟机系列，这三个系列完成之后，将会在开新的系列。<br>本篇主要介绍 Java 虚拟机运行时内存区域划分。</p>
</blockquote>
<h1 id="Java-虚拟机"><a href="#Java-虚拟机" class="headerlink" title="Java 虚拟机"></a>Java 虚拟机</h1><p>Java 虚拟机具有两大特性：</p>
<ol>
<li>平台无关性。Java 虚拟机屏蔽了与具体操作系统平台相关的信息，使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码)，就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。</li>
<li>语言无关性。Java 虚拟机不和包括 Java 在内的任何语言绑定，它只与 .class 文件这种特定的二进制文件格式相关联，而 Java 虚拟机不关心 .class 文件的来源。基于这一特性出现了很多运行在 JVM 之上的编程语言，如 Groovy ， JRuby， Jyphon， Scala 等。</li>
</ol>
<h1 id="Java-虚拟机运行时内存区域划分"><a href="#Java-虚拟机运行时内存区域划分" class="headerlink" title="Java 虚拟机运行时内存区域划分"></a>Java 虚拟机运行时内存区域划分</h1><p></p><p align="center"><img src="http://i2.kiimg.com/588795/0c3aa5fee40734be.png" alt="Markdown"></p><br>由图所示，Java 虚拟机将运行时数据区划分为 5 块，分别是： Java 堆， 方法区（静态存储区），虚拟机栈，本地方法栈以及程序计数器。<p></p>
<p></p><p align="center"><img src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png" alt="Markdown"></p><p></p>
<p></p><p align="center">图片来自极客学院</p><p></p>
<h2 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h2><p>Java 堆是 JVM 所管理内存中的最大的一块，Java 堆是被一个虚拟机内所有线程共享的内存区域，它在虚拟机启动时创建。</p>
<p>Java 堆唯一的目的就是存放对象实例，绝大部分<strong>对象实例和数组</strong>都要在堆上分配。Java 堆可以处于物理上不连续的内存空间，只需保证逻辑上连续即可。如果在堆中没有完成实例的内存分配，并且堆也无法再扩展，将会抛出 OutOfMemoryError 异常。</p>
<h2 id="方法区（静态存储区）"><a href="#方法区（静态存储区）" class="headerlink" title="方法区（静态存储区）"></a>方法区（静态存储区）</h2><p>方法区也是线程间共享内存区域，用于存储<strong>已被虚拟机加载的类信息，常量，静态变量以及即时编译器编译后的代码</strong>等数据。</p>
<p>方法区可以处于物理上不连续的内存空间。当方法区无法满足内存分配需求时，将会抛出 OutOfMemoryError 异常。</p>
<h2 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h2><p>Java 虚拟机栈为线程私有内存区域，生命周期与线程相同。</p>
<p>Java 虚拟机栈描述的是 Java 方法执行的内存模型，每个方法执行的同时都会创建一个栈帧，主要用于存储局部变量表，操作数栈，动态链接，方法出口信息。每一个方法从调用到直至执行完的过程，都对应着一个栈帧在虚拟机栈入栈和出栈的过程。</p>
<p>Java 虚拟机规范中对 Java 虚拟机栈规定了两种异常情况：</p>
<ol>
<li>线程请求的栈深度大于虚拟机所允许的深度，将会抛出 StackOverflowError 异常，（不过现在大多数虚拟机都支持虚拟机栈的动态扩展）；</li>
<li>虚拟机栈在进行扩展时无法申请到足够的内存，将会抛出 OOM 异常。</li>
</ol>
<h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量表是<strong>一组变量值存储空间</strong>，用于<strong>存放方法参数和方法内部定义的局部变量</strong>，其中存放的数据的类型是编译期可知的<strong>各种基本数据类型、对象引用（reference）</strong>和 returnAddress 类型（它指向了一条字节码指令的地址）。</p>
<p>局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
<h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><p>操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。</p>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>一般来说，方法正常退出时，调用者的程序计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</p>
<h2 id="本地方法栈-（Native-Method-Stack）"><a href="#本地方法栈-（Native-Method-Stack）" class="headerlink" title="本地方法栈 （Native Method Stack）"></a>本地方法栈 （Native Method Stack）</h2><p>本地方法栈与 Java 虚拟机栈的作用非常相似，虚拟栈为虚拟机执行的 Java 方法服务，本地方法栈则为使用到的 Native 方法服务。</p>
<p>与虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器为一小块线程私有的内存空间，可以看成当前线程所执行字节码的行号指示器。</p>
<p>程序计数器存在的意义是确保线程切换后或者线程被 CPU 重新调度后，恢复到正确的执行位置。如果一个线程执行的 Java 方法，程序计数器记录的是正在执行的虚拟机字节码指令的位置；如果正在执行的是 Native 方法，则计数器的值为空。程序计数器存储区域是 JVM 规范中没有规定任何 OutOfMemoeyError 情况的唯一一块区域。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存不是虚拟机运行时数据区域的一部分，也不是 Java 虚拟机规范中定义的内存区域，但这部分内存也被频繁使用，也是可能导致 OutOfMemoryError 异常的内存区域。</p>
<p>在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.buimg.com/588795/03525bdedcadceeb.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;唯有进入经常失败的未知空间，才能产生创造力&lt;/p
    
    </summary>
    
      <category term="JVM" scheme="https://githubhaohao.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://githubhaohao.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>RxJava for Kotlin 实践（二）</title>
    <link href="https://githubhaohao.github.io/2017/06/17/RxJava-for-Kotlin-practice-transforming-and-combining/"/>
    <id>https://githubhaohao.github.io/2017/06/17/RxJava-for-Kotlin-practice-transforming-and-combining/</id>
    <published>2017-06-17T10:45:44.000Z</published>
    <updated>2017-07-01T12:45:38.537Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.buimg.com/588795/f8159a826beed646.jpg" alt="Markdown"></p>

<p align="center">放下执着，却又成了新的执着</p>

<blockquote>
<p>本篇是 RxJava for Kotlin 系列的第二篇，本系列从可观察系列的创建、组合变换以及监听的实践入手，最后一直到 RxJava 的实现原理分析。<br><a href="http://haohaochang.cn/2017/06/13/RxJava-for-Kotlin-practice-Creating-Observable/" target="_blank" rel="external">上一篇主要介绍了 RxJava 可观察序列常用的创建方式，</a>本篇主要简单介绍观察序列的组合变换以及过滤操作，掌握 RxJava 可观察序列的组合变换以及过滤操作，才能真正体会 Rx 之美。</p>
</blockquote>
<h1 id="RxJava-可观察序列的变换"><a href="#RxJava-可观察序列的变换" class="headerlink" title="RxJava 可观察序列的变换"></a>RxJava 可观察序列的变换</h1><h2 id="常用的操作符"><a href="#常用的操作符" class="headerlink" title="常用的操作符"></a>常用的操作符</h2><ol>
<li><strong>map()</strong> : 对序列的每一项都应用一个函数来变换 Observable 发射的数据序列；</li>
<li><strong>flatMap()</strong> : concatMap() : 将 Observable 发射的数据集合变换为 Observables 集合，然后将这些 Observable 发射的数据平坦化的放进一个单独的 Observable ；</li>
<li><strong>scan()</strong> ： 对 Observable 发射的每一项数据应用一个函数，然后按顺序依次发射每一个值；</li>
<li><strong>groupBy()</strong> : 将 Observable 分拆为 Observable 集合，将原始 Observable 发射的数据按 Key 分组，每一个 Observable 发射一组不同的数据；</li>
<li><strong>cast()</strong> : 在发射之前强制将 Observable 发射的所有数据转换为指定类型.</li>
</ol>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 对 Observable 发射的每一项数据应用一个函数，执行变换操作。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="string">"Kotlin"</span>, <span class="string">"iOS"</span>, <span class="string">"Java"</span>, <span class="string">"Objective-c"</span>))</div><div class="line">            .map &#123; it -&gt; <span class="string">"Hello <span class="subst">$it</span>"</span> &#125;</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello iOS</div><div class="line">Hello Java</div><div class="line">Hello Objective-c</div></pre></td></tr></table></figure></p>
<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>flatMap 将一个发射数据的 Observable 变换为多个 Observables ，然后将它们发射的数据<strong>合并(不一定按次序)</strong>后放进一个单独的 Observable 。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> list1 = arrayOf(<span class="string">"Kotlin"</span>, <span class="string">"iOS"</span>)</div><div class="line">    <span class="keyword">val</span> list2 = arrayOf(<span class="string">"Java"</span>, <span class="string">"Objective-c"</span>)</div><div class="line">    <span class="keyword">val</span> collections = arrayOf(list1, list2)</div><div class="line">    Observable.from(collections)</div><div class="line">            .flatMap &#123; it -&gt; Observable.from(it) &#125;</div><div class="line">            .map &#123; it -&gt; <span class="string">"Hello <span class="subst">$it</span>"</span> &#125;</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello iOS</div><div class="line">Hello Java</div><div class="line">Hello Objective-c</div></pre></td></tr></table></figure></p>
<h2 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap"></a>concatMap</h2><p>concatMap  类似于最简单版本的 flatMap ，但是它<strong>按次序连接</strong>而不是合并那些生成的 Observables ，然后产生自己的数据序列。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> list1 = arrayOf(<span class="string">"Kotlin"</span>, <span class="string">"iOS"</span>)</div><div class="line">    <span class="keyword">val</span> list2 = arrayOf(<span class="string">"Java"</span>, <span class="string">"Objective-c"</span>)</div><div class="line">    <span class="keyword">val</span> collections = arrayOf(list1, list2)</div><div class="line">    Observable.from(collections)</div><div class="line">            .concatMap &#123; it -&gt; Observable.from(it) &#125;</div><div class="line">            .map &#123; it -&gt; <span class="string">"Hello <span class="subst">$it</span>"</span> &#125;</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello iOS</div><div class="line">Hello Java</div><div class="line">Hello Objective-c</div></pre></td></tr></table></figure></p>
<h2 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h2><p>scan 连续地对数据序列的每一项应用一个函数，然后连续发射结果。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</div><div class="line">            .scan &#123; p0, p1 -&gt; p0 + p1 &#125;</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<h1 id="RxJava-可观察序列的过滤"><a href="#RxJava-可观察序列的过滤" class="headerlink" title="RxJava 可观察序列的过滤"></a>RxJava 可观察序列的过滤</h1><h2 id="常用的操作符-1"><a href="#常用的操作符-1" class="headerlink" title="常用的操作符"></a>常用的操作符</h2><ol>
<li><strong>filter()</strong> :  过滤数据；</li>
<li><strong>takeLast()</strong> : 只发射最后的 N 项数据；</li>
<li><strong>last()</strong> ： 只发射最后的一项数据；</li>
<li><strong>skip()</strong> : 跳过开始的 N 项数据；</li>
<li><strong>skipLast()</strong> : 跳过最后的 N 项数据；</li>
<li><strong>take()</strong> : 只发射开始的 N 项数据；</li>
<li><strong>elementAt()</strong> : 发射第 N 项数据。</li>
</ol>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">            .filter &#123; it &gt; <span class="number">5</span> &amp;&amp; it % <span class="number">2</span> == <span class="number">0</span> &#125;</div><div class="line">            .subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<h2 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">            .takeLast(<span class="number">5</span>)</div><div class="line">            .subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<h2 id="take"><a href="#take" class="headerlink" title="take"></a>take</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">            .take(<span class="number">5</span>)</div><div class="line">            .subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
<h2 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">            .skip(<span class="number">5</span>)</div><div class="line">            .subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<h2 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</div><div class="line">            .elementAt(<span class="number">5</span>)</div><div class="line">            .subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p>
<h1 id="RxJava-可观察序列的组合"><a href="#RxJava-可观察序列的组合" class="headerlink" title="RxJava 可观察序列的组合"></a>RxJava 可观察序列的组合</h1><h2 id="常用的操作符-2"><a href="#常用的操作符-2" class="headerlink" title="常用的操作符"></a>常用的操作符</h2><ol>
<li><strong>startWith()</strong> :  在数据序列的开头增加一项数据；</li>
<li><strong>merge()</strong> : 将多个 Observable 合并为一个；</li>
<li><strong>zip()</strong> ： 使用一个函数组合多个 Observable 发射的数据集合，然后再发射这个结果；</li>
<li><strong>switchOnNext()</strong> : 将一个发射 Observables 的 Observable 转换成另一个 Observable ，后者发射这些 Observables 最近发射的数据。</li>
</ol>
<h2 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h2><p>startWith 在数据序列的开头插入一条指定的项。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="string">"Hello Java"</span>, <span class="string">"Hello RxJava"</span>))</div><div class="line">            .startWith(<span class="string">"Hello Kotlin"</span>)</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello Java</div><div class="line">Hello RxJava</div></pre></td></tr></table></figure></p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>merge 合并多个 Observables 的发射物。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> observable1 = Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line">    <span class="keyword">val</span> observable2 = Observable.from(arrayOf(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</div><div class="line">    Observable.merge(observable1, observable2)</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello Java</div><div class="line">Hello RxJava</div></pre></td></tr></table></figure></p>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p> zip 通过一个函数将多个 Observables 的发射物结合到一起，基于这个函数的结果为每个结合体发射单个数据项。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> observable1 = Observable.from(arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line">    <span class="keyword">val</span> observable2 = Observable.from(arrayOf(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</div><div class="line"></div><div class="line">    Observable.zip(observable1, observable2) &#123; p0, p1 -&gt;</div><div class="line">        p0 + p1</div><div class="line">    &#125;.subscribe&#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.buimg.com/588795/f8159a826beed646.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;放下执着，却又成了新的执着&lt;/p&gt;

&lt;bloc
    
    </summary>
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/tags/RxJava/"/>
    
      <category term="Kotlin" scheme="https://githubhaohao.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>RxJava for Kotlin 实践（一）</title>
    <link href="https://githubhaohao.github.io/2017/06/13/RxJava-for-Kotlin-practice-Creating-Observable/"/>
    <id>https://githubhaohao.github.io/2017/06/13/RxJava-for-Kotlin-practice-Creating-Observable/</id>
    <published>2017-06-13T01:34:03.000Z</published>
    <updated>2017-06-13T03:33:47.571Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.muimg.com/588795/0840277c471983b5.jpg" alt="Markdown"></p>

<p align="center">从 RxJava 开始拆轮子</p>

<blockquote>
<p>本篇是 RxJava for Kotlin 系列的开篇，本系列从可观察系列的创建、组合变换以及监听的实践入手，最后一直到 RxJava 的实现原理分析。<br>本篇主要简单介绍 RxJava 以及可观察序列的创建方式</p>
</blockquote>
<h2 id="RxJava-简介"><a href="#RxJava-简介" class="headerlink" title="RxJava 简介"></a>RxJava 简介</h2><p>Rx 是 Reactive Extensions 的缩写，最初是 LINQ （语言集成查询）的一个扩展，由微软的架构师 Erik Meijer 领导的团队开发，在 2012 年开源，Rx 是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流， Rx 库支持 .NET 、 JavaScript 和 C++，比较流行的有 RxJava， RxJS ，以及 Rx.NET 。</p>
<p>Rx 是一个函数库，开发者可以用 Observables 表示异步数据流，用 LINQ 操作符查询异步数据流， 用 Schedulers 参数化异步数据流的并发处理， Rx 可以这样定义：Rx = Observables + LINQ + Schedulers 。</p>
<p>官方对 RxJava 的定义：</p>
<blockquote>
<p>Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.<br>用于使用 Java VM 的可观察序列编写异步和基于事件的程序的库。</p>
</blockquote>
<p>RxJava 同其他 Rx 系列一样，其使用过程可分为三步：</p>
<ol>
<li>创建： 通过 RxJava API 创建可观察事件序列或者数据流；</li>
<li>组合变换： 通过 LINQ 式操作符对事件序列或者数据流进行组合以及变换操作，实现业务逻辑；</li>
<li>监听： 通过订阅可观察观察事件序列或者数据流，可以获取组合变换的结果或者执行其他的操作。</li>
</ol>
<h2 id="RxJava-设计模式"><a href="#RxJava-设计模式" class="headerlink" title="RxJava 设计模式"></a>RxJava 设计模式</h2><p>RxJava 是基于观察者模式，在 RxJava 中有四种角色：</p>
<ol>
<li><strong>Observable</strong> （被观察者），一般指可观察事件序列或者数据流；</li>
<li><strong>Observer</strong> （观察者），用于监听可观察事件序列或者数据流；</li>
<li><strong>Subscriber</strong> （订阅者），基于 Observer 进行扩展，可取消订阅；</li>
<li><strong>Subject</strong> （主题），即可作为观察者，也可作为被观察者。</li>
</ol>
<p>对比一下 Observer 和 Subscriber 源码，它们之间的关系一目了然。</p>
<p>Observer:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable var1)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T var1)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Subscriber:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Subscription</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> NOT_SET = -<span class="number">9223372036854775808L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SubscriptionList subscriptions;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Subscriber&lt;?&gt; subscriber;</div><div class="line">    <span class="keyword">private</span> Producer producer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requested;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Subscriber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>((Subscriber)<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Subscriber</span><span class="params">(Subscriber&lt;?&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(subscriber, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Subscriber</span><span class="params">(Subscriber&lt;?&gt; subscriber, <span class="keyword">boolean</span> shareSubscriptions)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requested = -<span class="number">9223372036854775808L</span>;</div><div class="line">        <span class="keyword">this</span>.subscriber = subscriber;</div><div class="line">        <span class="keyword">this</span>.subscriptions = shareSubscriptions &amp;&amp; subscriber != <span class="keyword">null</span>?subscriber.subscriptions:<span class="keyword">new</span> SubscriptionList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subscriptions.add(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subscriptions.unsubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isUnsubscribed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subscriptions.isUnsubscribed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToRequested</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProducer</span><span class="params">(Producer p)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Subscription:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isUnsubscribed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="创建可观察序列"><a href="#创建可观察序列" class="headerlink" title="创建可观察序列"></a>创建可观察序列</h2><p><a href="https://github.com/ReactiveX/RxJava/releases" target="_blank" rel="external">添加依赖</a></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.3.0'</span></div></pre></td></tr></table></figure>
<p>Observable 有以下创建方式：</p>
<ul>
<li><strong>just()</strong> ： 将一个或多个对象转换成发射这个或这些对象的一个 Observable ；</li>
<li><strong>from()</strong> ： 将一个 Iterable ，一个Future ，或者一个数组转换成一个 Observable ；</li>
<li><strong>repeat()</strong> ： 创建一个重复发射指定数据或数据序列的 Observable ；</li>
<li><strong>create()</strong> ： 使用一个函数从头创建一个 Observable ；</li>
<li><strong>repeatWhen()</strong> ： 创建一个重复发射指定数据或数据序列的 Observable ，它依赖于另一个 Observable 发射的数据；</li>
<li><strong>defer()</strong> ： 只有当订阅者订阅才创建 Observable ，为每个订阅创建一个新的 Observable ；</li>
<li><strong>range()</strong> ： 创建一个发射指定范围的整数序列的 Observable ；</li>
<li><strong>interval()</strong> ： 创建一个按照给定的时间间隔发射整数序列的 Observable ；</li>
<li><strong>timer()</strong> ： 创建一个在给定的延时之后发射单个数据的 Observable ；</li>
<li><strong>empty()</strong> ： 创建一个什么都不做直接通知完成的 Observable ；</li>
<li><strong>error()</strong> ： 创建一个什么都不做直接通知错误的 Observable ；</li>
<li><strong>never()</strong> ： 创建一个不发射任何数据的 Observable ；</li>
</ul>
<p>接下来只介绍几种常用的方式。</p>
<h3 id="just"><a href="#just" class="headerlink" title="just"></a>just</h3><p>just 将一个或多个对象转换成发射这个或这些对象的一个 Observable ,它接受一至九个参数，返回一个按参数列表顺序发射这些数据的 Observable 。 just 类似于from ，但是 from 会将数组或 Iterable 的数据取出然后逐个发射，而 just 只是简单的原样发射，将数组或 Iterable 当做单个数据。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> observable = Observable.just(<span class="string">"Hello Kotlin"</span>, <span class="string">"Hello RxJava"</span>, <span class="string">"Android"</span>)  <span class="comment">// 被观察者</span></div><div class="line">    <span class="keyword">val</span> subscriber = <span class="keyword">object</span> : Subscriber&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</div><div class="line">            <span class="keyword">super</span>.onStart()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(p0: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">            <span class="comment">//当 Observable 遇到错误或者无法返回期望的数据时会调用这个方法，</span></div><div class="line">            <span class="comment">//这个调用会终止 Observable，后续不会再调用 onNext 和 onCompleted</span></div><div class="line">            println(<span class="string">"onError"</span>)</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">            <span class="comment">//数据发射正常终止</span></div><div class="line">            println(<span class="string">"onCompleted"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(p0: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">            <span class="comment">//Observable 调用这个方法发射数据，方法的参数就是 Observable 发射的数据</span></div><div class="line">            println(p0)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="comment">// 观察者</span></div><div class="line"></div><div class="line">    observable.subscribe(subscriber) <span class="comment">// 订阅</span></div><div class="line"></div><div class="line">    <span class="comment">// 或者用更简洁的方式</span></div><div class="line">    Observable.just(<span class="string">"Hello Kotlin"</span>, <span class="string">"Hello RxJava"</span>, <span class="string">"Android"</span>)</div><div class="line">            .subscribe(<span class="keyword">object</span> : Subscriber&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(p0: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">                    println(<span class="string">"onError"</span>)</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">                    println(<span class="string">"onCompleted"</span>)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(p0: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                    println(p0)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello RxJava</div><div class="line">Android</div><div class="line">onCompleted</div></pre></td></tr></table></figure>
<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><p>from 将一个 Iterable, 一个 Future , 或者一个数组转换成一个 Observable 。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.from(arrayOf(<span class="string">"Hello Kotlin"</span>, <span class="string">"Hello RxJava"</span>, <span class="string">"Android"</span>))</div><div class="line">            .subscribe(<span class="keyword">object</span> : Subscriber&lt;String&gt;() &#123;</div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(p0: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(p0: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                    println(p0)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">                    println(<span class="string">"onCompleted"</span>)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello RxJava</div><div class="line">Android</div></pre></td></tr></table></figure>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>repeat 创建一个重复发射指定数据或数据序列的 Observable 。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.just(<span class="string">"Hello Kotlin"</span>)</div><div class="line">            .repeat(<span class="number">3</span>) <span class="comment">// 重复次数</span></div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin</div><div class="line">Hello Kotlin</div><div class="line">Hello Kotlin</div></pre></td></tr></table></figure>
<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p>create 使用一个函数从头创建一个 Observable 。建议你在传递给 create 方法的函数中检查观察者的 isUnsubscribed 状态，以便在没有观察者的时候，让你的  Observable 停止发射数据或者做昂贵的运算。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.create(Observable.OnSubscribe&lt;String&gt; &#123;</div><div class="line">        observer -&gt;</div><div class="line">        <span class="keyword">if</span> (!observer.isUnsubscribed) &#123;</div><div class="line">            observer.onNext(<span class="string">"Hello RxJava"</span>)</div><div class="line">            observer.onNext(<span class="string">"Hello Kotlin"</span>)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            observer.onError(Throwable(<span class="string">"No subscriber!"</span>))</div><div class="line">        &#125;</div><div class="line">    &#125;).subscribe(<span class="keyword">object</span> : Subscriber&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(p0: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">            println(<span class="string">"onError"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">            println(<span class="string">"onCompleted"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(p0: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">            println(p0)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello RxJava</div><div class="line">Hello Kotlin</div><div class="line">onCompleted</div></pre></td></tr></table></figure>
<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>range 操作符发射一个一定范围内的有序整数序列，可以指定范围的起始和长度。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    Observable.range(<span class="number">0</span>,<span class="number">10</span>)</div><div class="line">            .subscribe&#123; p -&gt; println(p) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.muimg.com/588795/0840277c471983b5.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;从 RxJava 开始拆轮子&lt;/p&gt;

&lt;blo
    
    </summary>
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://githubhaohao.github.io/tags/RxJava/"/>
    
      <category term="Kotlin" scheme="https://githubhaohao.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern - flyweight pattern</title>
    <link href="https://githubhaohao.github.io/2017/06/12/Design-Pattern-flyweight-pattern/"/>
    <id>https://githubhaohao.github.io/2017/06/12/Design-Pattern-flyweight-pattern/</id>
    <published>2017-06-12T00:55:12.000Z</published>
    <updated>2017-06-12T00:55:12.344Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 设计模式之观察者模式</title>
    <link href="https://githubhaohao.github.io/2017/06/04/Android-design-pattern-observer-pattern/"/>
    <id>https://githubhaohao.github.io/2017/06/04/Android-design-pattern-observer-pattern/</id>
    <published>2017-06-04T03:17:28.000Z</published>
    <updated>2017-07-07T07:48:04.434Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i4.buimg.com/588795/256f9a0144b8b3e7.jpg" alt="Markdown"></p>

<p align="center">2017 下半年，决定虐自己一把！</p>

<blockquote>
<p>本篇开始将使用 Kotlin 代替 Java 来完成设计模式的示例，达到既学习了 Kotlin 语法，由复习了面向对象语言的设计模式。<br>本文是 Android 设计模式的第四篇，接下来会陆续推出整个常用的设计模式系列。</p>
</blockquote>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式 (Observer Pattern) ， 顾名思义，定义了对象间的一种一对多的关系，当被观察者对象发生改变，与其依赖的观察者对象都会得到通知，因此又叫做发布-订阅模式 (Publish/Subscribe) 模式。</p>
<p>需要注意的是观察者模式是一种对象行为模式。</p>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><ul>
<li>Subject： 目标（被观察者）</li>
<li>ConcreteSubject： 具体目标（具体被观察者）</li>
<li>Observer：观察者</li>
<li>ConcreteObserver：具体观察者</li>
</ul>
<p align="center"><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/Obeserver.jpg" alt=""><br></p><br><p align="center">盗图</p> 

<h2 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h2><p>接下来在实例中我们以常见警匪电影中的坏蛋 (BadGuy) 作为 Observable ，以卧底警察 （Undercover）和普通警察 （PoliceMan）作为 Observer 。</p>
<h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Java 开发包中的 Observable 类，基本实现就是用一个 Vector 来接受所有的观察者，当被观察者的状态发生改变的时候，遍历 Vector 容器，通知每一个观察者。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</div><div class="line"></div><div class="line">    <span class="comment">/** Construct an Observable with zero Observers. */</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</div><div class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</div><div class="line">            obs.addElement(o);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</div><div class="line">        obs.removeElement(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        notifyObservers(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</div><div class="line"></div><div class="line">        Object[] arrLocal;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (!changed)</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            arrLocal = obs.toArray();</div><div class="line">            clearChanged();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        obs.removeAllElements();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        changed = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> changed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obs.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ConcreteSubject"><a href="#ConcreteSubject" class="headerlink" title="ConcreteSubject"></a>ConcreteSubject</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadGuy</span> : <span class="type">Observable</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">haveBreakfast</span><span class="params">()</span></span> &#123;</div><div class="line">        println(<span class="string">"BadGuy: 开始吃饭了。。"</span>)</div><div class="line">        <span class="keyword">super</span>.setChanged()</div><div class="line">        <span class="keyword">super</span>.notifyObservers(<span class="string">"坏蛋在吃饭"</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">commitCrime</span><span class="params">()</span></span> &#123;</div><div class="line">        println(<span class="string">"BadGuy: 开始犯罪了。。"</span>)</div><div class="line">        <span class="keyword">super</span>.setChanged()</div><div class="line">        <span class="keyword">super</span>.notifyObservers(<span class="string">"坏蛋在犯罪，建议立即采取行动"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ConcreteObserver"><a href="#ConcreteObserver" class="headerlink" title="ConcreteObserver"></a>ConcreteObserver</h3><p>Undercover.kt 卧底警察</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnderCover</span> : <span class="type">Observer&#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(o: <span class="type">Observable</span>?, arg: <span class="type">Any</span>?)</span></span> &#123;</div><div class="line">        println(<span class="string">"卧底警察: 观察到疑犯活动了，赶紧报告队长！"</span>)</div><div class="line">        reportLeader(arg.toString())</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reportLeader</span><span class="params">(message: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">        println(<span class="string">"报告队长: <span class="subst">$message</span> \n"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PoliceMan.kt<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoliceMan</span> : <span class="type">Observer&#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(o: <span class="type">Observable</span>?, arg: <span class="type">Any</span>?)</span></span> &#123;</div><div class="line">        println(<span class="string">"警察: 观察到疑犯活动了，赶紧报告队长！"</span>)</div><div class="line">        reportLeader(arg.toString())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reportLeader</span><span class="params">(message: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">        println(<span class="string">"报告队长: <span class="subst">$message</span> \n"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> badGuy = BadGuy()</div><div class="line"></div><div class="line">    <span class="keyword">val</span> policeMan = PoliceMan()</div><div class="line">    <span class="keyword">val</span> underCover = UnderCover()</div><div class="line"></div><div class="line">    badGuy.addObserver(policeMan)</div><div class="line">    badGuy.addObserver(underCover)</div><div class="line"></div><div class="line">    badGuy.haveBreakfast()</div><div class="line">    badGuy.commitCrime()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BadGuy: 开始吃饭了。。</div><div class="line">卧底警察: 观察到疑犯活动了，赶紧报告队长！</div><div class="line">报告队长: 坏蛋在吃饭 </div><div class="line"></div><div class="line">警察: 观察到疑犯活动了，赶紧报告队长！</div><div class="line">报告队长: 坏蛋在吃饭 </div><div class="line"></div><div class="line">BadGuy: 开始犯罪了。。</div><div class="line">卧底警察: 观察到疑犯活动了，赶紧报告队长！</div><div class="line">报告队长: 坏蛋在犯罪，建议立即采取行动 </div><div class="line"></div><div class="line">警察: 观察到疑犯活动了，赶紧报告队长！</div><div class="line">报告队长: 坏蛋在犯罪，建议立即采取行动</div></pre></td></tr></table></figure>
<p>观察者模式在面向对象语言编程中应用十分广泛，如著的 Reactive Extensions (RX) 函数库，其中 RxJava ， RxAndroid 都是基于观察者模式。</p>
<p>在 Android 开发中，观察者模式也会被经常使用，如四大组件之一的 BroadcastReceiver 也是基于观察者模式。</p>
<h2 id="观察者模式的优点和缺点"><a href="#观察者模式的优点和缺点" class="headerlink" title="观察者模式的优点和缺点"></a>观察者模式的优点和缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>符合开闭原则</li>
<li>可以实现表示层与数据逻辑层的分离</li>
<li>观察者与被观察者之间的耦合是抽象的</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>若一个目标对象有很多观察者，遍历通知每一观察将会变得耗时太长</li>
<li>若目标对象与观察者对象存在循环依赖，可能会导致系统崩溃</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.buimg.com/588795/256f9a0144b8b3e7.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;2017 下半年，决定虐自己一把！&lt;/p&gt;

&lt;
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="设计模式" scheme="https://githubhaohao.github.io/categories/Android/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="观察者模式" scheme="https://githubhaohao.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java to Kotlin 语法清单</title>
    <link href="https://githubhaohao.github.io/2017/05/25/Java-to-Kotlin-Grammar-List/"/>
    <id>https://githubhaohao.github.io/2017/05/25/Java-to-Kotlin-Grammar-List/</id>
    <published>2017-05-25T07:25:36.000Z</published>
    <updated>2017-06-08T01:18:46.045Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.piimg.com/588795/9c8514f7c56bb889.jpg" alt="Markdown"></p>

<p align="center">时刻对新事物保持好奇心</p>

<blockquote>
<p>Google I/O 2017 宣布在 Android Studio 3.0 将默认支持 Kotlin 用于 Android 开发. 请注意 Google 只是宣布 Kotlin 作为 Android 开发的一级语言，并没有说要用其取代 Java ，这里很多无脑媒体进行了过度解读。作为一名合格的程序员，首先要理性看待技术迭代更新，同时要对新事物保持强烈的好奇心。</p>
</blockquote>
<h2 id="Kotlin-简介"><a href="#Kotlin-简介" class="headerlink" title="Kotlin 简介"></a>Kotlin 简介</h2><p>Kotlin 来自于捷克一家牛逼软件研发公司 JetBrains ，很多优秀的 IDE，如 IntelliJ IDEA、PyCharm、WebStorm 等都是它的杰作，包括 Google 官方的 Android IDE – Android Studio ，也是 IntelliJ IDEA 的插件版。</p>
<p>Kotlin 源于 JetBrains 的圣彼得堡团队，名称取自圣彼得堡附近的一个小岛 ( Kotlin Island ) ，JetBrains 在 2010 年首次推出 Kotlin 编程语言，并在次年将之开源。</p>
<h2 id="Kotlin-的特点"><a href="#Kotlin-的特点" class="headerlink" title="Kotlin 的特点"></a>Kotlin 的特点</h2><p>Kotlin 是一个基于 JVM 的编程语言，与 Java 有很深的渊源。它能与 Java 100% 互通，具备诸多 Java 尚不支持的新特性。Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript ，方便在没有 JVM 的设备上运行，可用于移动端以及 Web 开发，是一种全栈式开发语言。</p>
<h2 id="Java-to-Kotlin"><a href="#Java-to-Kotlin" class="headerlink" title="Java to Kotlin"></a>Java to Kotlin</h2><p>下面是 Java to Kotlin 主要语法，以便于你快速认识 Kotlin 这门语言。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String lan = <span class="string">"Hello Kotlin"</span>;</div><div class="line"></div><div class="line"><span class="keyword">final</span> String lan = <span class="string">"Hello Kotlin"</span>;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lan = <span class="string">"Hello Kotlin"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> lan = <span class="string">"Hello Kotlin"</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.out.print(<span class="string">"Hello Kotlin"</span>);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"Hello Kotlin"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Hello Kotlin"</span>);</div><div class="line"></div><div class="line">println(<span class="string">"Hello Kotlin"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String name = <span class="string">"haohao"</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> age = <span class="number">25</span>;</div><div class="line"></div><div class="line">String msg = <span class="string">"I am "</span> + name + <span class="string">", "</span> + age + <span class="string">" years old."</span>;</div><div class="line"></div><div class="line">String text = <span class="string">"Hello Kotlin\n"</span> +</div><div class="line">              <span class="string">"Hello Android\n"</span> +</div><div class="line">              <span class="string">"Hello TensorFlow"</span>;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"haohao"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> age = <span class="number">25</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> msg = <span class="string">"I am <span class="subst">$name</span> , <span class="subst">$age</span> years old."</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> text = <span class="string">"""</span></div><div class="line">    |Hello Kotlin    </div><div class="line">    |Hello Android</div><div class="line">    |Hello TensorFlow</div><div class="line">    """.trimMargin()</div><div class="line"><span class="comment">// trimMargin() 去除连接符 `|`</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="空声明"><a href="#空声明" class="headerlink" title="空声明"></a>空声明</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String name = <span class="keyword">null</span>;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name: String? = <span class="literal">null</span> <span class="comment">// `?` 声明变量可为 null</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> len = name.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name?.let&#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> len = name.length</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String y = x &gt; <span class="number">6</span> ? <span class="string">"x &gt; 6"</span> : <span class="string">"x &lt;= 6"</span>;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = <span class="keyword">if</span> (x &gt; <span class="number">6</span>)</div><div class="line">            <span class="string">"x &gt; 6"</span></div><div class="line">        <span class="keyword">else</span> <span class="string">"x &lt;= 6"</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="类型判断及转换"><a href="#类型判断及转换" class="headerlink" title="类型判断及转换"></a>类型判断及转换</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</div><div class="line"></div><div class="line">    Person p = (Person) obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> p = obj <span class="comment">//智能转换</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (value &gt;= <span class="number">0</span> &amp;&amp; value &lt;= <span class="number">100</span>) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span> ; i++) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span> ; i++) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &gt;= <span class="number">0</span> ; i--) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span> ; i+=<span class="number">2</span>) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &gt;= <span class="number">0</span> ; i-=<span class="number">2</span>) &#123;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (value <span class="keyword">is</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> ) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">100</span>) &#123;&#125; <span class="comment">// 半开区间：不包含 100</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">100</span> downTo <span class="number">0</span>) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> step <span class="number">2</span>) &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">100</span> donwTo <span class="number">1</span> step <span class="number">2</span>) &#123;&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="list-和-map-针对-Java-8-之前版本"><a href="#list-和-map-针对-Java-8-之前版本" class="headerlink" title="list 和 map ( 针对 Java 8 之前版本 )"></a>list 和 map ( 针对 Java 8 之前版本 )</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Integer value : list) &#123;</div><div class="line"></div><div class="line">   System.out.println(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">map.put(<span class="number">1</span>, <span class="string">"Java"</span>);</div><div class="line"></div><div class="line">map.put(<span class="number">2</span>, <span class="string">"Kotlin"</span>);</div><div class="line"></div><div class="line">map.put(<span class="number">3</span>, <span class="string">"iOS"</span>);</div><div class="line"></div><div class="line">map.put(<span class="number">4</span>, <span class="string">"React Native"</span>);</div><div class="line"></div><div class="line"></div><div class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line"></div><div class="line">    Map.Entry&lt;Integer, String&gt; entry = iterator.next();</div><div class="line"></div><div class="line">    System.out.println(entry.getKey() + <span class="string">" , "</span> + entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line"></div><div class="line">list.forEach &#123;</div><div class="line"></div><div class="line">   println(it)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> map = mapOf(<span class="number">1</span> to <span class="string">"Java"</span>, <span class="number">2</span> to <span class="string">"Kotlin"</span>, <span class="number">3</span> to <span class="string">"iOS"</span>, <span class="number">4</span> to <span class="string">"React Native"</span>)</div><div class="line"></div><div class="line">map.forEach &#123; key, value -&gt;</div><div class="line"></div><div class="line">    println(<span class="string">"<span class="subst">$key</span>, <span class="subst">$value</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123;</div><div class="line"></div><div class="line">    println(<span class="string">"<span class="subst">$key</span>, <span class="subst">$value</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="开关语句"><a href="#开关语句" class="headerlink" title="开关语句"></a>开关语句</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> score = <span class="comment">// some score;</span></div><div class="line">String result;</div><div class="line"><span class="keyword">switch</span> (score) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">		grade = <span class="string">"Excellent"</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">		grade = <span class="string">"Good"</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">		grade = <span class="string">"Ok"</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">		grade = <span class="string">"Fail"</span>;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">	    grade = <span class="string">"Fail"</span>;				</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> score = <span class="comment">// some score</span></div><div class="line"><span class="keyword">var</span> grade = <span class="keyword">when</span> (score) &#123;</div><div class="line"></div><div class="line">	<span class="number">9</span>, <span class="number">10</span> -&gt; <span class="string">"Excellent"</span> </div><div class="line"></div><div class="line">	<span class="keyword">in</span> <span class="number">6.</span><span class="number">.8</span> -&gt; <span class="string">"Good"</span></div><div class="line"></div><div class="line">	<span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">"Ok"</span></div><div class="line"></div><div class="line">	<span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span> -&gt; <span class="string">"Fail"</span></div><div class="line"></div><div class="line">	<span class="keyword">else</span> -&gt; <span class="string">"Fail"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"Android"</span>, <span class="string">"Kotlin"</span>, <span class="string">"iOS"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++ ) &#123;</div><div class="line"></div><div class="line">    list.set(i, <span class="string">"Hello "</span> + list.get(i));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!list.get(i).contains(<span class="string">"c"</span>)) &#123;</div><div class="line"></div><div class="line">        System.out.println(list.get(i));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    Hello java</span></div><div class="line"><span class="comment">//    Hello Android</span></div><div class="line"><span class="comment">//    Hello Kotlin</span></div><div class="line"><span class="comment">//    Hello iOS</span></div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = arrayOf(<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"Android"</span>, <span class="string">"Kotlin"</span>, <span class="string">"iOS"</span>)</div><div class="line"></div><div class="line">list.map &#123;</div><div class="line"></div><div class="line">    <span class="string">"Hello <span class="subst">$it</span>"</span></div><div class="line"></div><div class="line">&#125;.filter &#123;</div><div class="line"></div><div class="line">    !it.contains(<span class="string">"c"</span>)</div><div class="line"></div><div class="line">&#125;.forEach &#123;</div><div class="line"></div><div class="line">    println(it)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    Hello java</span></div><div class="line"><span class="comment">//    Hello Android</span></div><div class="line"><span class="comment">//    Hello Kotlin</span></div><div class="line"><span class="comment">//    Hello iOS</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> * value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> * value</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="number">1</span> * value</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">25</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">25</span></div><div class="line">    </div><div class="line">    <span class="keyword">constructor</span> (name: String, age: <span class="built_in">Int</span>): <span class="keyword">this</span>() &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">        <span class="keyword">this</span>.age = age</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="静态方法（-伴生对象-）"><a href="#静态方法（-伴生对象-）" class="headerlink" title="静态方法（ 伴生对象 ）"></a>静态方法（ 伴生对象 ）</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Manager <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Manager();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getInstance</span><span class="params">()</span></span>: Manager = Manager()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        Person person = (Person) o;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (age != person.age) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(person.name) : person.name == <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</div><div class="line">        result = <span class="number">31</span> * result + age;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"haohao"</span>, <span class="number">25</span>);</div><div class="line"></div><div class="line">String name = p.getName();</div><div class="line"></div><div class="line">String age = p.getAge();</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = Person(<span class="string">"name"</span>, <span class="number">25</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (name, age) = p</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Readable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getContent</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Readable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Kotlin 接口中可以设置抽象和非抽象方法,可以有属性但必须声明为抽象或提供访问器实现。</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Readable</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getContent</span><span class="params">()</span></span>: String</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getVersion</span><span class="params">()</span></span>: <span class="built_in">Int</span> = <span class="number">0</span> </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(): Readable &#123;</div><div class="line"></div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getContent</span><span class="params">()</span></span>: String = <span class="string">"Hello"</span></div><div class="line">   </div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getVersion</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getVersion()</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String name = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayGood</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Good"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String school = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String school)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.school = school;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.sayHello();</div><div class="line">        System.out.println(<span class="string">"Hello Student"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">private</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">()</span></span> = println(<span class="string">"Hello"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sayGood</span><span class="params">()</span></span> = println(<span class="string">"Good"</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">private</span> <span class="keyword">var</span> school: String? = <span class="literal">null</span>, name: String): Person(name) &#123;</div><div class="line">    </div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.sayHello()</div><div class="line">       println(<span class="string">"Hello Student"</span>)</div><div class="line">   &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="静态与非静态内部类"><a href="#静态与非静态内部类" class="headerlink" title="静态与非静态内部类"></a>静态与非静态内部类</h3><p><strong>Java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bar = <span class="number">100</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Nester</span> </span>&#123;</div><div class="line">         </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Hello Kotlin!"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> bar; <span class="comment">// 可以访问外部类成员</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">System.out.println(<span class="keyword">new</span> Outer.Nester().foo()); </div><div class="line"></div><div class="line"><span class="comment">// System.out.println(new Outer().Inner().foo()); 不能在其他类中实例化非静态内部类</span></div></pre></td></tr></table></figure>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bar: <span class="built_in">Int</span> = <span class="number">100</span></div><div class="line"></div><div class="line">    <span class="comment">// 嵌套类</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Nester</span> </span>&#123;</div><div class="line">        <span class="comment">// 不能访问外部类成员</span></div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = <span class="string">"Hello Kotlin!"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 内部类</span></div><div class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">        <span class="comment">// 可以访问外部类成员</span></div><div class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">println(Outer.Nested().foo())</div><div class="line"></div><div class="line">println(Outer().Inner().foo())</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">   </div><div class="line">    <span class="meta">@override</span></div><div class="line">    onClick(View view)&#123;</div><div class="line">        <span class="comment">// to do something.</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>()&#123;</div><div class="line">    <span class="keyword">var</span> listener: OnClickListener? = <span class="literal">null</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setOnClickListener</span><span class="params">(listener: <span class="type">OnClickListener</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">this</span>.listener = listener</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">view.setOnClickListener(<span class="keyword">object</span> : OnClickListener&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span> &#123;</div><div class="line">        TODO(<span class="string">"not implemented"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 类不能直接进行扩展</span></div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一般扩展</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = println(<span class="string">"member"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> MyClass.<span class="title">bar</span><span class="params">()</span></span> = println(<span class="string">"extension"</span>)</div><div class="line"></div><div class="line">MyClass().bar()</div><div class="line"></div><div class="line"><span class="comment">//输出： extension</span></div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 扩展函数与成员函数相同</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = println(<span class="string">"member"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> MyClass.<span class="title">foo</span><span class="params">()</span></span> = println(<span class="string">"extension"</span>) <span class="comment">// 扩展函数与成员函数相同时, 成员函数优先</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> MyClass.<span class="title">foo</span><span class="params">(para: <span class="type">Int</span>)</span></span> = println(<span class="string">"extension"</span>)</div><div class="line"></div><div class="line">MyClass().foo()</div><div class="line"></div><div class="line">MyClass().foo(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">//输出： </span></div><div class="line"><span class="comment">//     member</span></div><div class="line"><span class="comment">//     extension</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Kotlin-Call-Java"><a href="#Kotlin-Call-Java" class="headerlink" title="Kotlin Call Java"></a>Kotlin Call Java</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"name : "</span> + name + <span class="string">", age : "</span> + age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = Person()</div><div class="line">p.name = <span class="string">"haohao"</span></div><div class="line">p.age = <span class="number">25</span></div><div class="line"></div><div class="line">println(p.toString())</div><div class="line"></div><div class="line"><span class="comment">// name : haohao, age : 25</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Java-Call-Kotlin"><a href="#Java-Call-Kotlin" class="headerlink" title="Java Call Kotlin"></a>Java Call Kotlin</h3><p><strong>Kotlin</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Example.kt</span></div><div class="line"><span class="keyword">package</span> demo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> demo.MyClass();</div><div class="line"></div><div class="line">demo.ExampleKt.func();</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T item;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(T item)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.item = item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getItem</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> item;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Wrapper&lt;String&gt; wrapper = <span class="keyword">new</span> Wrapper&lt;&gt;(<span class="string">"Hello Kotlin"</span>);</div><div class="line">System.out.println(wrapper.getItem());</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> item: T)</div><div class="line"></div><div class="line"><span class="keyword">var</span> wrapper = Wrapper(<span class="string">"Hello Kotlin"</span>)</div><div class="line">println(wrapper.item)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="匿名函数-Lambda-表达式"><a href="#匿名函数-Lambda-表达式" class="headerlink" title="匿名函数 ( Lambda 表达式 )"></a>匿名函数 ( Lambda 表达式 )</h3><p><strong>Java (Java 8)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Hello Kotlin"</span>);</div><div class="line">    </div><div class="line">&#125;).start();</div><div class="line"></div><div class="line"><span class="comment">// 同下</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">        System.out.println(<span class="string">"Hello Kotlin"</span>);</div><div class="line">	</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Thread(Runnable &#123;</div><div class="line"></div><div class="line">    println(<span class="string">"Hello Kotlin"</span>)</div><div class="line">    </div><div class="line">&#125;).start()</div><div class="line"></div><div class="line"><span class="comment">// Kotlin Lambda 表达式语法</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> sum = &#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; x + y &#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> sum1: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123;x, y -&gt; x + y &#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> sum2 = <span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line">println(sum(<span class="number">2</span>,<span class="number">8</span>))</div><div class="line"></div><div class="line">println(sum1(<span class="number">2</span>,<span class="number">8</span>))</div><div class="line"></div><div class="line">println(sum2(<span class="number">2</span>,<span class="number">8</span>))</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    10</span></div><div class="line"><span class="comment">//    10</span></div><div class="line"><span class="comment">//    10</span></div><div class="line"><span class="comment">//    Hello Kotlin</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Kotlin-高阶函数"><a href="#Kotlin-高阶函数" class="headerlink" title="Kotlin 高阶函数"></a>Kotlin 高阶函数</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 不能直接实现高阶函数</span></div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 高阶函数，即一个函数可作为高阶函数的参数</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">superFunc</span><span class="params">(desc: <span class="type">String</span>?, method: ()</span></span> -&gt; String) &#123;</div><div class="line">    print(desc)</div><div class="line">    println(method())</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">argFun</span><span class="params">()</span></span> = <span class="string">"我是高阶函数的参数"</span></div><div class="line"></div><div class="line"><span class="comment">//使用高阶函数</span></div><div class="line"></div><div class="line">superFunc(<span class="string">"这是一个高阶函数 "</span>, ::argFun)</div><div class="line"></div><div class="line">superFunc(<span class="string">"这是一个高阶函数 "</span>, &#123; argFun() &#125;)</div><div class="line"></div><div class="line">superFunc(<span class="string">"这是一个高阶函数 "</span>) &#123; argFun() &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    这是一个高阶函数 我是高阶函数的参数</span></div><div class="line"><span class="comment">//    这是一个高阶函数 我是高阶函数的参数</span></div><div class="line"><span class="comment">//    这是一个高阶函数 我是高阶函数的参数</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="简单异步"><a href="#简单异步" class="headerlink" title="简单异步"></a>简单异步</h3><p><strong>Java (Java 8)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line"></div><div class="line">    data = DataSource.obtain(); <span class="comment">//耗时操作</span></div><div class="line">    </div><div class="line">    runOnUiThread(() -&gt; &#123;</div><div class="line">        </div><div class="line">	view.load(data); <span class="comment">//更新 UI   </span></div><div class="line">	</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p><strong>Kotlin (Kotlin Anko)</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">async &#123;</div><div class="line"></div><div class="line">    <span class="keyword">data</span> = DataSource.obtain(); <span class="comment">//耗时操作</span></div><div class="line">    </div><div class="line">    uiThread &#123;</div><div class="line">        view.load(<span class="keyword">data</span>); <span class="comment">//更新 UI</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java 不能单独实现泛型函数</span></div></pre></td></tr></table></figure></p>
<p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">singletonList</span><span class="params">(item: <span class="type">T</span>)</span></span>: List&lt;T&gt; &#123;</div><div class="line">    <span class="keyword">return</span> arrayListOf(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> list = singletonList&lt;String&gt;(<span class="string">"kotlin"</span>)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Kotlin-内联具体化"><a href="#Kotlin-内联具体化" class="headerlink" title="Kotlin 内联具体化"></a>Kotlin 内联具体化</h3><p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T ： Activity&gt;</span> Activity.<span class="title">gotoActivity</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, T::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    <span class="keyword">this</span>.startActivity(intent)</div><div class="line">&#125;</div><div class="line"></div><div class="line">gotoActivity&lt;NewActivity&gt;()</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Kotlin-lazy-懒加载"><a href="#Kotlin-lazy-懒加载" class="headerlink" title="Kotlin lazy 懒加载"></a>Kotlin lazy 懒加载</h3><p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;</div><div class="line">    println(<span class="string">"init"</span>)  <span class="comment">//第一次使用时才被初始化 </span></div><div class="line">    <span class="string">"Hello Kotlin"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(lazyValue)</div><div class="line">    println(lazyValue)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    init</span></div><div class="line"><span class="comment">//    Hello Kotlin</span></div><div class="line"><span class="comment">//    Hello Kotlin</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Kotlin-observable-观察者"><a href="#Kotlin-observable-观察者" class="headerlink" title="Kotlin observable 观察者"></a>Kotlin observable 观察者</h3><p><strong>Kotlin</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: String <span class="keyword">by</span> Delegates.observable(<span class="string">"init .. "</span>)&#123;</div><div class="line">        property,oldValue,newValue -&gt; println(<span class="string">"property : <span class="subst">$property</span>, oldValue : <span class="subst">$oldValue</span>, newValue : <span class="subst">$newValue</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> person = Person()</div><div class="line"></div><div class="line">    println(person.name)</div><div class="line"></div><div class="line">    person.name = <span class="string">"haohao"</span></div><div class="line">    person.name = <span class="string">"nannan"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="comment">//    init .. </span></div><div class="line"><span class="comment">//    property : var Person.name: kotlin.String, oldValue : init .. , newValue : haohao</span></div><div class="line"><span class="comment">//    property : var Person.name: kotlin.String, oldValue : haohao, newValue : nannan</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h3>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.piimg.com/588795/9c8514f7c56bb889.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;时刻对新事物保持好奇心&lt;/p&gt;

&lt;blockq
    
    </summary>
    
      <category term="Kotlin" scheme="https://githubhaohao.github.io/categories/Kotlin/"/>
    
    
      <category term="Java to Kotlin" scheme="https://githubhaohao.github.io/tags/Java-to-Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式之外观模式</title>
    <link href="https://githubhaohao.github.io/2017/05/15/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://githubhaohao.github.io/2017/05/15/Android-设计模式之外观模式/</id>
    <published>2017-05-15T02:05:07.000Z</published>
    <updated>2017-05-15T03:18:15.488Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.piimg.com/588795/f87081d597c610a1.jpg" alt="Markdown"></p>

<p align="center">打造个人品牌是现代职业规划的趋势</p>

<blockquote>
<p>在当下互联网革命的时代，有这样一种说法，如果一个人到三十岁以后还是只有工资收入，那么它的职业规划是失败的。<br>本文是 Android 设计模式的第三篇，接下来会陆续推出整个常用的设计模式系列。</p>
</blockquote>
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>外观模式 (Facade Pattern) ，又名门面模式，归类为对象结构型模式，外部对象与一个子系统通信必须通过一个统一的外观对象进行。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Client 外部对象</li>
<li>Facade 外观对象</li>
<li>SubSystem 子系统对象</li>
</ul>
<p align="center"><img src="https://github.com/simple-android-framework/android_design_patterns_analysis/raw/master/facade/elsdnwn/images/facade.png" alt="Markdown"></p><br><p align="center">盗图</p>

<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><blockquote>
<p>电视遥控器是现实生活中一个比较好的外观模式的运用，遥控器可以控制电源 (Power) 的电源、声音 (Voice) 的调整、频道 (Channel) 的切换等。这个遥控器就是我们这里说的外观或者门面，而电源、声音、频道切换系统就是我们的子系统。</p>
</blockquote>
<h4 id="PowerSystem"><a href="#PowerSystem" class="headerlink" title="PowerSystem"></a>PowerSystem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerSystem</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"power on"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"power off"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="VoiceSystem"><a href="#VoiceSystem" class="headerlink" title="VoiceSystem"></a>VoiceSystem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoiceSystem</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"voice increasing"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"voice reducing"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ChannelSystem"><a href="#ChannelSystem" class="headerlink" title="ChannelSystem"></a>ChannelSystem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelSystem</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"next channel"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"prev channel"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> PowerSystem mPowerSystem = <span class="keyword">new</span> PowerSystem();</div><div class="line">    <span class="keyword">private</span> VoiceSystem mVoiceSystem = <span class="keyword">new</span> VoiceSystem();</div><div class="line">    <span class="keyword">private</span> ChannelSystem mChannelSystem = <span class="keyword">new</span> ChannelSystem();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPowerSystem.powerOn();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPowerSystem.powerOff();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        mVoiceSystem.turnUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        mVoiceSystem.turnDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        mChannelSystem.next();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        mChannelSystem.prev();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Facade facade = <span class="keyword">new</span> Facade();</div><div class="line">    facade.powerOn();</div><div class="line">    facade.turnUp();</div><div class="line">    facade.nextChannel();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h4><blockquote>
<p>power on</p>
<p>voice increasing</p>
<p>next channel</p>
</blockquote>
<h3 id="Android-中的实现"><a href="#Android-中的实现" class="headerlink" title="Android 中的实现"></a>Android 中的实现</h3><p>在 Activity 中可以进行很多重要的操作，如 startService() ，startActivity() ，sendBroadcast() ，bindService() 以及获取 System Service 。Activity 就可以简单地看作一个门面，但是这些工作实际上并不是 Activity 来实现的，而是委托 Activity 父类 ContextThemeWrapper 中的 mBase 对象，mBase 对象的实现类是 ContextImpl 。</p>
<p>看一下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextImpl</span> <span class="keyword">extends</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"ApplicationContext"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> DEBUG_ICONS = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sSync = <span class="keyword">new</span> Object();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AlarmManager sAlarmManager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PowerManager sPowerManager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectivityManager sConnectivityManager;</div><div class="line">    <span class="keyword">private</span> AudioManager mAudioManager;</div><div class="line">    LoadedApk mPackageInfo;</div><div class="line">    <span class="keyword">private</span> Resources mResources;</div><div class="line">    <span class="keyword">private</span> PackageManager mPackageManager;</div><div class="line">    <span class="keyword">private</span> NotificationManager mNotificationManager = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> ActivityManager mActivityManager = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">	...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></div><div class="line">            <span class="keyword">int</span> flags) &#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line">        <span class="keyword">return</span> bindServiceCommon(service, conn, flags, mMainThread.getHandler(),</div><div class="line">                Process.myUserHandle());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SystemServiceRegistry.getSystemService(<span class="keyword">this</span>, name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSystemServiceName</span><span class="params">(Class&lt;?&gt; serviceClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SystemServiceRegistry.getSystemServiceName(serviceClass);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ActivityManagerNative.getDefault().broadcastIntent(</div><div class="line">                mMainThread.getApplicationThread(), intent, resolvedType, <span class="keyword">null</span>,</div><div class="line">                Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</div><div class="line">                    <span class="string">"Calling startActivity() from outside of an Activity "</span></div><div class="line">                    + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></div><div class="line">                    + <span class="string">" Is this really what you want?"</span>);</div><div class="line">        &#125;</div><div class="line">        mMainThread.getInstrumentation().execStartActivity(</div><div class="line">            getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>, <span class="keyword">null</span>, intent, -<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ComponentName cn = ActivityManagerNative.getDefault().startService(</div><div class="line">                mMainThread.getApplicationThread(), service,</div><div class="line">                service.resolveTypeIfNeeded(getContentResolver()));</div><div class="line">            <span class="keyword">if</span> (cn != <span class="keyword">null</span> &amp;&amp; cn.getPackageName().equals(<span class="string">"!"</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</div><div class="line">                        <span class="string">"Not allowed to start service "</span> + service</div><div class="line">                        + <span class="string">" without permission "</span> + cn.getClassName());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> cn;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mPackageInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> mPackageInfo.getPackageName();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not supported in system context"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ContextImpl 内部有很多 Manager 类的对象，也就是也就是子系统对象。 ContextImpl 内部封装了一些系统级别的操作以及提供了一些访问系统的接口，我们在开发过程中可以很方便地利用其访问子系统。</p>
<h3 id="外观模式的优点与缺点"><a href="#外观模式的优点与缺点" class="headerlink" title="外观模式的优点与缺点"></a>外观模式的优点与缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>屏蔽了子系统内部细节，使子系统的使用更见便利</li>
<li>减少客户端所持对象的数目，降低了客户端与子系统的耦合度<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4></li>
<li>增加新的子系统可能需要修改外观类，违背了“开闭原则”</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://github.com/simple-android-framework/android_design_patterns_analysis/tree/master/facade/elsdnwn" target="_blank" rel="external">https://github.com/simple-android-framework/android_design_patterns_analysis/tree/master/facade/elsdnwn</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.piimg.com/588795/f87081d597c610a1.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;打造个人品牌是现代职业规划的趋势&lt;/p&gt;

&lt;b
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="设计模式" scheme="https://githubhaohao.github.io/categories/Android/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="外观模式" scheme="https://githubhaohao.github.io/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式之 Builder 模式</title>
    <link href="https://githubhaohao.github.io/2017/05/13/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-Builder-%E6%A8%A1%E5%BC%8F/"/>
    <id>https://githubhaohao.github.io/2017/05/13/Android-设计模式之-Builder-模式/</id>
    <published>2017-05-13T05:28:00.000Z</published>
    <updated>2017-05-13T08:56:06.815Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.piimg.com/588795/85663beb3ea340b0.jpg" alt="Markdown"></p>

<p align="center">平坦的路往往只能带你到平凡的地方</p>

<blockquote>
<p>最近在研究 Clean 和 Unidirectional （ Android Flux ）架构，回头放一个大招。<br>本文是 Android 设计模式的第二篇，接下来会陆续推出整个常用的设计模式系列。</p>
</blockquote>
<h2 id="Builder-模式"><a href="#Builder-模式" class="headerlink" title="Builder 模式"></a>Builder 模式</h2><p>Builder 又名生成器模式，或建造（者）模式。它是一种对象构建模式，用于抽象复杂对象的构建过程，构造过程的不同实现方法可以构建出具有不同表示的对象。</p>
<blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Product 产品，表示被构造的复杂对象。</li>
<li>Builder 抽象构建者，为创建一个 Product 对象的各个部件指定抽象方法（接口方法）。</li>
<li>ConcreteBuilder 具体构建者，实现 Builder 接口（抽象类）以及各个抽象方法。</li>
<li>Director 指挥者，构建实现（继承） Builder 接口（抽象类）的对象。</li>
</ul>
<p align="center"><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/Builder.jpg" alt=""><br></p><br><p align="center">盗图</p>

<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><p>我们以生产手机为例，当我们拿到一个手机产品通常比较关注它的品牌 (Brand) ，CPU 核心数目 (CPU Core)，运行内存 (RAM) 以及操作系统 (OS)。</p>
<h4 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCPUCore = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRam = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> String mOS = <span class="string">"Android"</span>;</div><div class="line">    <span class="keyword">private</span> String mBrand = <span class="string">"Google"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCPUCore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mCPUCore;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOS</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mOS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBrand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCPUCore</span><span class="params">(<span class="keyword">int</span> mCPUCore)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mCPUCore = mCPUCore;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRAM</span><span class="params">(<span class="keyword">int</span> mRam)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mRam = mRam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOS</span><span class="params">(String mOS)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mOS = mOS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String mBrand)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mBrand = mBrand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Brand : "</span> + getBrand() +<span class="string">", CPUCore : "</span> + getCPUCore() +</div><div class="line">                <span class="string">", RAM : "</span> + getRAM() + <span class="string">", OS : "</span> + getOS();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Builder-抽象类"><a href="#Builder-抽象类" class="headerlink" title="Builder 抽象类"></a>Builder 抽象类</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public abstract class PhoneBuilder &#123;</div><div class="line">    protected Phone mPhone;</div><div class="line">    public void createPhone() &#123;</div><div class="line">        mPhone = new Phone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Phone getPhone() &#123;</div><div class="line">        return mPhone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void buildPhoneCpu();</div><div class="line"></div><div class="line">    public abstract void buildPhoneRam();</div><div class="line"></div><div class="line">    public abstract void buildPhoneOS();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">#### ConcreteBuilder</div><div class="line">XiaoMiPhoneBuilder</div><div class="line">```java</div><div class="line">public class XiaoMiPhoneBuilder extends PhoneBuilder &#123;</div><div class="line"></div><div class="line">    public XiaoMiPhoneBuilder() &#123;</div><div class="line">        createPhone();</div><div class="line">        mPhone.setBrand("XiaoMi");</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildPhoneCpu() &#123;</div><div class="line">        mPhone.setCPUCore(4);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildPhoneRam() &#123;</div><div class="line">        mPhone.setRAM(4);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildPhoneOS() &#123;</div><div class="line">        mPhone.setOS("MIUI Android");</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GooglePhoneBuilder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GooglePhoneBuilder</span> <span class="keyword">extends</span> <span class="title">PhoneBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GooglePhoneBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        createPhone();</div><div class="line">        mPhone.setBrand(<span class="string">"Google"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPhoneCpu</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPhone.setCPUCore(<span class="number">8</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPhoneRam</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPhone.setRAM(<span class="number">6</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPhoneOS</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPhone.setOS(<span class="string">"Android"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Director"><a href="#Director" class="headerlink" title="Director"></a>Director</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDirector</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> PhoneBuilder mPhoneBuilder;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PhoneDirector <span class="title">setPhoneBuilder</span><span class="params">(PhoneBuilder phoneBuilder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mPhoneBuilder = phoneBuilder;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mPhoneBuilder.getPhone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PhoneDirector <span class="title">constructPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPhoneBuilder.buildPhoneCpu();</div><div class="line">        mPhoneBuilder.buildPhoneOS();</div><div class="line">        mPhoneBuilder.buildPhoneRam();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderSample</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PhoneDirector phoneDirector = <span class="keyword">new</span> PhoneDirector();</div><div class="line"></div><div class="line">        PhoneBuilder xiaomiphoneBuilder = <span class="keyword">new</span> XiaoMiPhoneBuilder();</div><div class="line">        PhoneBuilder googlePhoneBuilder = <span class="keyword">new</span> GooglePhoneBuilder();</div><div class="line"></div><div class="line"></div><div class="line">        Phone xiaoMiPhone = phoneDirector.setPhoneBuilder(xiaomiphoneBuilder)</div><div class="line">                .constructPhone()</div><div class="line">                .getPhone();</div><div class="line"></div><div class="line">        Phone googlePhone = phoneDirector.setPhoneBuilder(googlePhoneBuilder)</div><div class="line">                .constructPhone()</div><div class="line">                .getPhone();</div><div class="line">        System.out.println(xiaoMiPhone + <span class="string">"\n"</span> + googlePhone);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Running</p>
<blockquote>
<p>Brand : XiaoMi, CPUCore : 4, RAM : 4, OS : MIUI Android</p>
<p>Brand : Google, CPUCore : 8, RAM : 6, OS : Android</p>
</blockquote>
<h3 id="Android-中的实现"><a href="#Android-中的实现" class="headerlink" title="Android 中的实现"></a>Android 中的实现</h3><p>在 Android 开发中我们最常用到的实现 Builder 的类是 AlertDialog.Builder ，Builder 是AlertDialog 的静态内部类。基本用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</div><div class="line">builder.setIcon(R.drawable.icon);</div><div class="line">builder.setTitle(<span class="string">"Title"</span>);</div><div class="line">builder.setMessage(<span class="string">"Message"</span>);</div><div class="line">builder.setPositiveButton(<span class="string">"OK"</span>,</div><div class="line">        <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> whichButton)</span> </span>&#123;</div><div class="line">                setTitle(<span class="string">"点击了对话框上的 OK 按钮"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">builder.setNeutralButton(<span class="string">"Nothing"</span>,</div><div class="line">        <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> whichButton)</span> </span>&#123;</div><div class="line">                setTitle(<span class="string">"点击了对话框上的 Nothing 按钮"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">builder.setNegativeButton(<span class="string">"Cancel"</span>,</div><div class="line">        <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> whichButton)</span> </span>&#123;</div><div class="line">                setTitle(<span class="string">"点击了对话框上的 Cancel 按钮"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">builder.create().show();</div></pre></td></tr></table></figure>
<p>我们看一下简化后的 AlertDialog 源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlertDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">DialogInterface</span> </span>&#123;</div><div class="line">    <span class="comment">// Controller, 接受 Builder 成员变量P中的各个参数</span></div><div class="line">    <span class="keyword">private</span> AlertController mAlert;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AlertDialog</span><span class="params">(Context context, <span class="keyword">int</span> theme)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, theme, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 构造 AlertDialog</span></div><div class="line">    AlertDialog(Context context, <span class="keyword">int</span> theme, <span class="keyword">boolean</span> createContextWrapper) &#123;</div><div class="line">        <span class="keyword">super</span>(context, resolveDialogTheme(context, theme), createContextWrapper);</div><div class="line">        mWindow.alwaysReadCloseOnTouchAttr();</div><div class="line">        mAlert = <span class="keyword">new</span> AlertController(getContext(), <span class="keyword">this</span>, getWindow());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(CharSequence title)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setTitle(title);</div><div class="line">        mAlert.setTitle(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomTitle</span><span class="params">(View customTitleView)</span> </span>&#123;</div><div class="line">        mAlert.setCustomTitle(customTitleView);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(CharSequence message)</span> </span>&#123;</div><div class="line">        mAlert.setMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    </div><div class="line">   <span class="comment">// Builder内部类</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="comment">// 存储 AlertDialog 的各个参数, 例如 title ， message ， icon 等.</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AlertController.AlertParams P;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(context, resolveDialogTheme(context, <span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context, <span class="keyword">int</span> theme)</span> </span>&#123;</div><div class="line">            P = <span class="keyword">new</span> AlertController.AlertParams(<span class="keyword">new</span> ContextThemeWrapper(</div><div class="line">                    context, resolveDialogTheme(context, theme)));</div><div class="line">            mTheme = theme;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTitle</span><span class="params">(CharSequence title)</span> </span>&#123;</div><div class="line">            P.mTitle = title;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMessage</span><span class="params">(CharSequence message)</span> </span>&#123;</div><div class="line">            P.mMessage = message;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setIcon</span><span class="params">(<span class="keyword">int</span> iconId)</span> </span>&#123;</div><div class="line">            P.mIconId = iconId;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setPositiveButton</span><span class="params">(CharSequence text, <span class="keyword">final</span> OnClickListener listener)</span> </span>&#123;</div><div class="line">            P.mPositiveButtonText = text;</div><div class="line">            P.mPositiveButtonListener = listener;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            P.mView = view;</div><div class="line">            P.mViewSpacingSpecified = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 构建 AlertDialog, 传递参数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> AlertDialog <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> AlertDialog dialog = <span class="keyword">new</span> AlertDialog(P.mContext, mTheme, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">            将P中的参数应用的dialog中的mAlert对象中</div><div class="line">            P.apply(dialog.mAlert);</div><div class="line">            dialog.setCancelable(P.mCancelable);</div><div class="line">            <span class="keyword">if</span> (P.mCancelable) &#123;</div><div class="line">                dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">            dialog.setOnCancelListener(P.mOnCancelListener);</div><div class="line">            <span class="keyword">if</span> (P.mOnKeyListener != <span class="keyword">null</span>) &#123;</div><div class="line">                dialog.setOnKeyListener(P.mOnKeyListener);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> dialog;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从源码中可以看到 AlertDialog.Builder 同时扮演了 Builder ， ConcreteBuilder 以及 Director 三个角色，是 Builder 模式的简化版。</p>
<p>我们从 AlertDialog 的构建和使用中，可以体会到运用 Builder 模式带来的简介性和高度的可定制性。</p>
<h3 id="Builder-模式的优点和缺点"><a href="#Builder-模式的优点和缺点" class="headerlink" title="Builder 模式的优点和缺点"></a>Builder 模式的优点和缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>使用简单，可扩展性强，封装良好；</li>
<li>高度的可定制性，构造过程可精细化控制。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>Builder 模式只适用于构建过程复杂的同一类 Product ，此外要考虑多余 Builder 和 Director 对象对内存的占用。 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.piimg.com/588795/85663beb3ea340b0.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;平坦的路往往只能带你到平凡的地方&lt;/p&gt;

&lt;b
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="设计模式" scheme="https://githubhaohao.github.io/categories/Android/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Builder 模式" scheme="https://githubhaohao.github.io/tags/Builder-%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式之单例模式</title>
    <link href="https://githubhaohao.github.io/2017/05/06/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://githubhaohao.github.io/2017/05/06/Android-设计模式之单例模式/</id>
    <published>2017-05-06T05:53:52.000Z</published>
    <updated>2017-05-13T08:09:15.382Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i4.buimg.com/588795/9d67959bff9222b9.jpg" alt="Markdown"></p>

<p align="center">时刻尝试走出舒适区</p>


<blockquote>
<p>最近在培养自己的广泛阅读习惯，感觉阅读中最重要的是动脑思考，阅读是接受讯息，思考是消化讯息。<br>本文是 Android 设计模式的开篇，接下来会陆续推出整个常用的设计模式系列。</p>
</blockquote>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式简而言之就是优秀的代码设计经验的总结。设计模式的产生是为了提高代码的可复用性，可扩展性，可靠性以及可读性。</p>
<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2><ul>
<li>单一职责原则: 一个类只负责一项职责;</li>
<li>里氏替换原则: 子类可以扩展父类的功能，但不能改变父类原有的功能;</li>
<li>依赖倒置原则: 面向接口编程，将依赖对象的共同特征抽象成接口；</li>
<li>接口隔离原则: 一个类不应该实现它不需要的接口方法，即建立单一接口，细化接口，尽量减少接口中的方法;</li>
<li>迪米特法则: 一个对象应该对其他对象保持最少的了解，即降低类与类之间的耦合；</li>
<li>开闭原则: 一个类对扩展开放，对修改关闭。</li>
</ul>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h3><p>设计对象的实例化，避免用户用 new 运算符创建对象。例如单例模式，Builder 模式，原型模式等。</p>
<h3 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h3><p>设计对象之间的通信交互。如观察者模式，迭代器模式，责任链模式等。</p>
<h3 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h3><p>设计如何组合类和对象以形成更大的结构。如适配器模式，代理模式，桥接模式等。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>简单介绍常用的五种单例模式的写法。</p>
<h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> INSTANCE = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：线程安全。<br>缺点：类加载的时候就进行初始化，对于初始化逻辑复杂的类，会导致类加载变慢。</p>
<h3 id="DCL-懒汉式单例"><a href="#DCL-懒汉式单例" class="headerlink" title="(DCL) 懒汉式单例"></a>(DCL) 懒汉式单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> sInstance = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Person.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> Person();</div><div class="line">                  </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：volatile 声明单例引用，可以防止并发时初始化成员变量和对象实例化顺序可能会被打乱，双重校验锁定解决了多余的同步问题。<br>缺点：并发时存在极小的概率导致 DCL 失效，据说是百万分之一。</p>
<h3 id="静态内部类单例"><a href="#静态内部类单例" class="headerlink" title="静态内部类单例"></a>静态内部类单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Person INSTANCE = <span class="keyword">new</span> Person();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Singleton.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：充分结合了懒汉式单例与饿汉式的优点，同时有效避开了它们的缺点，充分保证线程安全。<strong><em>推荐</em></strong><br>缺点：会有的！</p>
<h3 id="枚举型单例"><a href="#枚举型单例" class="headerlink" title="枚举型单例"></a>枚举型单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PersonEnum &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PersonEnum</span><span class="params">()</span> </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PersonEnum.INSTANCE.fun();</div></pre></td></tr></table></figure></p>
<p>优点：简洁，线程安全。<br>《Effective Java》的作者在书中是这样夸枚举型单例：</p>
<blockquote>
<p>这种写法在功能上与共有域方法相近，但是它更简洁，无偿地提供了序列化机制，绝对防止对此实例化，即使是在面对复杂的序列化或者反射攻击的时候。<br>虽然这中方法还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。</p>
</blockquote>
<p>缺点：Google 官方强烈建议尽量不要使用 enum ，它会增加额外的内存占用，同时增加可执行文件 .dex 的大小，也不适用继承场景。</p>
<h3 id="容器型单例"><a href="#容器型单例" class="headerlink" title="容器型单例"></a>容器型单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> KEY_SINGLETON = <span class="string">"singleton"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; sInstanceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerSingleton</span><span class="params">(String key, Object obj)</span> </span>&#123; </div><div class="line">        <span class="keyword">if</span> (!sInstanceMap.containsKey(key)) &#123;</div><div class="line">            sInstanceMap.put(key, obj);     </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getSingleton</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (Person) sInstanceMap.get(key);   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SingletonManager.registerSingleton(KEY_SINGLETON, <span class="keyword">new</span> Person);</div><div class="line">Person person = SingletonManager.getSingleton();</div></pre></td></tr></table></figure></p>
<p>优点：可以将不同单例注册到一个容器中统一管理，隐藏了类的具体实现，降低了耦合度。<strong><em>推荐</em></strong><br>缺点：会有的！</p>
<h2 id="单例模式的优点与缺点"><a href="#单例模式的优点与缺点" class="headerlink" title="单例模式的优点与缺点"></a>单例模式的优点与缺点</h2><p>优点：减少内存开销，避免资源重用。<br>缺点：单例类的扩展性很差，持有外部引用时，非常容易造成内存泄漏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.buimg.com/588795/9d67959bff9222b9.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;时刻尝试走出舒适区&lt;/p&gt;


&lt;blockqu
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="设计模式" scheme="https://githubhaohao.github.io/categories/Android/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="https://githubhaohao.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 进程间通信方式</title>
    <link href="https://githubhaohao.github.io/2017/04/27/Android-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <id>https://githubhaohao.github.io/2017/04/27/Android-进程间通信方式/</id>
    <published>2017-04-27T11:05:29.000Z</published>
    <updated>2017-05-06T09:13:23.781Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i4.buimg.com/588795/ecd70e1824f1dc35.jpg" alt="Markdown"></p>

<p align="center">做好眼前的事，保持专注</p>

<blockquote>
<p>我们的大脑是串行结构，而非并行结构，你永远无法真正将自己的注意力<br>同时放在两个任务之中。</p>
</blockquote>
<h2 id="Android-中的-IPC-方式"><a href="#Android-中的-IPC-方式" class="headerlink" title="Android 中的 IPC 方式"></a>Android 中的 IPC 方式</h2><h3 id="使用-Intent"><a href="#使用-Intent" class="headerlink" title="使用 Intent"></a>使用 Intent</h3><ol>
<li>Activity，Service，Receiver 都支持在 Intent 中传递 Bundle 数据，而 Bundle 实现了 Parcelable 接口，可以在不同的进程间进行传输。</li>
<li>在一个进程中启动了另一个进程的 Acyivity，Service 和 Receiver ，可以在 Bundle 中附加要传递的数据通过 Intent 发送出去。</li>
</ol>
<h3 id="使用文件共享"><a href="#使用文件共享" class="headerlink" title="使用文件共享"></a>使用文件共享</h3><ol>
<li>Windows 上，一个文件如果被加了排斥锁会导致其他线程无法对其进行访问，包括读和写；而 Android 系统基于 Linux ，使得其并发读取文件没有限制地进行，甚至允许两个线程同时对一个文件进行读写操作，尽管这样可能会出问题。</li>
<li>可以在一个进程中序列化一个对象到文件系统中，在另一个进程中反序列化恢复这个对象（<strong>注意</strong>：并不是同一个对象，只是内容相同。）。</li>
<li>SharedPreferences 是个特例，系统对它的读 / 写有一定的缓存策略，即内存中会有一份 ShardPreferences 文件的缓存，系统对他的读 / 写就变得不可靠，当面对高并发的读写访问，SharedPreferences 有很多大的几率丢失数据。因此，IPC 不建议采用 SharedPreferences。</li>
</ol>
<h3 id="使用-Messenger"><a href="#使用-Messenger" class="headerlink" title="使用 Messenger"></a>使用 Messenger</h3><p>Messenger 是一种轻量级的 IPC 方案，它的底层实现是 AIDL ，可以在不同进程中传递 Message 对象，它一次只处理一个请求，在服务端不需要考虑线程同步的问题，服务端不存在并发执行的情形。</p>
<ul>
<li>服务端进程：服务端创建一个 Service 来处理客户端请求，同时通过一个 Handler 对象来实例化一个 Messenger 对象，然后在 Service 的 onBind 中返回这个 Messenger 对象底层的 Binder 即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MessengerService.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * <span class="doctag">@param</span> msg</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> Constants.MSG_FROM_CLIENT:</div><div class="line">                    Log.d(TAG, <span class="string">"receive msg from client: msg = ["</span> + msg.getData().getString(Constants.MSG_KEY) + <span class="string">"]"</span>);</div><div class="line">                    Toast.makeText(MessengerService.<span class="keyword">this</span>, <span class="string">"receive msg from client: msg = ["</span> + msg.getData().getString(Constants.MSG_KEY) + <span class="string">"]"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    Messenger client = msg.replyTo;</div><div class="line">                    Message replyMsg = Message.obtain(<span class="keyword">null</span>, Constants.MSG_FROM_SERVICE);</div><div class="line">                    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                    bundle.putString(Constants.MSG_KEY, <span class="string">"我已经收到你的消息，稍后回复你！"</span>);</div><div class="line">                    replyMsg.setData(bundle);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        client.send(replyMsg);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>客户端进程：首先绑定服务端 Service ，绑定成功之后用服务端的 IBinder 对象创建一个 Messenger ，通过这个 Messenger 就可以向服务端发送消息了，消息类型是 Message 。如果需要服务端响应，则需要创建一个 Handler 并通过它来创建一个 Messenger（和服务端一样），并通过 Message 的 replyTo 参数传递给服务端。服务端通过 Message 的 replyTo 参数就可以回应客户端了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> Messenger mGetReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessageHandler());</div><div class="line">    <span class="keyword">private</span> Messenger mService;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> Constants.MSG_FROM_SERVICE:</div><div class="line">                    Log.d(TAG, <span class="string">"received msg form service: msg = ["</span> + msg.getData().getString(Constants.MSG_KEY) + <span class="string">"]"</span>);</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"received msg form service: msg = ["</span> + msg.getData().getString(Constants.MSG_KEY) + <span class="string">"]"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent mIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(mIntent, mServiceConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain(<span class="keyword">null</span>,Constants.MSG_FROM_CLIENT);</div><div class="line">        Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">        data.putString(Constants.MSG_KEY, <span class="string">"Hello! This is client."</span>);</div><div class="line">        msg.setData(data);</div><div class="line">        msg.replyTo = mGetReplyMessenger;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mService.send(msg);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        unbindService(mServiceConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * <span class="doctag">@param</span> name</div><div class="line">         * <span class="doctag">@param</span> service</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            mService = <span class="keyword">new</span> Messenger(service);</div><div class="line">            Message msg = Message.obtain(<span class="keyword">null</span>,Constants.MSG_FROM_CLIENT);</div><div class="line">            Bundle data = <span class="keyword">new</span> Bundle();</div><div class="line">            data.putString(Constants.MSG_KEY, <span class="string">"Hello! This is client."</span>);</div><div class="line">            msg.setData(data);</div><div class="line">            <span class="comment">//</span></div><div class="line">            msg.replyTo = mGetReplyMessenger;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mService.send(msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * <span class="doctag">@param</span> name</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>客户端和服务端是通过拿到对方的 Messenger 来发送 Message 的。只不过客户端通过   bindService onServiceConnected 而服务端通过 message.replyTo 来获得对方的 Messenger 。Messenger 中有一个 Hanlder 以串行的方式处理队列中的消息。不存在并发执行，因此我们不用考虑线程同步的问题。</p>
<p align="center"><img src="http://i1.piimg.com/588795/e7bed224f80f5dad.png" alt="Markdown"></p><br><p align="center">图片来自《Android 开发艺术探索》</p>

<h3 id="使用-AIDL"><a href="#使用-AIDL" class="headerlink" title="使用 AIDL"></a>使用 AIDL</h3><p>Messenger 是以串行的方式处理客户端发来的消息，如果大量消息同时发送到服务端，服务端只能一个一个处理，所以大量并发请求就不适合用 Messenger ，而且 Messenger 只适合传递消息，不能跨进程调用服务端的方法。AIDL 可以解决并发和跨进程调用方法的问题，要知道 Messenger 本质上也是 AIDL ，只不过系统做了封装方便上层的调用而已。</p>
<h4 id="AIDL-文件支持的数据类型"><a href="#AIDL-文件支持的数据类型" class="headerlink" title="AIDL 文件支持的数据类型"></a>AIDL 文件支持的数据类型</h4><ul>
<li><em>基本数据类型</em>；</li>
<li><p><em>String</em> 和 <em>CharSequence</em><br><img src="http://images.cnitblog.com/blog/497634/201311/08083111-591e2833f8a34264b0dad417f4188e35.jpg" alt="String"></p>
</li>
<li><p><em>ArrayList</em> ，里面的元素必须能够被 AIDL 支持；</p>
</li>
<li><em>HashMap</em> ，里面的元素必须能够被 AIDL 支持；</li>
<li><em>Parcelable</em> ，实现 Parcelable 接口的对象；<br><strong>注意：如果 AIDL 文件中用到了自定义的 Parcelable 对象，必须新建一个和它同名的 AIDL 文件。</strong></li>
<li><em>AIDL</em> ，AIDL 接口本身也可以在 AIDL 文件中使用。</li>
</ul>
<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>服务端创建一个 Service 用来监听客户端的连接请求，然后创建一个 AIDL 文件，将暴露给客户端的接口在这个 AIDL 文件中声明，最后在 Service 中实现这个 AIDL 接口即可。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>绑定服务端的 Service ，绑定成功后，将服务端返回的 Binder 对象转成 AIDL 接口所属的类型，然后就可以调用 AIDL 中的方法了。客户端调用远程服务的方法，被调用的方法运行在服务端的 Binder 线程池中，同时客户端的线程会被挂起，如果服务端方法执行比较耗时，就会导致客户端线程长时间阻塞，导致 ANR 。客户端的 onServiceConnected 和 onServiceDisconnected 方法都在 UI 线程中。</p>
<h4 id="服务端访问权限管理"><a href="#服务端访问权限管理" class="headerlink" title="服务端访问权限管理"></a>服务端访问权限管理</h4><ul>
<li>使用 Permission 验证，在 manifest 中声明</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">"com.jc.ipc.ACCESS_BOOK_SERVICE"</span></span></div><div class="line">    <span class="attr">android:protectionLevel</span>=<span class="string">"normal"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"com.jc.ipc.ACCESS_BOOK_SERVICE"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>服务端 onBinder 方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    <span class="comment">//Permission 权限验证</span></div><div class="line">    <span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.jc.ipc.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">    <span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mBinder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Pid Uid 验证</li>
</ul>
<p>详细代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Book.aidl</span></div><div class="line"><span class="keyword">package</span> com.jc.ipc.aidl;</div><div class="line"></div><div class="line">parcelable Book;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IBookManager.aidl</span></div><div class="line"><span class="keyword">package</span> com.jc.ipc.aidl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jc.ipc.aidl.Book;</div><div class="line"><span class="keyword">import</span> com.jc.ipc.aidl.INewBookArrivedListener;</div><div class="line"></div><div class="line"><span class="comment">// AIDL 接口中只支持方法，不支持静态常量，区别于传统的接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// AIDL 中除了基本数据类型，其他数据类型必须标上方向,in,out 或者 inout</span></div><div class="line">    <span class="comment">// in 表示输入型参数</span></div><div class="line">    <span class="comment">// out 表示输出型参数</span></div><div class="line">    <span class="comment">// inout 表示输入输出型参数</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(INewBookArrivedListener listener)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(INewBookArrivedListener listener)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// INewBookArrivedListener.aidl</span></div><div class="line"><span class="keyword">package</span> com.jc.ipc.aidl;</div><div class="line"><span class="keyword">import</span> com.jc.ipc.aidl.Book;</div><div class="line"></div><div class="line"><span class="comment">// 提醒客户端新书到来</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INewBookArrivedListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(in Book newBook)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BookManagerActivity.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_NEW_BOOK_ARRIVED = <span class="number">0x10</span>;</div><div class="line">    <span class="keyword">private</span> Button getBookListBtn,addBookBtn;</div><div class="line">    <span class="keyword">private</span> TextView displayTextView;</div><div class="line">    <span class="keyword">private</span> IBookManager bookManager;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MSG_NEW_BOOK_ARRIVED:</div><div class="line">                    Log.d(TAG, <span class="string">"handleMessage: new book arrived "</span> + msg.obj);</div><div class="line">                    Toast.makeText(BookManagerActivity.<span class="keyword">this</span>, <span class="string">"new book arrived "</span> + msg.obj, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection mServiceConn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            bookManager = IBookManager.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.registerListener(listener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> INewBookArrivedListener listener = <span class="keyword">new</span> INewBookArrivedListener.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book newBook)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mHandler.obtainMessage(MSG_NEW_BOOK_ARRIVED, newBook).sendToTarget();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.book_manager);</div><div class="line">        displayTextView = (TextView) findViewById(R.id.displayTextView);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</div><div class="line">        bindService(intent, mServiceConn, BIND_AUTO_CREATE);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBookList</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;Book&gt; list = bookManager.getBookList();</div><div class="line">            Log.d(TAG, <span class="string">"getBookList: "</span> + list.toString());</div><div class="line">            displayTextView.setText(list.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bookManager.addBook(<span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">"天龙八部"</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (bookManager != <span class="keyword">null</span> &amp;&amp; bookManager.asBinder().isBinderAlive()) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"unregister listener "</span> + listener);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bookManager.unregisterListener(listener);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        unbindService(mServiceConn);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BookManagerService.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="comment">// CopyOnWriteArrayList 支持并发读写，实现自动线程同步，他不是继承自 ArrayList</span></div><div class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Book&gt;();</div><div class="line">    <span class="comment">//对象是不能跨进程传输的，对象的跨进程传输本质都是反序列化的过程，Binder 会把客户端传递过来的对象重新转化生成一个新的对象</span></div><div class="line">    <span class="comment">//RemoteCallbackList 是系统专门提供的用于删除系统跨进程 listener 的接口，利用底层的 Binder 对象是同一个</span></div><div class="line">    <span class="comment">//RemoteCallbackList 会在客户端进程终止后，自动溢出客户端注册的 listener ，内部自动实现了线程同步功能。</span></div><div class="line">    <span class="keyword">private</span> RemoteCallbackList&lt;INewBookArrivedListener&gt; mListeners = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> AtomicBoolean isServiceDestroied = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            <span class="keyword">return</span> mBookList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"addBook: "</span> + book.toString());</div><div class="line">            mBookList.add(book);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(INewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListeners.register(listener);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(INewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            mListeners.unregister(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"老人与海"</span>));</div><div class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"哈姆雷特"</span>));</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceWorker()).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        mBookList.add(book);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> count = mListeners.beginBroadcast();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            INewBookArrivedListener listener = mListeners.getBroadcastItem(i);</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onNewBookArrived(book);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mListeners.finishBroadcast();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (!isServiceDestroied.get()) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">5000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> bookId = mBookList.size() +<span class="number">1</span>;</div><div class="line">                Book newBook = <span class="keyword">new</span> Book(bookId, <span class="string">"new book # "</span> + bookId);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    onNewBookArrived(newBook);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">//Permission 权限验证</span></div><div class="line">        <span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.jc.ipc.ACCESS_BOOK_SERVICE"</span>);</div><div class="line">        <span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        isServiceDestroied.set(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-ContentProvider"><a href="#使用-ContentProvider" class="headerlink" title="使用 ContentProvider"></a>使用 ContentProvider</h3><p>用于不同应用间数据共享，和 Messenger 底层实现同样是 Binder 和 AIDL，系统做了封装，使用简单。<br>系统预置了许多 ContentProvider ，如通讯录、日程表，需要跨进程访问。<br>使用方法：继承 ContentProvider 类实现 6 个抽象方法，这六个方法均运行在 ContentProvider 进程中，除 onCreate 运行在主线程里，其他五个方法均由外界回调运行在 Binder 线程池中。</p>
<p>ContentProvider 的底层数据，可以是 SQLite 数据库，可以是文件，也可以是内存中的数据。</p>
<p>详见代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BookProvider"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.jc.ipc.Book.Provider"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOK_CONTENT_URI = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/book"</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri USER_CONTENT_URI = Uri.parse(<span class="string">"content://"</span> + AUTHORITY + <span class="string">"/user"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOK_URI_CODE = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_URI_CODE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMatcher sUriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        sUriMatcher.addURI(AUTHORITY, <span class="string">"book"</span>, BOOK_URI_CODE);</div><div class="line">        sUriMatcher.addURI(AUTHORITY, <span class="string">"user"</span>, USER_URI_CODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        mContext = getContext();</div><div class="line">        initProviderData();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProviderData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//不建议在 UI 线程中执行耗时操作</span></div><div class="line">        mDB = <span class="keyword">new</span> DBOpenHelper(mContext).getWritableDatabase();</div><div class="line">        mDB.execSQL(<span class="string">"delete from "</span> + DBOpenHelper.BOOK_TABLE_NAME);</div><div class="line">        mDB.execSQL(<span class="string">"delete from "</span> + DBOpenHelper.USER_TABLE_NAME);</div><div class="line">        mDB.execSQL(<span class="string">"insert into book values(3,'Android');"</span>);</div><div class="line">        mDB.execSQL(<span class="string">"insert into book values(4,'iOS');"</span>);</div><div class="line">        mDB.execSQL(<span class="string">"insert into book values(5,'Html5');"</span>);</div><div class="line">        mDB.execSQL(<span class="string">"insert into user values(1,'haohao',1);"</span>);</div><div class="line">        mDB.execSQL(<span class="string">"insert into user values(2,'nannan',0);"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"query, current thread"</span>+ Thread.currentThread());</div><div class="line">        String table = getTableName(uri);</div><div class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI"</span> + uri);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mDB.query(table, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, sortOrder, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"getType"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"insert"</span>);</div><div class="line">        String table = getTableName(uri);</div><div class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI"</span> + uri);</div><div class="line">        &#125;</div><div class="line">        mDB.insert(table, <span class="keyword">null</span>, values);</div><div class="line">        <span class="comment">// 通知外界 ContentProvider 中的数据发生变化</span></div><div class="line">        mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> uri;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"delete"</span>);</div><div class="line">        String table = getTableName(uri);</div><div class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI"</span> + uri);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> count = mDB.delete(table, selection, selectionArgs);</div><div class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">            mContext.getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"update"</span>);</div><div class="line">        String table = getTableName(uri);</div><div class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported URI"</span> + uri);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> row = mDB.update(table, values, selection, selectionArgs);</div><div class="line">        <span class="keyword">if</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">            getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> row;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTableName</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        String tableName = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">switch</span> (sUriMatcher.match(uri)) &#123;</div><div class="line">            <span class="keyword">case</span> BOOK_URI_CODE:</div><div class="line">                tableName = DBOpenHelper.BOOK_TABLE_NAME;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> USER_URI_CODE:</div><div class="line">                tableName = DBOpenHelper.USER_TABLE_NAME;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> tableName;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"book_provider.db"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOOK_TABLE_NAME = <span class="string">"book"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_TABLE_NAME = <span class="string">"user"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String CREATE_BOOK_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span></div><div class="line">            + BOOK_TABLE_NAME + <span class="string">"(_id INTEGER PRIMARY KEY,"</span> + <span class="string">"name TEXT)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String CREATE_USER_TABLE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span></div><div class="line">            + USER_TABLE_NAME + <span class="string">"(_id INTEGER PRIMARY KEY,"</span> + <span class="string">"name TEXT,"</span></div><div class="line">            + <span class="string">"sex INT)"</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        db.execSQL(CREATE_BOOK_TABLE);</div><div class="line">        db.execSQL(CREATE_USER_TABLE);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ProviderActivity.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> TextView displayTextView;</div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_provider);</div><div class="line">        displayTextView = (TextView) findViewById(R.id.displayTextView);</div><div class="line">        mHandler = <span class="keyword">new</span> Handler();</div><div class="line"></div><div class="line">        getContentResolver().registerContentObserver(BookProvider.BOOK_CONTENT_URI, <span class="keyword">true</span>, <span class="keyword">new</span> ContentObserver(mHandler) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deliverSelfNotifications</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.deliverSelfNotifications();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onChange(selfChange);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</div><div class="line">                Toast.makeText(ProviderActivity.<span class="keyword">this</span>, uri.toString(), Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">super</span>.onChange(selfChange, uri);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">        values.put(<span class="string">"_id"</span>,<span class="number">1123</span>);</div><div class="line">        values.put(<span class="string">"name"</span>, <span class="string">"三国演义"</span>);</div><div class="line">        getContentResolver().insert(BookProvider.BOOK_CONTENT_URI, values);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        getContentResolver().delete(BookProvider.BOOK_CONTENT_URI, <span class="string">"_id = 4"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">        values.put(<span class="string">"_id"</span>,<span class="number">1123</span>);</div><div class="line">        values.put(<span class="string">"name"</span>, <span class="string">"三国演义新版"</span>);</div><div class="line">        getContentResolver().update(BookProvider.BOOK_CONTENT_URI, values , <span class="string">"_id = 1123"</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Cursor bookCursor = getContentResolver().query(BookProvider.BOOK_CONTENT_URI, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"name"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span> (bookCursor.moveToNext()) &#123;</div><div class="line">            Book book = <span class="keyword">new</span> Book(bookCursor.getInt(<span class="number">0</span>),bookCursor.getString(<span class="number">1</span>));</div><div class="line">            sb.append(book.toString()).append(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(<span class="string">"--------------------------------"</span>).append(<span class="string">"\n"</span>);</div><div class="line">        bookCursor.close();</div><div class="line"></div><div class="line">        Cursor userCursor = getContentResolver().query(BookProvider.USER_CONTENT_URI, <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>, <span class="string">"name"</span>, <span class="string">"sex"</span>&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">while</span> (userCursor.moveToNext()) &#123;</div><div class="line">            sb.append(userCursor.getInt(<span class="number">0</span>))</div><div class="line">                    .append(userCursor.getString(<span class="number">1</span>)).append(<span class="string">" ,"</span>)</div><div class="line">                    .append(userCursor.getInt(<span class="number">2</span>)).append(<span class="string">" ,"</span>)</div><div class="line">                    .append(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(<span class="string">"--------------------------------"</span>);</div><div class="line">        userCursor.close();</div><div class="line">        displayTextView.setText(sb.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-Socket"><a href="#使用-Socket" class="headerlink" title="使用 Socket"></a>使用 Socket</h3><blockquote>
<p>Socket起源于 Unix，而 Unix 基本哲学之一就是“一切皆文件”，都可以用“打开 open –读写 write/read –关闭 close ”模式来操作。Socket 就是该模式的一个实现，网络的 Socket 数据传输是一种特殊的 I/O，Socket 也是一种文件描述符。Socket 也具有一个类似于打开文件的函数调用： Socket()，该函数返回一个整型的Socket 描述符，随后的连接建立、数据传输等操作都是通过该 Socket 实现的。</p>
<p>常用的 Socket 类型有两种：流式 Socket（SOCK_STREAM）和数据报式 Socket（SOCK_DGRAM）。流式是一种面向连接的 Socket，针对于面向连接的 TCP 服务应用；数据报式 Socket 是一种无连接的 Socket ，对应于无连接的 UDP 服务应用。</p>
</blockquote>
<p>Socket 本身可以传输任意字节流。</p>
<p>谈到Socket，就必须要说一说 TCP/IP 五层网络模型：</p>
<ul>
<li>应用层：规定应用程序的数据格式，主要的协议 HTTP，FTP，WebSocket，POP3 等；</li>
<li>传输层：建立“端口到端口” 的通信，主要的协议：TCP，UDP；</li>
<li>网络层：建立”主机到主机”的通信，主要的协议：IP，ARP ，IP 协议的主要作用：一个是为每一台计算机分配 IP 地址，另一个是确定哪些地址在同一子网；</li>
<li>数据链路层：确定电信号的分组方式，主要的协议：以太网协议；</li>
<li>物理层：负责电信号的传输。</li>
</ul>
<p><strong>Socket 是连接应用层与传输层之间接口（API）。</strong></p>
<p></p><p align="center"><img src="https://github.com/astaxie/build-web-application-with-golang/raw/master/zh/images/8.1.socket.png?raw=true" alt="网络模型"></p><p></p>
<p></p><p align="center">图片来自网络</p><p></p>
<p>只实现 TCP Socket 。<br>Client 端代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TCPClientActivity"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_RECEIVED = <span class="number">0x10</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_READY = <span class="number">0x11</span>;</div><div class="line">    <span class="keyword">private</span> EditText editText;</div><div class="line">    <span class="keyword">private</span> TextView textView;</div><div class="line">    <span class="keyword">private</span> PrintWriter mPrintWriter;</div><div class="line">    <span class="keyword">private</span> Socket mClientSocket;</div><div class="line">    <span class="keyword">private</span> Button sendBtn;</div><div class="line">    <span class="keyword">private</span> StringBuilder stringBuilder;</div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MSG_READY:</div><div class="line">                    sendBtn.setEnabled(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MSG_RECEIVED:</div><div class="line">                    stringBuilder.append(msg.obj).append(<span class="string">"\n"</span>);</div><div class="line">                    textView.setText(stringBuilder.toString());</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.tcp_client_activity);</div><div class="line">        editText = (EditText) findViewById(R.id.editText);</div><div class="line">        textView = (TextView) findViewById(R.id.displayTextView);</div><div class="line">        sendBtn = (Button) findViewById(R.id.sendBtn);</div><div class="line">        sendBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        sendBtn.setEnabled(<span class="keyword">false</span>);</div><div class="line">        stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(TCPClientActivity.<span class="keyword">this</span>, TCPServerService.class);</div><div class="line">        startService(intent);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                connectTcpServer();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatDateTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"(HH:mm:ss)"</span>).format(<span class="keyword">new</span> Date(time));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectTcpServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        Socket socket = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> (socket == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">8888</span>);</div><div class="line">                mClientSocket = socket;</div><div class="line">                mPrintWriter = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(</div><div class="line">                        <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream())</div><div class="line">                ), <span class="keyword">true</span>);</div><div class="line">                mHandler.sendEmptyMessage(MSG_READY);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// receive message</span></div><div class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!isFinishing()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String msg = bufferedReader.readLine();</div><div class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                    String time = formatDateTime(System.currentTimeMillis());</div><div class="line">                    String showedMsg = <span class="string">"server "</span> + time + <span class="string">":"</span> + msg</div><div class="line">                            + <span class="string">"\n"</span>;</div><div class="line">                    mHandler.obtainMessage(MSG_RECEIVED, showedMsg).sendToTarget();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mPrintWriter != <span class="keyword">null</span>) &#123;</div><div class="line">            String msg = editText.getText().toString();</div><div class="line">            mPrintWriter.println(msg);</div><div class="line">            editText.setText(<span class="string">""</span>);</div><div class="line">            String time = formatDateTime(System.currentTimeMillis());</div><div class="line">            String showedMsg = <span class="string">"self "</span> + time + <span class="string">":"</span> + msg + <span class="string">"\n"</span>;</div><div class="line">            stringBuilder.append(showedMsg);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mClientSocket != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mClientSocket.shutdownInput();</div><div class="line">                mClientSocket.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Server 端代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TCPServerService"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isServiceDestroyed = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> String[] mMessages = <span class="keyword">new</span> String[]&#123;</div><div class="line">            <span class="string">"Hello! Body!"</span>,</div><div class="line">            <span class="string">"用户不在线！请稍后再联系！"</span>,</div><div class="line">            <span class="string">"请问你叫什么名字呀？"</span>,</div><div class="line">            <span class="string">"厉害了，我的哥！"</span>,</div><div class="line">            <span class="string">"Google 不需要科学上网是真的吗？"</span>,</div><div class="line">            <span class="string">"扎心了，老铁！！！"</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TCPServer()).start();</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        isServiceDestroyed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (!isServiceDestroyed) &#123;</div><div class="line">                <span class="comment">// receive request from client</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">final</span> Socket client = serverSocket.accept();</div><div class="line">                    Log.d(TAG, <span class="string">"=============== accept =================="</span>);</div><div class="line">                    <span class="keyword">new</span> Thread()&#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="keyword">try</span> &#123;</div><div class="line">                                responseClient(client);</div><div class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                                e.printStackTrace();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;.start();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">responseClient</span><span class="params">(Socket client)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//receive message</span></div><div class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(</div><div class="line">                <span class="keyword">new</span> InputStreamReader(client.getInputStream()));</div><div class="line">        <span class="comment">//send message</span></div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(</div><div class="line">                <span class="keyword">new</span> BufferedWriter(</div><div class="line">                        <span class="keyword">new</span> OutputStreamWriter(</div><div class="line">                                client.getOutputStream())),<span class="keyword">true</span>);</div><div class="line">        out.println(<span class="string">"欢迎来到聊天室！"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (!isServiceDestroyed) &#123;</div><div class="line">            String str = in.readLine();</div><div class="line">            Log.d(TAG, <span class="string">"message from client: "</span> + str);</div><div class="line">            <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            Random random = <span class="keyword">new</span> Random();</div><div class="line">            <span class="keyword">int</span> index = random.nextInt(mMessages.length);</div><div class="line">            String msg = mMessages[index];</div><div class="line">            out.println(msg);</div><div class="line">            Log.d(TAG, <span class="string">"send Message: "</span> + msg);</div><div class="line">        &#125;</div><div class="line">        out.close();</div><div class="line">        in.close();</div><div class="line">        client.close();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>演示：</p>
<p></p><p align="center"><img src="http://i4.buimg.com/588795/90d3ecdb634908c1.jpg" alt="Markdown"></p><br>UDP Socket 可以自己尝试着实现。<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.buimg.com/588795/ecd70e1824f1dc35.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;做好眼前的事，保持专注&lt;/p&gt;

&lt;blockq
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="进程" scheme="https://githubhaohao.github.io/categories/Android/%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="IPC" scheme="https://githubhaohao.github.io/tags/IPC/"/>
    
  </entry>
  
  <entry>
    <title>Android 多线程实现方式</title>
    <link href="https://githubhaohao.github.io/2017/04/22/Android-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>https://githubhaohao.github.io/2017/04/22/Android-多线程实现方式/</id>
    <published>2017-04-22T08:04:55.000Z</published>
    <updated>2017-05-11T12:54:31.208Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.muimg.com/588795/ed7dfa64d5e57628.jpg" alt="Markdown"></p>

<p align="center">只为初心</p>

<blockquote>
<p>一个优秀的程序员，必须具备两种能力：</p>
<ul>
<li>学习能力</li>
<li>时间管理能力</li>
</ul>
</blockquote>
<h2 id="Android-多线程实现方式"><a href="#Android-多线程实现方式" class="headerlink" title="Android 多线程实现方式"></a>Android 多线程实现方式</h2><p>通常来说，一个应用至少有一个进程，而一个进程至少有一个线程。<br>线程是 CPU 调度的基本单位，进程是系统资源分配的基本单位。<br>进程独享内存资源，一个进程可以看作一个 JVM ，一个进程崩溃后，在保护模式下一般不会对其它进程产生影响。<br>同一个进程中的线程共享内存资源，一个线程死掉就导致整个进程死掉。<br>行了，进程和线程就扯嫩忙多。<br>Android 提供了四种常用的多线程实现方式：</p>
<ul>
<li><strong>AsyncTask</strong></li>
<li><strong>异步消息机制</strong></li>
<li><strong>IntentService</strong></li>
<li><strong>ThreadPoolExcutor</strong></li>
</ul>
<h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><p>我们的老朋友 AsyncTask 类，它是封装好的线程池，操作 UI 线程极其方便。</p>
<p>瞅一眼，AsyncTask 的三个泛型参数：</p>
<p><code>public abstract class AsyncTask&lt;Params, Progress, Result&gt;</code></p>
<ul>
<li><code>params</code> ，<strong>传入参数类型</strong>，即 doInBackground() 方法中的参数类型;</li>
<li><code>Progress</code> ，异步任务执行过程中返回的<strong>任务执行进度类型</strong>，即 publishProgress() 和onProgressUpdate() 方法中传入的参数类型；</li>
<li><code>Result</code> ，异步任务执行完<strong>返回的结果类型</strong>，即 doInBackground() 方法中返回值的类型。</li>
</ul>
<p>四个回调方法：</p>
<ul>
<li><code>onPreExecute()</code>，在主线程执行，做一些准备工作。</li>
<li><code>doInBackground()</code>，在线程池中执行，该方法是抽象方法，在此方法中可以调用 <code>publishProgress()</code> 更新任务进度。</li>
<li><code>onProgressUpdate()</code>，在主线程中执行，在 publishProgress() 调用之后被回调，展示任务进度。</li>
<li><code>onPostExecute()</code>，在主线程中执行，异步任务结束后，回调此方法，处理返回结果。</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>当 AsyncTask 任务被取消时，回调 onCanceled(obj) ，此时 onPostExecute()，不会被调用，AsyncTask 中的 cancel() 方法并不是真正去取消任务，只是设置这个任务为取消状态，需要在 doInBackground() 中通过 isCancelled() 判断终止任务。</li>
<li>AsyncTask 必须在主线程中创建实例，execute() 方法也必须在主线程中调用。</li>
<li>每个 AsyncTask 实例只能执行一次 execute() ，多次执行会报错，如需执行多次，则需创建多个实例。</li>
<li>Android 3.0 之后， AsyncTask 对象默认执行多任务是串行执行，即 mAsyncTask.execute() ，并发执行的话需要使用 executeOnExecutor() 。</li>
<li>AsyncTask 用的是线程池机制和异步消息机制（基于 ThreadPoolExecutor 和 Handler ）。Android 2.3 以前，AsyncTask 线程池容量是 128 ，全局线程池只有 5 个工作线程，如果运用 AsyncTask 对象来执行多个并发异步任务，那么同一时间最多只能有 5 个线程同时运行，其他线程将被阻塞。Android 3.0 之后 Google 又进行了调整，新增接口 executeOnExecutor() ，允许自定义线程池（那么核心线程数以及线程容量也可自定义），并提供了 SERIAL_EXECUTOR 和 THREAD_POOL_EXECUTOR 预定义线程池。后来 Google 又做了一些调整（任何事物都不完美），将线程池的容量与 CPU 的核心数联系起来，如目前 SDK 25 版本中，预定义的核心线程数量最少有 2 个，最多 4 个，线程池容量范围 5 ~ 9 。改动如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</div></pre></td></tr></table></figure>
<h3 id="异步消息机制"><a href="#异步消息机制" class="headerlink" title="异步消息机制"></a>异步消息机制</h3><p>异步消息机制的三大主角： Handler ，Message 和 Looper 。<br>Looper 负责创建 MessageQueue 消息对列，然后进入一个无限 for 循环中，不断地从消息队列中取消息，如果消息队列为空，当前线程阻塞，Handler 负责向消息队列中发送消息。</p>
<h4 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h4><p>Looper 有两个重要的方法： prepare() 和 loop()。</p>
<ul>
<li>prepare() ， Looper 与当前线程绑定，一个线程只能有一个 Looper 实例和一个 MessageQueue 实例。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">        &#125;</div><div class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(<span class="keyword">true</span>)); 保证 Looper 对象在当前线程唯一</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Looper 的构造方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">        mRun = <span class="keyword">true</span>;</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>loop ，进入一个无限 for 循环体中，不断地从消息队列中取消息，然后交给消息的 target 属性的 dispatchMessage 方法去处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">        Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 无限循环体，有没有想过在 UI 线程里，有这样一个死循环，为什么界面没卡死？？</span></div><div class="line">        <span class="comment">// 答案最后揭晓。</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123; </div><div class="line">            Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">            msg.recycle();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>Handler 负责向消息队列中发送消息。<br>在 Activity 中我们直接可以 new Handler ，那是因为在 Activity 的启动代码中，已经在当前 UI 线程中调用了 Looper.prepare() 和 Looper.loop() 方法。</p>
<p>在子线程中 new Handler 必须要在当前线程（子线程）中创建好 Looper 对象和消息队列，代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在子线程中</span></div><div class="line"></div><div class="line">Looper.prepare();</div><div class="line"></div><div class="line">handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">  <span class="comment">//处理消息</span></div><div class="line"> &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Looper.loop();</div></pre></td></tr></table></figure>
<p>之后，你拿着这个 Handler 对象就可以在其他线程中，往这个子线程的消息队列中发消息了。</p>
<h4 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h4><p>HandlerThread 可以看作在子线程中创建一个异步消息处理机制的简化版，HandlerThread 对象自动帮我们在工作线程里创建 Looper 对象和消息队列。</p>
<p>使用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mHandlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"MyHandlerThread"</span>);</div><div class="line">mHandlerThread.start();</div><div class="line"></div><div class="line">mHandler = <span class="keyword">new</span> Handler(mHandlerThread.getLooper())&#123;</div><div class="line">   </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理消息</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>之后你就可以使用 Handler 对象往工作线程中的消息队列中发消息了。</p>
<p>看一下源码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mPriority;</div><div class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</div><div class="line">    Looper mLooper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTid = Process.myTid();</div><div class="line">        Looper.prepare();</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mLooper = Looper.myLooper();</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        Process.setThreadPriority(mPriority);</div><div class="line">        onLooperPrepared();</div><div class="line">        Looper.loop();</div><div class="line">        mTid = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mLooper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：handler 在 UI 线程中初始化的，looper 在一个子线程中执行，我们必须等 mLooper 创建完成之后，才能调用 getLooper ，源码中是通过 wait 和 notify 解决两个线程的同步问题。</p>
<h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p>IntentService 可以看成是 Service 和 HandlerThread 的合体。它继承自 Service ，并可以处理异步请求，其内部有一个 WorkerThread 来处理异步任务，当任务执行完毕后，IntentService 自动停止。</p>
<p>如果多次启动 IntentService 呢？ 看到 HandlerThread ，你就应该想到多次启动 IntentService ,就是将多个异步任务放到任务队列里面，然后在 onHandlerIntent 回调方法中串行执行，执行完毕后自动结束。</p>
<p>下面对源码进行简单的解析，IntentService 源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntentService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler;</div><div class="line">    <span class="keyword">private</span> String mName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRedelivery;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">//onHandleIntent 方法在工作线程中执行，执行完调用 stopSelf() 结束服务。</span></div><div class="line">            onHandleIntent((Intent)msg.obj);</div><div class="line">            stopSelf(msg.arg1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates an IntentService.  Invoked by your subclass's constructor.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> name Used to name the worker thread, important only for debugging.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * enabled == true 时，如果任务没有执行完，当前进程就死掉了，那么系统就会令当前进程重启。</div><div class="line">     * 任务会被重新执行。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntentRedelivery</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</div><div class="line">        mRedelivery = enabled;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        <span class="comment">// 上面已经讲过，HandlerThread 对象 start 之后，会在工作线程里创建消息队列 和 Looper 对象。</span></div><div class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</div><div class="line">        thread.start();</div><div class="line">			</div><div class="line">        mServiceLooper = thread.getLooper();</div><div class="line">        <span class="comment">// 获得 Looper 对象初始化 Handler 对象。</span></div><div class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="comment">// IntentService 每次启动都会往工作线程消息队列中添加消息，不会创建新的线程。</span></div><div class="line">        Message msg = mServiceHandler.obtainMessage();</div><div class="line">        msg.arg1 = startId;</div><div class="line">        msg.obj = intent;</div><div class="line">        mServiceHandler.sendMessage(msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 官方建议 IntentService onStartCommand 方法不应该被重写，注意该方法会调用 onStart 。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        onStart(intent, startId);</div><div class="line">        <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">//服务停止会清除消息队列中的消息，除了当前执行的任务外，后续的任务不会被执行。</span></div><div class="line">        mServiceLooper.quit();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 不建议通过 bind 启动 IntentService ，如果通过 bind 启动 IntentService ，那么 onHandlerIntent 方法不会被回调。Activity 与 IntentService 之间的通信一般采用广播的方式。</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 子类必须要实现，执行具体的异步任务逻辑，由 IntentService 自动回调。</div><div class="line">     */</div><div class="line">    <span class="meta">@WorkerThread</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IntentService 源码很容易理解，你也可以就自己的应用场景封装自己的 IntentService 。</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul>
<li>正常情况下，启动 IntentService ，任务完成，服务停止；</li>
<li>异步任务完成前，停止 IntentService ，服务停止，但任务还会执行完成，完成后，工作线程结束；</li>
<li>多次启动 IntentService ，任务会被一次串行执行，执行结束后，服务停止；</li>
<li>多次启动 IntentService ，在所有任务执行结束之前，停止 IntentService ，服务停止，除了当前执行的任务外，后续的任务不会被执行；</li>
</ul>
<h3 id="ThreadPoolExcutor"><a href="#ThreadPoolExcutor" class="headerlink" title="ThreadPoolExcutor"></a>ThreadPoolExcutor</h3><p align="center"><img src="http://tutorials.jenkov.com/images/java-concurrency-utils/thread-pool-executor.png" alt="Markdown"></p>

<p align="center">图片来自 Jakob Jenkov 博客</p>

<h4 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h4><p>用来管理一组工作线程，任务队列（ BlockingQueue ）中持有的任务等待着被线程池中的空闲线程执行。</p>
<h4 id="常用构造方法："><a href="#常用构造方法：" class="headerlink" title="常用构造方法："></a>常用构造方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">    <span class="keyword">int</span> corePoolSize,</div><div class="line">    <span class="keyword">int</span> maximumPoolSize,</div><div class="line">    <span class="keyword">long</span> keepAliveTime,</div><div class="line">    TimeUnit unit,</div><div class="line">    BlockingQueue&lt;Runnable&gt; workQueue</div><div class="line">);</div></pre></td></tr></table></figure>
<ol>
<li>corePoolSize 核心线程池容量，即线程池中所维持线程的最低数量。corePoolSize 初始值为 0 ，当有新任务加入到任务队列中，新的线程将被创建，这个时候即使线程池中存在空闲线程，只要当前线程数小于 corePoolSize ，那么新的线程依然被创建。</li>
<li>maximumPoolSize 线程池中所维持线程的最大数量。</li>
<li>keepAliveTime 空闲线程在没有新任务到来时的存活时间。</li>
<li>unit 参数 keepAliveTime 的时间单位。</li>
<li>workQueue 任务队列，必须是 BlockingQueue 。</li>
</ol>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><h5 id="创建-ThreadFactory-，当然也可以自定义。"><a href="#创建-ThreadFactory-，当然也可以自定义。" class="headerlink" title="创建 ThreadFactory ，当然也可以自定义。"></a>创建 ThreadFactory ，当然也可以自定义。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="创建-ThreadPoolExecutor-。"><a href="#创建-ThreadPoolExecutor-。" class="headerlink" title="创建 ThreadPoolExecutor 。"></a>创建 ThreadPoolExecutor 。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据 CPU 核心数确定线程池容量。</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER_OF_CORES = Runtime.getRuntime().availableProcessors(); </div><div class="line"></div><div class="line">mThreadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">        NUMBER_OF_CORES * <span class="number">2</span>, </div><div class="line">        NUMBER_OF_CORES * <span class="number">2</span> + <span class="number">1</span>,</div><div class="line">        <span class="number">60L</span>,</div><div class="line">        TimeUnit.SECONDS,</div><div class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</div><div class="line">        backgroundPriorityThreadFactory</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">mThreadPoolExecutor.execute(<span class="keyword">new</span> Runnable() &#123; </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="comment">//do something  </span></div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">Future future = mThreadPoolExecutor.submit(<span class="keyword">new</span> Runnable() &#123; </div><div class="line">    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="comment">//do something  </span></div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//任务可取消</span></div><div class="line">future.cancel(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">Future&lt;Integer&gt; futureInt = mThreadPoolExecutor.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//获取执行结果</span></div><div class="line">futureInt.get();</div><div class="line"></div><div class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;()&#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">mThreadPoolExecutor.submit(task);</div><div class="line">task.get();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.muimg.com/588795/ed7dfa64d5e57628.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;只为初心&lt;/p&gt;

&lt;blockquote&gt;
&lt;
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="线程" scheme="https://githubhaohao.github.io/categories/Android/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://githubhaohao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android Clean 架构浅析</title>
    <link href="https://githubhaohao.github.io/2017/04/15/Android-Clean-%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/"/>
    <id>https://githubhaohao.github.io/2017/04/15/Android-Clean-架构浅析/</id>
    <published>2017-04-15T13:07:34.000Z</published>
    <updated>2017-07-13T12:28:35.379Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i1.piimg.com/588795/f96da96df4251851.jpg" alt="Cover"></p>

<p align="center">死磕 Android 架构也是一种娱乐</p>

<blockquote>
<p>Android 常用的架构主要有 MVC，MVP，MVVM 以及 Clean 。以上架构设计模式没有绝对的优劣之分，关键要看具体的应用场景。更多关于 MVC，MVP 以及 MVVM 介绍可以参考<a href="http://haohaochang.cn/2017/02/12/MVVM%EF%BC%8CRxJava%E5%92%8CRetrofit%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">MVC,MVP &amp; MVVM</a></p>
</blockquote>
<h2 id="什么是-Clean-架构？"><a href="#什么是-Clean-架构？" class="headerlink" title="什么是 Clean 架构？"></a>什么是 Clean 架构？</h2><p align="center"><img src="http://www.elapsetech.com/media/107552/Close-Up-Robert-C-Martin.jpg" alt="author"></p>

<p align="center">Robert C. Martin (Uncle Bob)</p>

<p>Clean 架构是由 Uncle Bob 在 2012 年发表的, 针对 Web App 的架构设计。 </p>
<p>Bob大叔总结了各种系统架构的共通之处以及最终目标，并提出只需秉持分层与依赖规则的原则, 提出了 Clean 架构思想。</p>
<h2 id="Clean-架构浅析"><a href="#Clean-架构浅析" class="headerlink" title="Clean 架构浅析"></a>Clean 架构浅析</h2><h3 id="单向依赖"><a href="#单向依赖" class="headerlink" title="单向依赖"></a>单向依赖</h3><p><img src="https://fernandocejas.com/assets/migrated/clean_architecture1.png" alt="Cover"></p>
<p align="center">图片来自 Robert C. Martin (Uncle Bob)</p>

<p>Clean 架构各层之间的依赖是单向的，只能是外层依赖内层。</p>
<h3 id="MVP-VS-Clean"><a href="#MVP-VS-Clean" class="headerlink" title="MVP VS Clean"></a>MVP VS Clean</h3><p><img src="https://github.com/googlesamples/android-architecture/wiki/images/mvp-clean.png" alt="Cover"></p>
<p align="center">图片来自 Google</p>

<p>从上图可以看到 Clean 架构的 Android 实现，实际上是对目前比较流行的 MVP 架构进行改造。</p>
<p>MVP 之 View 和 Presenter 层作为 Clean 架构的 Presentations Layer, 新增 Domain Layer    处理所有的业务逻辑。MVP 中的 Model 层功能被弱化，作为 Data Layer 对外只提供接口，不再有业务逻辑。 一般来说每一层都有独立的数据模型。</p>
<h3 id="Clean-之-Presentation-层"><a href="#Clean-之-Presentation-层" class="headerlink" title="Clean 之 Presentation 层"></a>Clean 之 Presentation 层</h3><p>包含如下类： </p>
<ul>
<li>Presenter 和 View 层相关类，当然你也可以在 MVVP 架构基础之上进行改造。 </li>
<li>Mapper 类，负责将 Domain 层的数据模型转换为 Presentation 的数据模型。</li>
<li>本层的异常封装类。</li>
</ul>
<h3 id="Clean-之-Domain-层"><a href="#Clean-之-Domain-层" class="headerlink" title="Clean 之 Domain 层"></a>Clean 之 Domain 层</h3><p>Domain 层不依赖于 Android 类库和第三方库，可以独立做单元测试。</p>
<p>包含如下类：</p>
<ul>
<li>Use Cases (Interactor）类，负责完成对 Data 层的某一操作行为。（如获取 movie list ,获取某一 movie 的 detail info 可视为 2 个 Use Case 或 Interactor）。</li>
<li>Mapper 类，负责将 Data 层的数据模型转换为 Domain 层的数据模型。</li>
<li>本层的异常封装类。</li>
</ul>
<h3 id="Clean-之-Data-层"><a href="#Clean-之-Data-层" class="headerlink" title="Clean 之 Data 层"></a>Clean 之 Data 层</h3><p><img src="https://fernandocejas.com/assets/migrated/clean_architecture_data.png" alt="data"></p>
<p align="center">图片来自 Robert C. Martin (Uncle Bob)</p>

<p>这张图就足够说明一切了。</p>
<p>包含各种 API 接口，主要对应数据库操作，文件操作以及网络数据操作，一些异常封装类。<br>Mapper 类，负责将网络数据模型转换为 Data 层的数据模型。</p>
<p><strong>注意 Data 层只提供接口，没有业务逻辑。</strong></p>
<h3 id="Android-Clean-架构实现"><a href="#Android-Clean-架构实现" class="headerlink" title="Android Clean 架构实现"></a>Android Clean 架构实现</h3><p>一个基于 Clean 架构以及 Retrofit ， RxKotlin ， Dagger 框架实现的 <a href="https://github.com/githubhaohao/DoubanBook/blob/master/README.md" target="_blank" rel="external">Kotlin for Android App</a> 。</p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ul>
<li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/" target="_blank" rel="external">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></li>
<li><a href="https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="external">https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1.piimg.com/588795/f96da96df4251851.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;死磕 Android 架构也是一种娱乐&lt;/p&gt;

&lt;b
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="架构" scheme="https://githubhaohao.github.io/categories/Android/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Clean 架构" scheme="https://githubhaohao.github.io/tags/Clean-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView 加载与刷新功能实现</title>
    <link href="https://githubhaohao.github.io/2017/04/13/RecyclerView-%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%B7%E6%96%B0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://githubhaohao.github.io/2017/04/13/RecyclerView-加载与刷新功能实现/</id>
    <published>2017-04-13T10:30:00.000Z</published>
    <updated>2017-05-13T08:13:56.687Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.muimg.com/588795/9485f3b972f5ed01.jpg" alt="Cover"></p>

<p align="center">坚持就是进步</p>

<blockquote>
<p>最近 Kotlin Android 开发貌似要火起来，Kotlin 具有脚本语言风格，能与 Java 无缝兼容，并且有 Google 有意栽培。</p>
</blockquote>
<h2 id="RecyclerView-加载与刷新功能实现"><a href="#RecyclerView-加载与刷新功能实现" class="headerlink" title="RecyclerView 加载与刷新功能实现"></a>RecyclerView 加载与刷新功能实现</h2><p>RecyclerView 功能及灵活性强大到令人发指。在开发中，完全可以用它代替 ListView 和 GridView ，并且还具有瀑布流展示功能。</p>
<p>本文主要对 RecyclerView 进行简单的封装，来实现加载、刷新以及异常状态展示多种功能，实现及其简单，代码量很少。</p>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="http://i1.piimg.com/588795/ddbeb1bc164791d2.gif" alt="jc-a"><br><img src="http://i1.piimg.com/588795/a8ccce06b8991393.gif" alt="jc-b"></p>
<p><a href="https://github.com/githubhaohao/JCRecyclerView/blob/master/demo.apk" target="_blank" rel="external">Demo 下载</a></p>
<blockquote><p><a href="https://github.com/githubhaohao/JCRecyclerView" target="_blank" rel="external">源码地址: https://github.com/githubhaohao/JCRecyclerView</a></p>
</blockquote>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>JCRecyclerView 继承 RecyclerView ，保留 RecyclerView 的所有特性。</p>
<p>内部类 JCAdapter 对外部的 RecyclerView Adapter 进行拦截改造，实现根据配置在 position = 0 的位置加载 Ad-Slot View （广告位），加载时在底部显示 Bottom View 表视加载正在进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">JCAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView.Adapter adapter;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_ADSLOT = <span class="number">0x10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_NORMAL = <span class="number">0x11</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BOTTOM = <span class="number">0x12</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JCAdapter</span><span class="params">(RecyclerView.Adapter adapter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.adapter = adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(ViewHolder holder)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onViewAttachedToWindow(holder);</div><div class="line">        ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();</div><div class="line">        <span class="keyword">if</span>(layoutParams != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(layoutParams <span class="keyword">instanceof</span>  StaggeredGridLayoutManager.LayoutParams &amp;&amp; holder.getLayoutPosition() == <span class="number">0</span>)&#123;</div><div class="line">                    StaggeredGridLayoutManager.LayoutParams p = (StaggeredGridLayoutManager.LayoutParams) layoutParams;</div><div class="line">                    p.setFullSpan(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">                <span class="keyword">if</span>(layoutParams <span class="keyword">instanceof</span>  StaggeredGridLayoutManager.LayoutParams &amp;&amp; holder.getLayoutPosition() == getItemCount() - <span class="number">1</span>)&#123;</div><div class="line">                    StaggeredGridLayoutManager.LayoutParams p = (StaggeredGridLayoutManager.LayoutParams) layoutParams;</div><div class="line">                    p.setFullSpan(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager) &#123;</div><div class="line">            <span class="keyword">final</span> GridLayoutManager gridManager = ((GridLayoutManager)</div><div class="line">                    layoutManager);</div><div class="line">            gridManager.setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                    <span class="keyword">boolean</span> spanResult = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">if</span>(adSlotView != <span class="keyword">null</span> &amp;&amp; bottomView != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (isLoading) &#123;</div><div class="line">                            spanResult = (position == <span class="number">0</span> || position == getItemCount() - <span class="number">1</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            spanResult = (position == <span class="number">0</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">                        spanResult = (position==<span class="number">0</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">                        spanResult = (position == getItemCount() - <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> spanResult</div><div class="line">                            ? gridManager.getSpanCount():<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewType == TYPE_ADSLOT) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JCViewHolder(adSlotView);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewType == TYPE_BOTTOM) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JCViewHolder(bottomView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> adapter.onCreateViewHolder(parent,viewType);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getItemViewType(<span class="number">0</span>) == TYPE_ADSLOT) &#123;</div><div class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">int</span> newPosition = --position;</div><div class="line">            <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (newPosition &lt; adapter.getItemCount()) &#123;</div><div class="line">                    adapter.onBindViewHolder(holder, newPosition);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemViewType(position) == TYPE_BOTTOM) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        adapter.onBindViewHolder(holder, position);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = adapter.getItemCount();</div><div class="line">        <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">            count ++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">            count ++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> adSlotView == <span class="keyword">null</span> ? TYPE_NORMAL : TYPE_ADSLOT;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getItemCount() - <span class="number">1</span> &amp;&amp; isLoading) &#123;</div><div class="line">            <span class="keyword">return</span> bottomView == <span class="keyword">null</span> ? TYPE_NORMAL : TYPE_BOTTOM;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> TYPE_NORMAL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>向外暴露一个接口 OnLoadMoreListener ，完成加载时的回调。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadMoreListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>整体思路就是这些，完整代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = JCRecyclerView.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> LayoutManager layoutManager;</div><div class="line">    <span class="keyword">private</span> ViewGroup adSlotView;</div><div class="line">    <span class="keyword">private</span> ViewGroup stateView;</div><div class="line">    <span class="keyword">private</span> ViewGroup bottomView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLoading = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> JCAdapter jcAdapter;</div><div class="line">    <span class="keyword">private</span> OnLoadMoreListener onLoadMoreListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOnLoadMoreListener</span><span class="params">(OnLoadMoreListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onLoadMoreListener = listener;</div><div class="line">        <span class="keyword">this</span>.addOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (recyclerView.getLayoutManager() <span class="keyword">instanceof</span> StaggeredGridLayoutManager) &#123;</div><div class="line">                    StaggeredGridLayoutManager layoutManager = (StaggeredGridLayoutManager) recyclerView.getLayoutManager();</div><div class="line">                    <span class="keyword">int</span> totalItemCount = recyclerView.getAdapter().getItemCount();</div><div class="line">                    <span class="keyword">int</span>[] lastVisibleItemPositions = <span class="keyword">new</span> <span class="keyword">int</span>[layoutManager.getSpanCount()];</div><div class="line">                    layoutManager.findLastVisibleItemPositions(lastVisibleItemPositions);</div><div class="line">                    <span class="keyword">int</span> visibleItemCount = recyclerView.getChildCount();</div><div class="line">                    <span class="keyword">int</span> lastVisibleItemPosition = findMaxPosition(lastVisibleItemPositions);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE</div><div class="line">                            &amp;&amp; lastVisibleItemPosition == totalItemCount - <span class="number">1</span></div><div class="line">                            &amp;&amp; visibleItemCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (bottomView == <span class="keyword">null</span> || isLoading || stateView != <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                        isLoading = <span class="keyword">true</span>;</div><div class="line">                        jcAdapter.notifyDataSetChanged();</div><div class="line">                        onLoadMoreListener.onLoadMore();</div><div class="line">                        scrollToPosition(jcAdapter.getItemCount() - <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    LinearLayoutManager lm = (LinearLayoutManager) recyclerView.getLayoutManager();</div><div class="line">                    <span class="keyword">int</span> totalItemCount = recyclerView.getAdapter().getItemCount();</div><div class="line">                    <span class="keyword">int</span> lastVisibleItemPosition = lm.findLastVisibleItemPosition();</div><div class="line">                    <span class="keyword">int</span> visibleItemCount = recyclerView.getChildCount();</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE</div><div class="line">                            &amp;&amp; lastVisibleItemPosition == totalItemCount - <span class="number">1</span></div><div class="line">                            &amp;&amp; visibleItemCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (bottomView == <span class="keyword">null</span> || isLoading || stateView != <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                        isLoading = <span class="keyword">true</span>;</div><div class="line">                        jcAdapter.notifyDataSetChanged();</div><div class="line">                        onLoadMoreListener.onLoadMore();</div><div class="line">                        scrollToPosition(jcAdapter.getItemCount() - <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMaxPosition</span><span class="params">(<span class="keyword">int</span>[] positions)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = positions[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt; positions.length; index++) &#123;</div><div class="line">            <span class="keyword">if</span> (positions[index] &gt; max) &#123;</div><div class="line">                max = positions[index];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottomView</span><span class="params">(ViewGroup view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (bottomView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.bottomView = view;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoading</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!flag) &#123;</div><div class="line">            isLoading = <span class="keyword">false</span>;</div><div class="line">            jcAdapter.notifyDataSetChanged();</div><div class="line">            scrollToPosition(jcAdapter.getItemCount() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdSlotView</span><span class="params">(ViewGroup view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (adSlotView == <span class="keyword">null</span>) &#123;</div><div class="line">            adSlotView = view;</div><div class="line">            <span class="keyword">if</span> (jcAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">                jcAdapter.notifyItemInserted(<span class="number">0</span>);</div><div class="line">                scrollToPosition(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateView</span><span class="params">(ViewGroup view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (stateView != <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">            scrollToPosition(<span class="number">0</span>);</div><div class="line">            stateView = view;</div><div class="line">            Rect rect = <span class="keyword">new</span> Rect();</div><div class="line">            getGlobalVisibleRect(rect);</div><div class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, rect.bottom - rect.top - adSlotView.getHeight());</div><div class="line">            adSlotView.addView(stateView, layoutParams);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            showToast(<span class="string">"You should set the ad-slot view at first."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAdSlotView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span> &amp;&amp; jcAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">            adSlotView = <span class="keyword">null</span>;</div><div class="line">            jcAdapter.notifyItemRemoved(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeStateView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span> &amp;&amp; stateView != <span class="keyword">null</span> &amp;&amp; jcAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">            adSlotView.removeView(stateView);</div><div class="line">            stateView = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(Adapter adapter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jcAdapter = <span class="keyword">new</span> JCAdapter(adapter);</div><div class="line">        <span class="keyword">super</span>.setAdapter(<span class="keyword">this</span>.jcAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JCRecyclerView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutManager</span><span class="params">(LayoutManager layoutManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.layoutManager = layoutManager;</div><div class="line">        <span class="keyword">super</span>.setLayoutManager(layoutManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">JCAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> RecyclerView.Adapter adapter;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_ADSLOT = <span class="number">0x10</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_NORMAL = <span class="number">0x11</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BOTTOM = <span class="number">0x12</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JCAdapter</span><span class="params">(RecyclerView.Adapter adapter)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.adapter = adapter;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(ViewHolder holder)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onViewAttachedToWindow(holder);</div><div class="line">            ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();</div><div class="line">            <span class="keyword">if</span>(layoutParams != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span>(layoutParams <span class="keyword">instanceof</span>  StaggeredGridLayoutManager.LayoutParams &amp;&amp; holder.getLayoutPosition() == <span class="number">0</span>)&#123;</div><div class="line">                        StaggeredGridLayoutManager.LayoutParams p = (StaggeredGridLayoutManager.LayoutParams) layoutParams;</div><div class="line">                        p.setFullSpan(<span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">                    <span class="keyword">if</span>(layoutParams <span class="keyword">instanceof</span>  StaggeredGridLayoutManager.LayoutParams &amp;&amp; holder.getLayoutPosition() == getItemCount() - <span class="number">1</span>)&#123;</div><div class="line">                        StaggeredGridLayoutManager.LayoutParams p = (StaggeredGridLayoutManager.LayoutParams) layoutParams;</div><div class="line">                        p.setFullSpan(<span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager) &#123;</div><div class="line">                <span class="keyword">final</span> GridLayoutManager gridManager = ((GridLayoutManager)</div><div class="line">                        layoutManager);</div><div class="line">                gridManager.setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                        <span class="keyword">boolean</span> spanResult = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span>(adSlotView != <span class="keyword">null</span> &amp;&amp; bottomView != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (isLoading) &#123;</div><div class="line">                                spanResult = (position == <span class="number">0</span> || position == getItemCount() - <span class="number">1</span>);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                spanResult = (position == <span class="number">0</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">                            spanResult = (position==<span class="number">0</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">                            spanResult = (position == getItemCount() - <span class="number">1</span>);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">return</span> spanResult</div><div class="line">                                ? gridManager.getSpanCount():<span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (viewType == TYPE_ADSLOT) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JCViewHolder(adSlotView);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewType == TYPE_BOTTOM) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JCViewHolder(bottomView);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> adapter.onCreateViewHolder(parent,viewType);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (getItemViewType(<span class="number">0</span>) == TYPE_ADSLOT) &#123;</div><div class="line">                <span class="keyword">if</span> (position == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">int</span> newPosition = --position;</div><div class="line">                <span class="keyword">if</span> (adapter != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (newPosition &lt; adapter.getItemCount()) &#123;</div><div class="line">                        adapter.onBindViewHolder(holder, newPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemViewType(position) == TYPE_BOTTOM) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            adapter.onBindViewHolder(holder, position);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> count = adapter.getItemCount();</div><div class="line">            <span class="keyword">if</span> (adSlotView != <span class="keyword">null</span>) &#123;</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (bottomView != <span class="keyword">null</span> &amp;&amp; isLoading) &#123;</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> count;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> adSlotView == <span class="keyword">null</span> ? TYPE_NORMAL : TYPE_ADSLOT;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == getItemCount() - <span class="number">1</span> &amp;&amp; isLoading) &#123;</div><div class="line">                <span class="keyword">return</span> bottomView == <span class="keyword">null</span> ? TYPE_NORMAL : TYPE_BOTTOM;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> TYPE_NORMAL;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">JCViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JCViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(getContext(),msg,Toast.LENGTH_SHORT).show();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadMoreListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>200 多行代码，轻松实现 RecyclerView 刷新、加载以及异常状态的展示功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.muimg.com/588795/9485f3b972f5ed01.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;坚持就是进步&lt;/p&gt;

&lt;blockquote&gt;
&lt;p
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="RecyclerView" scheme="https://githubhaohao.github.io/categories/Android/RecyclerView/"/>
    
    
      <category term="RecyclerView 加载与刷新" scheme="https://githubhaohao.github.io/tags/RecyclerView-%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%B7%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android jar 与 aar</title>
    <link href="https://githubhaohao.github.io/2017/04/01/Android-jar-%E4%B8%8E-aar/"/>
    <id>https://githubhaohao.github.io/2017/04/01/Android-jar-与-aar/</id>
    <published>2017-04-01T04:43:26.000Z</published>
    <updated>2017-05-13T08:10:16.571Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i4.buimg.com/588795/1372239da58c943a.jpg" alt="Cover"></p>

<p align="center">愚人节不愚人</p>

<blockquote>
<p>最近开始搞机器学习，同时项目也不停的维护着！嘿嘿，明天就是小长假了。</p>
</blockquote>
<h2 id="Android-jar-与-aar"><a href="#Android-jar-与-aar" class="headerlink" title="Android jar 与 aar"></a>Android jar 与 aar</h2><p><strong>jar</strong> (<strong>Java Application Resource</strong>) 是一种归档文件，以 ZIP 格式构建，以 .jar 为文件扩展名。用户可以使用JDK自带的 jar 命令创建或提取 JAR 文件。<strong>jar 文件只包含 class 文件和 配置文件。</strong></p>
<p><strong>aar</strong> (<strong>Android Application Resource</strong>) 是 android 中特有的归档文件，<strong>既包含 class 文件也包含 android 的 res 资源文件</strong>。</p>
<h2 id="Android-Studio-生成-jar-和-aar-文件"><a href="#Android-Studio-生成-jar-和-aar-文件" class="headerlink" title="Android Studio 生成 jar 和 aar 文件"></a>Android Studio 生成 jar 和 aar 文件</h2><h3 id="新建一个-Module"><a href="#新建一个-Module" class="headerlink" title="新建一个 Module"></a>新建一个 Module</h3><p>Android studio 菜单<strong> File -&gt; New -&gt; New Module -&gt; Android Module</strong> 。<br><img src="http://i4.buimg.com/588795/339c66823e3c881b.png" alt="new module"> </p>
<p>创建名为 mylibrary 的 module。</p>
<p><img src="http://i2.muimg.com/588795/afacc81c2031edea.png" alt="module"></p>
<p>在 mylibrary 下新建一个类 <strong>Person</strong> ,等会在 app module 下访问它。</p>
<p><img src="http://i4.buimg.com/588795/71501892d1d08bd4.png" alt="person"></p>
<h3 id="生成-jar-和-aar-文件"><a href="#生成-jar-和-aar-文件" class="headerlink" title="生成 jar 和 aar 文件"></a>生成 jar 和 aar 文件</h3><p>直接 Rebuild 或者运行 mylibrary task 如下图：<br><img src="http://i4.buimg.com/588795/88c5a8a24aca2790.png" alt="task"></p>
<p>Build Successful 之后可在下图的目录下找到 jar 和 arr 文件。<br><img src="http://i2.muimg.com/588795/76e1e131b84d17ec.png" alt="file"></p>
<p><img src="http://i2.muimg.com/588795/951d7279602acaad.png" alt="aar"></p>
<h3 id="引入-jar"><a href="#引入-jar" class="headerlink" title="引入 jar"></a>引入 jar</h3><ul>
<li>将 jar 文件拷贝到 app 的 lib 文件夹下；</li>
<li>右击 jar 文件，选择 <strong>Add As Library</strong> ，添加到 app module 下，然后 Android Studio 会自动编译。</li>
</ul>
<h3 id="引入-aar"><a href="#引入-aar" class="headerlink" title="引入 aar"></a>引入 aar</h3><ul>
<li>将 aar 文件拷贝到 app 的 lib 文件夹下 (可以修改 aar 文件名字，本例中修改为 mylibrary )；</li>
<li>修改 build.gradle 配置文件：<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ......</div><div class="line">  <span class="keyword">repositories</span> &#123;</div><div class="line">     <span class="keyword">flatDir</span> &#123;</div><div class="line">         dirs <span class="string">'libs'</span></div><div class="line">     &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">compile</span>(name: <span class="string">'mylibrary'</span>, ext: <span class="string">'aar'</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Async Project 大工告成。</p>
<p>同样，你也可以在其他工程中引入 jar 或 aar 文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i4.buimg.com/588795/1372239da58c943a.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;愚人节不愚人&lt;/p&gt;

&lt;blockquote&gt;
&lt;p
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
    
      <category term="jar aar" scheme="https://githubhaohao.github.io/tags/jar-aar/"/>
    
  </entry>
  
  <entry>
    <title>Android 四大组件之 Activity</title>
    <link href="https://githubhaohao.github.io/2017/03/01/Android-%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B-Activity/"/>
    <id>https://githubhaohao.github.io/2017/03/01/Android-四大组件之-Activity/</id>
    <published>2017-03-01T06:36:14.000Z</published>
    <updated>2017-05-13T08:11:37.470Z</updated>
    
    <content type="html"><![CDATA[<p align="center"><img src="http://i2.buimg.com/588795/f44c5bdc30a8cc26.jpg" alt="Cover"></p>

<p align="center">唉！最近拖延症又犯了</p>

<blockquote>
<p>最近真的是越来越懒了，总是找各种理由不写博客。虽然最近各种事，又搞论文，又搞项目的，再拖下去实在是对不住 “不忘初心” 这一句话。惭愧！<br>虽然关于 Activity 已经被写烂了，但是从本篇文章里，你一定会发现不同的东西。</p>
</blockquote>
<h2 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a>Activity 生命周期</h2><h3 id="一般情况下"><a href="#一般情况下" class="headerlink" title="一般情况下"></a>一般情况下</h3><p><img src="https://developer.android.com/images/activity_lifecycle.png" alt="haohaochang.cn"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异常情况下"><a href="#异常情况下" class="headerlink" title="异常情况下"></a>异常情况下</h3><h4 id="系统配置变化导致Activity销毁重建"><a href="#系统配置变化导致Activity销毁重建" class="headerlink" title="系统配置变化导致Activity销毁重建"></a>系统配置变化导致Activity销毁重建</h4><ol>
<li>旋转屏幕，Activity 销毁并重新创建，在异常情况下系统会在 onStop 之前调用 onSaveInstanceState 来保存状态。Activity 重新创建后，会在 onStart 之后调用 onRestoreInstanceState 恢复之前保存的数据。</li>
<li>系统只在 Activity 异常终止的时候才会调用 onSaveInstanceState 和 onRestoreInstanceState 方法。其他情况不会触发。</li>
</ol>
<h4 id="资源内存不足导致低优先级的-Activity-被回收"><a href="#资源内存不足导致低优先级的-Activity-被回收" class="headerlink" title="资源内存不足导致低优先级的 Activity 被回收"></a>资源内存不足导致低优先级的 Activity 被回收</h4><ol>
<li>前台- 可见非前台（被对话框遮挡的 Activity ）-后台，这三种 Activity 优先级从高到低。</li>
<li><code>android:configChanges=&quot;orientation&quot;</code> 在 manifest 中指定 configChanges 在系统配置变化后不重新创建 Activity，也不会执行onSaveInstanceState 和 onRestoreInstanceState 方法，而是调用 onConfigurationChnaged 方法。</li>
<li>configChanges 一般常用三个选项：<ul>
<li>locale <strong>系统语言变化</strong></li>
<li>keyborardHidden <strong>键盘的可访问性发生了变化，比如用户调出了键盘</strong></li>
<li>orientation <strong>屏幕方向变化</strong></li>
</ul>
</li>
</ol>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="首次启动-Activity"><a href="#首次启动-Activity" class="headerlink" title="首次启动 Activity"></a>首次启动 Activity</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Create</div><div class="line">MainActivity <span class="literal">on</span>Start</div><div class="line">MainActivity <span class="literal">on</span>Resume</div></pre></td></tr></table></figure>
<h4 id="跳转到-SecondActivity"><a href="#跳转到-SecondActivity" class="headerlink" title="跳转到 SecondActivity"></a>跳转到 SecondActivity</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Pause</div><div class="line">SecondActivity <span class="literal">on</span>Create</div><div class="line">SecondActivity <span class="literal">on</span>Start</div><div class="line">SecondActivity <span class="literal">on</span>Resume</div><div class="line">MainActivity <span class="literal">on</span>Stop</div></pre></td></tr></table></figure>
<h4 id="Back-返回-MainActivity"><a href="#Back-返回-MainActivity" class="headerlink" title="Back 返回 MainActivity"></a>Back 返回 MainActivity</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">SecondActivity</span> <span class="literal">on</span>Pause</div><div class="line">MainActivity <span class="literal">on</span>Restart</div><div class="line">MainActivity <span class="literal">on</span>Start</div><div class="line">MainActivity <span class="literal">on</span>Resume</div><div class="line">SecondActivity <span class="literal">on</span>Stop</div><div class="line">SecondActivity <span class="literal">on</span>Destroy</div></pre></td></tr></table></figure>
<h4 id="Home-回退桌面"><a href="#Home-回退桌面" class="headerlink" title="Home 回退桌面"></a>Home 回退桌面</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Pause</div><div class="line">MainActivity <span class="literal">on</span>Stop</div></pre></td></tr></table></figure>
<h4 id="桌面返回可见"><a href="#桌面返回可见" class="headerlink" title="桌面返回可见"></a>桌面返回可见</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Restart</div><div class="line">MainActivity <span class="literal">on</span>Start</div><div class="line">MainActivity <span class="literal">on</span>Resume</div></pre></td></tr></table></figure>
<h4 id="锁屏"><a href="#锁屏" class="headerlink" title="锁屏"></a>锁屏</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Pause</div><div class="line">MainActivity <span class="literal">on</span>Stop</div></pre></td></tr></table></figure>
<h4 id="解锁屏"><a href="#解锁屏" class="headerlink" title="解锁屏"></a>解锁屏</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">MainActivity</span> <span class="literal">on</span>Restart</div><div class="line">MainActivity <span class="literal">on</span>Start</div><div class="line">MainActivity <span class="literal">on</span>Resume</div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>onStart 开始到 onStop 之前， Activity 可见。<br>onResume 开始到 onPause 之前， Activity 可接受用户交互。<br>在新Activity启动之前，栈顶的Activity需要先onPause后，新Activity才能启动。所以不能在onPause执行耗时操作。</p>
</blockquote>
<h2 id="Activity-数据传递"><a href="#Activity-数据传递" class="headerlink" title="Activity 数据传递"></a>Activity 数据传递</h2><p>Activity 传递数据一般有以下几种方式：</p>
<h3 id="Intent-传递数据"><a href="#Intent-传递数据" class="headerlink" title="Intent 传递数据"></a>Intent 传递数据</h3><p>MainActivity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent intent=<span class="keyword">new</span> Intent();  </div><div class="line">intent.setClass(MainActivity.<span class="keyword">this</span>, OtherActivity.class);  </div><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">bundle.putString(KEY, VALUE);</div><div class="line">intent.putExtras(bundle);  </div><div class="line">startActivity（intent）;</div></pre></td></tr></table></figure>
<p>OtherActivity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = getIntent();  </div><div class="line">Bundle bundle = intent.getEtras();  </div><div class="line">String value = bundle.getString(KEY);</div></pre></td></tr></table></figure>
<p>利用 Intent 对象在 Activity 之间传递数据是 Android 开发最常用的方式。<br>利用 Intent 对象可以传递基本数据类型，以及一些可序列化的对象。</p>
<h3 id="public-型的静态变量"><a href="#public-型的静态变量" class="headerlink" title="public 型的静态变量"></a>public 型的静态变量</h3><p>public 型的静态变量，在类被加载的时候，就被创建在静态存储区，不依赖于对象。</p>
<h3 id="Application-对象"><a href="#Application-对象" class="headerlink" title="Application 对象"></a>Application 对象</h3><p>在整个应用程序中就一个Application单例，它的生命周期贯穿整个程序，堆内存中只存在一个对象实例，所以程序内所有它的引用指向的是同一块堆内存，所以可以在不同activity对application实例变量进行值的存取。<br><em>不推荐</em>。</p>
<h3 id="Clipboard-剪切板"><a href="#Clipboard-剪切板" class="headerlink" title="Clipboard 剪切板"></a>Clipboard 剪切板</h3><p>ClipboardManager：该类是系统剪切板服务的接口，用来放入或取出全局剪切板中的文本。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ClipboardManager clipboardManager = (ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);</div><div class="line"></div><div class="line">clipboardManager.setText(DATA.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClipboardManager clipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);  </div><div class="line">String data = clipboardManager.getText().toString();</div></pre></td></tr></table></figure>
<p>Clipboard 也可以传递可序列化对象。</p>
<h3 id="文件传值"><a href="#文件传值" class="headerlink" title="文件传值"></a>文件传值</h3><p>通过向本地文件写入和读取来传递数据。<br>常用的如 SharedPrefrences 对象等。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>你自己想吧！</p>
<h2 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h2><p>启动模式,简单地说就是 Activity 启动时的策略，在AndroidManifest.xml 中的标签的 android:launchMode 属性设置；</p>
<p>启动模式有4种，分别为 <strong>standard、singleTop、singleTask、singleInstance；</strong></p>
<h3 id="standard-模式"><a href="#standard-模式" class="headerlink" title="standard 模式"></a>standard 模式</h3><p>每次 startActivity 时，都创建 Activity 实例，并放入任务栈，该任务栈中，可以有多个同类 Activity 的实例。</p>
<p><strong>应用场景</strong>：Your idea。</p>
<h3 id="singleTop-模式"><a href="#singleTop-模式" class="headerlink" title="singleTop 模式"></a>singleTop 模式</h3><p>栈顶不是该类型的 Activity，则创建一个新的 Activity。否则，回调该  Activity 实例的 onNewIntent 方法。</p>
<p><strong>应用场景</strong>：接收通知消息启动的页面。</p>
<p>例如，对于推送比较频繁的应用，如果收到多个推送，每次都打开一个页面显示内容是不妥的。</p>
<h3 id="singleTask-模式"><a href="#singleTask-模式" class="headerlink" title="singleTask 模式"></a>singleTask 模式</h3><p>任务栈中不存在启动 Activity 的实例，则创建 Activity 放入任务栈。<br>否则，回调该 Activity 的 onNewIntent 方法，并将该 Activity 置于栈顶，其以上的 Activity 都被弹出 (pop)。<strong>[onNewIntent + clearTop]</strong></p>
<p><strong>应用场景</strong>：作为应用的入口点。</p>
<p>例如，对于浏览器的主界面，不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走 onNewIntent ，并且会清空主界面上面的其他页面。</p>
<h3 id="singleInstance-模式"><a href="#singleInstance-模式" class="headerlink" title="singleInstance 模式"></a>singleInstance 模式</h3><p>回退栈中，只有这一个Activity，没有其他Activity。</p>
<p><strong>应用场景</strong>：闹铃的响铃界面。正在进行 QQ 聊天室时，闹铃响了，弹出一个对话形式的（以 SingleInstance 加载模式打开的）AlarmActivity，按了返回键之后回到 QQ 聊天界面，这是因为 Alarm Activity 所在的任务栈只有它一个元素， 因此退出之后这个任务栈空了。如果是以 SingleTask 打开 AlarmActivity，那么当闹铃响了的时候，按返回键应该进入闹铃设置界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.buimg.com/588795/f44c5bdc30a8cc26.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;唉！最近拖延症又犯了&lt;/p&gt;

&lt;blockquote
    
    </summary>
    
      <category term="Android" scheme="https://githubhaohao.github.io/categories/Android/"/>
    
      <category term="四大组件" scheme="https://githubhaohao.github.io/categories/Android/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="Activity" scheme="https://githubhaohao.github.io/tags/Activity/"/>
    
  </entry>
  
</feed>
