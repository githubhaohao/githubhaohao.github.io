<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[MVVM，RxJava 和 Retrofit 的一次实践]]></title>
      <url>%2F2017%2F02%2F12%2FMVVM%EF%BC%8CRxJava%E5%92%8CRetrofit%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[春节后的第一篇博客 在GitHub上看了几个关于MVVM设计模式的例子，发现他们并没有做到 View 层与 Model 层逻辑的完全分离，以此实践作为总结。原创文章，转载请注明出处:haohaochang.cn 效果预览 准备知识MVC 视图（View）：用户界面。 控制器（Controller）：业务逻辑 模型（Model）：数据保存 View 传送指令到 Controller Controller 完成业务逻辑后，要求 Model 改变状态 Model 将新的数据发送到 View，使用户得到反馈 缺陷:View 和 Model 是相互可知，耦合性大，像 Activity 或者 Fragment 既是 Controller 层，由是 View 层，造成工程的可扩展性可维护性非常差。 MVP 在 MVP 设计模式中，Controller 变成了 Presenter。 各层之间的通信，都是双向的。 View 与 Model 不直接发生联系，都通过 Presenter 进行间接通信。 Model 层与 Presenter 层，Presenter 层与 View 层之间通过接口建立联系。 采用 MVP 设计模式，Activity 与 Fragment 只位于 View 层。 MVP 的缺陷在于:由于我们使用了接口的方式去连接 View 层和 Presenter 层，这样就导致了一个问题，当你的页面逻辑很复杂的时候，你的接口会有很多，如果你的 app 中有很多个这样复杂的页面，维护接口的成本就会变的非常的大。 MVVM MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。区别在于: View 层与 ViewModel 层通过DataBinding相互绑定，View的变动，自动反映在 ViewModel，反之亦然。 RxJava RxJava 在 GitHub 主页上的自我介绍是 “a library for composing asynchronous and event-based programs using observable sequences for the Java VM”（一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库）。 Rx 是微软 .Net 的一个响应式扩展，Rx 借助可观测的序列提供一种简单的方式来创建异步的，基于事件驱动的程序。2012 年 Netflix 为了应对不断增长的业务需求开始将 .NET Rx 迁移到 JVM 上面。并于 13 年二月份正式向外展示了 RxJava 。 从语义的角度来看， RxJava 就是 .NET Rx 。从语法的角度来看， Netflix 考虑到了对应每个 Rx 方法,保留了 Java 代码规范和基本的模式。 RxJava 本质上是一个异步操作库，是一个能让你用极其简洁的逻辑去处理繁琐复杂任务的异步事件库。 简而言之，RxJava 可以用几个关键字概括：简洁，队列化，异步。 Retrofit 一个 Android 和 Java 上 HTTP 库（利用注解和 okhttp 来实现和服务器的数据交互）。 Retrofit 官方文档:http://square.github.io/retrofit/ DataBinding 在今年的Google IO 2015 中，Google 在 support-v7 中新增了 Data Binding，使用 Data Binding可以直接在布局的 xml 中绑定布局与数据，从而简化代码，Android Data Binding是Android 的 MVVM 框架。因为 Data Binding 是包含在 support-v7 包里面的，所以可以向下兼容到最低 Android 2.1 (API level 7+). 实践直接上代码。 依赖的第三方类库123456compile 'io.reactivex:rxjava:1.1.0'compile 'io.reactivex:rxandroid:1.1.0'compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4'compile 'com.github.bumptech.glide:glide:3.7.0' APIhttps://api.douban.com/v2/movie/top250?start=0&amp;count=20 引入DataBinding1234567android &#123; ...... dataBinding &#123; enabled = true &#125;&#125; 工程目录结构 MVVM 之 ViewMainActivity.java 1getFragmentManager().beginTransaction().add(R.id.movie_fragment, MovieFragment.getInstance()).commit(); MovieFragment.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.jc.mvvmrxjavaretrofitsample.view;import android.app.Fragment;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.LinearLayoutManager;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.jc.mvvmrxjavaretrofitsample.R;import com.jc.mvvmrxjavaretrofitsample.databinding.MovieFragmentBinding;import com.jc.mvvmrxjavaretrofitsample.viewModel.MainViewModel;/** * Created by HaohaoChang on 2017/2/11. */public class MovieFragment extends Fragment implements CompletedListener,SwipeRefreshLayout.OnRefreshListener&#123; private static String TAG = MovieFragment.class.getSimpleName(); private MainViewModel viewModel; private MovieFragmentBinding movieFragmentBinding; private MovieAdapter movieAdapter; public static MovieFragment getInstance() &#123; return new MovieFragment(); &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View contentView = inflater.inflate(R.layout.movie_fragment, container, false); movieFragmentBinding = MovieFragmentBinding.bind(contentView); initData(); return contentView; &#125; private void initData() &#123; movieAdapter = new MovieAdapter(); movieFragmentBinding.recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false)); movieFragmentBinding.recyclerView.setItemAnimator(new DefaultItemAnimator()); movieFragmentBinding.recyclerView.setAdapter(movieAdapter); movieFragmentBinding.swipeRefreshLayout.setColorSchemeResources(R.color.colorAccent, R.color.colorPrimary, R.color.colorPrimaryDark); movieFragmentBinding.swipeRefreshLayout.setOnRefreshListener(this); viewModel = new MainViewModel(movieAdapter,this); movieFragmentBinding.setViewModel(viewModel); &#125; @Override public void onRefresh() &#123; movieAdapter.clearItems(); viewModel.refreshData(); &#125; @Override public void onCompleted() &#123; if (movieFragmentBinding.swipeRefreshLayout.isRefreshing()) &#123; movieFragmentBinding.swipeRefreshLayout.setRefreshing(false); &#125; &#125;&#125; activity_main.xml 1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:fitsSystemWindows="true" tools:context=".view.MainActivity"&gt; &lt;android.support.design.widget.AppBarLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:theme="@style/AppTheme.AppBarOverlay"&gt; &lt;android.support.v7.widget.Toolbar android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="?attr/actionBarSize" android:background="?attr/colorPrimary" app:popupTheme="@style/AppTheme.PopupOverlay" /&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;FrameLayout android:layout_marginTop="?attr/actionBarSize" android:layout_width="match_parent" android:layout_height="match_parent" android:id="@+id/movie_fragment"/&gt; &lt;android.support.design.widget.FloatingActionButton android:id="@+id/fab" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="bottom|end" android:layout_margin="@dimen/fab_margin" android:src="@android:drawable/ic_dialog_email" /&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; movie_fragment.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;layout xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;data&gt; &lt;variable name="viewModel" type="com.jc.mvvmrxjavaretrofitsample.viewModel.MainViewModel"/&gt; &lt;/data&gt; &lt;RelativeLayout android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.widget.SwipeRefreshLayout android:visibility="@&#123;viewModel.contentViewVisibility&#125;" android:id="@+id/swipe_refresh_layout" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v7.widget.RecyclerView android:id="@+id/recycler_view" android:background="#ddd" android:layout_width="match_parent" android:layout_height="match_parent" android:padding="8dp"&gt; &lt;/android.support.v7.widget.RecyclerView&gt; &lt;/android.support.v4.widget.SwipeRefreshLayout&gt; &lt;ProgressBar style="?android:attr/progressBarStyleLarge" android:id="@+id/progress_bar" android:visibility="@&#123;viewModel.progressBarVisibility&#125;" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_centerInParent="true"/&gt; &lt;LinearLayout android:layout_width="match_parent" android:id="@+id/error_info_layout" android:visibility="@&#123;viewModel.errorInfoLayoutVisibility&#125;" android:orientation="vertical" android:layout_height="match_parent"&gt; &lt;TextView android:layout_gravity="center" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@&#123;viewModel.exception&#125;"/&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt;&lt;/layout&gt; movie_item.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;layout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/tools"&gt; &lt;data&gt; &lt;variable name="viewModel" type="com.jc.mvvmrxjavaretrofitsample.viewModel.MovieViewModel"/&gt; &lt;/data&gt; &lt;android.support.v7.widget.CardView xmlns:card_view="http://schemas.android.com/apk/res-auto" android:id="@+id/card_view" android:layout_width="match_parent" android:layout_height="wrap_content" card_view:cardCornerRadius="4dp" card_view:cardBackgroundColor="@color/background" card_view:cardUseCompatPadding="true"&gt; &lt;LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content" android:orientation="horizontal"&gt; &lt;ImageView android:layout_margin="8dp" android:layout_width="60dp" android:layout_height="100dp" android:src="@drawable/cover" app:imageUrl="@&#123;viewModel.imageUrl&#125;" android:id="@+id/cover"/&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="match_parent" android:layout_margin="8dp" android:orientation="vertical"&gt; &lt;TextView android:textColor="@android:color/black" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@&#123;viewModel.title&#125;" android:textSize="12sp"/&gt; &lt;LinearLayout android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginTop="4dp" android:orientation="horizontal"&gt; &lt;android.support.v7.widget.AppCompatRatingBar android:id="@+id/ratingBar" style="?android:attr/ratingBarStyleSmall" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center_vertical" android:isIndicator="true" android:max="10" android:numStars="5" android:rating="@&#123;viewModel.rating&#125;" /&gt; &lt;TextView android:id="@+id/rating_text" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_gravity="center_vertical" android:layout_marginLeft="6dp" android:text="@&#123;viewModel.ratingText&#125;" android:textColor="?android:attr/textColorSecondary" android:textSize="10sp" /&gt; &lt;/LinearLayout&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:textColor="?android:attr/textColorSecondary" android:textSize="10sp" android:text="@&#123;viewModel.movieType&#125;" android:id="@+id/movie_type_text" android:layout_marginTop="6dp" /&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:textColor="?android:attr/textColorSecondary" android:textSize="10sp" android:text="@&#123;viewModel.year&#125;" android:id="@+id/year_text" android:layout_marginTop="6dp" /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/android.support.v7.widget.CardView&gt;&lt;/layout&gt; MovieAdapter.java 12345678910111213141516171819202122232425262728293031323334353637383940414243public class MovieAdapter extends RecyclerView.Adapter&lt;MovieAdapter.BindingHolder&gt; &#123; private List&lt;Movie&gt; movies; public MovieAdapter() &#123; movies = new ArrayList&lt;&gt;(); &#125; @Override public BindingHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; MovieItemBinding itemBinding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.movie_item, parent, false); return new BindingHolder(itemBinding); &#125; @Override public void onBindViewHolder(BindingHolder holder, int position) &#123; MovieViewModel movieViewModel = new MovieViewModel(movies.get(position)); holder.itemBinding.setViewModel(movieViewModel); &#125; @Override public int getItemCount() &#123; return movies.size(); &#125; public void addItem(Movie movie) &#123; movies.add(movie); notifyItemInserted(movies.size() - 1); &#125; public void clearItems() &#123; movies.clear(); notifyDataSetChanged(); &#125; public static class BindingHolder extends RecyclerView.ViewHolder &#123; private MovieItemBinding itemBinding; public BindingHolder(MovieItemBinding itemBinding) &#123; super(itemBinding.cardView); this.itemBinding = itemBinding; &#125; &#125;&#125; 回调接口 CompletedListener.java 123public interface CompletedListener &#123; void onCompleted();&#125; MVVM 之 ViewModelMainViewModel.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.jc.mvvmrxjavaretrofitsample.viewModel;import android.databinding.ObservableField;import android.util.Log;import android.view.View;import com.jc.mvvmrxjavaretrofitsample.model.data.RetrofitHelper;import com.jc.mvvmrxjavaretrofitsample.model.entity.Movie;import com.jc.mvvmrxjavaretrofitsample.view.CompletedListener;import com.jc.mvvmrxjavaretrofitsample.view.MovieAdapter;import rx.Subscriber;/** * Created by HaohaoChang on 2017/2/11. */public class MainViewModel &#123; public ObservableField&lt;Integer&gt; contentViewVisibility; public ObservableField&lt;Integer&gt; progressBarVisibility; public ObservableField&lt;Integer&gt; errorInfoLayoutVisibility; public ObservableField&lt;String&gt; exception; private Subscriber&lt;Movie&gt; subscriber; private MovieAdapter movieAdapter; private CompletedListener completedListener; public MainViewModel(MovieAdapter movieAdapter,CompletedListener completedListener) &#123; this.movieAdapter = movieAdapter; this.completedListener = completedListener; initData(); getMovies(); &#125; private void getMovies() &#123; subscriber = new Subscriber&lt;Movie&gt;() &#123; @Override public void onCompleted() &#123; Log.d("[MainViewModel]", "onCompleted"); hideAll(); contentViewVisibility.set(View.VISIBLE); completedListener.onCompleted(); &#125; @Override public void onError(Throwable e) &#123; hideAll(); errorInfoLayoutVisibility.set(View.VISIBLE); exception.set(e.getMessage()); &#125; @Override public void onNext(Movie movie) &#123; movieAdapter.addItem(movie); &#125; &#125;; RetrofitHelper.getInstance().getMovies(subscriber, 0, 20); &#125; public void refreshData() &#123; getMovies(); &#125; private void initData() &#123; contentViewVisibility = new ObservableField&lt;&gt;(); progressBarVisibility = new ObservableField&lt;&gt;(); errorInfoLayoutVisibility = new ObservableField&lt;&gt;(); exception = new ObservableField&lt;&gt;(); contentViewVisibility.set(View.GONE); errorInfoLayoutVisibility.set(View.GONE); progressBarVisibility.set(View.VISIBLE); &#125; private void hideAll()&#123; contentViewVisibility.set(View.GONE); errorInfoLayoutVisibility.set(View.GONE); progressBarVisibility.set(View.GONE); &#125;&#125; MovieViewModel.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.jc.mvvmrxjavaretrofitsample.viewModel;import android.databinding.BaseObservable;import android.databinding.BindingAdapter;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.jc.mvvmrxjavaretrofitsample.R;import com.jc.mvvmrxjavaretrofitsample.model.entity.Movie;/** * Created by HaohaoChang on 2017/2/11. */public class MovieViewModel extends BaseObservable &#123; private Movie movie; public MovieViewModel(Movie movie) &#123; this.movie = movie; &#125; public String getCoverUrl() &#123; return movie.getImages().getSmall(); &#125; public String getTitle() &#123; return movie.getTitle(); &#125; public float getRating() &#123; return movie.getRating().getAverage(); &#125; public String getRatingText()&#123; return String.valueOf(movie.getRating().getAverage()); &#125; public String getYear() &#123; return movie.getYear(); &#125; public String getMovieType() &#123; StringBuilder builder = new StringBuilder(); for (String s : movie.getGenres()) &#123; builder.append(s + " "); &#125; return builder.toString(); &#125; public String getImageUrl() &#123; return movie.getImages().getSmall(); &#125; @BindingAdapter(&#123;"app:imageUrl"&#125;) public static void loadImage(ImageView imageView,String url) &#123; Glide.with(imageView.getContext()) .load(url) .placeholder(R.drawable.cover) .error(R.drawable.cover) .into(imageView); &#125;&#125; MVVM 之 ModelDouBanMovieService.java 123456public interface DouBanMovieService &#123; String BASE_URL = "https://api.douban.com/v2/movie/"; @GET("top250") Observable&lt;Response&lt;List&lt;Movie&gt;&gt;&gt; getMovies(@Query("start") int start, @Query("count") int count);&#125; RetrofitHelper.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class RetrofitHelper &#123; private static final int DEFAULT_TIMEOUT = 10; private Retrofit retrofit; private DouBanMovieService movieService; OkHttpClient.Builder builder; /** * 获取RetrofitHelper对象的单例 * */ private static class Singleton &#123; private static final RetrofitHelper INSTANCE = new RetrofitHelper(); &#125; public static RetrofitHelper getInstance() &#123; return Singleton.INSTANCE; &#125; public RetrofitHelper() &#123; builder = new OkHttpClient.Builder(); builder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); retrofit = new Retrofit.Builder() .client(builder.build()) .addConverterFactory(GsonConverterFactory.create()) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .baseUrl(DouBanMovieService.BASE_URL) .build(); movieService = retrofit.create(DouBanMovieService.class); &#125; public void getMovies(Subscriber&lt;Movie&gt; subscriber, int start, int count) &#123; movieService.getMovies(start, count) .map(new Func1&lt;Response&lt;List&lt;Movie&gt;&gt;, List&lt;Movie&gt;&gt;() &#123; @Override public List&lt;Movie&gt; call(Response&lt;List&lt;Movie&gt;&gt; listResponse) &#123; return listResponse.getSubjects(); &#125; &#125;) .flatMap(new Func1&lt;List&lt;Movie&gt;, Observable&lt;Movie&gt;&gt;() &#123; @Override public Observable&lt;Movie&gt; call(List&lt;Movie&gt; movies) &#123; return Observable.from(movies); &#125; &#125;) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(subscriber); &#125;&#125; 还有 entity 类，这里就不贴出来了。 详细源码：https://github.com/githubhaohao/MVVMRxJavaRetrofitSample]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ES6入门: 需要掌握的基本语法]]></title>
      <url>%2F2017%2F01%2F25%2FES6%E5%85%A5%E9%97%A8-%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[ES6是什么1. ES (ECMAScript) 和JavaScript的关系ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现（另外的ECMAScript方言还有Jscript和ActionScript）。日常场合，这两个词是可以互换的。 阮一峰ECMAScript 2. ES6和ECMAScript 2015的关系ES6，一般是指ECMAScript 2015标准，但有时也表示一种泛指，是指JavaScript语言的下一代标准。涵盖了ECMAScript 2015，2016，2017等版本，而ECMAScript 2015则是正式名称，特指该年发布的正式版本的语言标准。 Babel转码器 Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。去官网选择自己习惯的工具来使用使用Babel吧！ let和const命令let和const与var类似都是用来声明变量的，但又有各自不同的用途。let与var对比，看代码： 12345678var name = 'haohao';if(true)&#123; var name = 'jack'; console.log(name) //jack&#125; console.log(name) //jack ES5只有全局作用域和块级作用域，导致内层变量覆盖外层变量，使得两次输出的都是jack。而let为JS新增了块级作用域，因此它声明的变量只在let命令所在的代码块有效，具体看代码： 12345678let name = 'haohao';if(true)&#123; let name = 'jack'; console.log(name) //jack&#125; console.log(name) //haohao const用来声明常量，一旦声明就不能改变。当我们尝试改变const声明的常量时，浏览器就会报错。 123const PI = Math.PI PI = 23 //Module build failed: SyntaxError: /es6/app.js: "PI" is read-only 引用其他Module中声明的变量，用const来声明可以避免对其重命名而导致出现BUG。 1const &#123;width, height&#125; = window.get('Dimension'); 解构 (Destructuring)解构 (Destructuring) 是指按照某种模式，从对象或数组中提取值对指定的变量进行赋值。 ES6之前为变量赋值： 123let name = 'jack';let addr = 'cn';let sex = 'male'; ES6可以这样： 12345let [name,addr,sex] = ['jack','cn','male'];name //jackaddr //cnsex //male 默认值: 12345let [name,addr,sex = 'male'] = ['jack','cn'];name //jackaddr //cnsex //male 关于对象以前这样： 1234567let name = 'jack';let addr = 'cn';let sex = 'male';let student = &#123; name:name, addr:addr, sex:sex &#125;console.log(student);//Object &#123; name:'jack', addr:'cn', sex:'male' &#125; ES6可以这样： 1234567let name = 'jack';let addr = 'cn';let sex = 'male';let student = &#123; name, addr, sex &#125;console.log(student);//Object &#123; name:'jack', addr:'cn', sex:'male' &#125; 还有这样: 123456let student = &#123; name:'kene', addr:'us', sex:'male' &#125;let &#123; name, sex &#125; = student;let &#123; addr &#125; = student;console.log(name, addr, sex);//kene us male 模板字符串 (template string)传统模板字符串： 12345$('#showId').append( "Hello，everyone!" + "I am Jack."+ "I like eat " + fruits + "!" ); ES6模板字符串： 12345$('#showId').append(` Hello，everyone! I am Jack. I like eat $&#123;fruits&#125;! `); 反引号标识起始，${}引入变量，所有的空格缩进保存输出。 箭头函数 (arrow functions)ES6允许使用“箭头”（=&gt;）定义函数。 12var func = i =&gt; i + 1;var func = (a, b) =&gt; &#123;a++; b++; return a + b;&#125; 上面的箭头函数等同于： 123456789var func = function(i) &#123; return i + 1;&#125;;var func = function(a, b) &#123; a++; b++; return a + b;&#125; 当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。有一种使用场景： 123456789101112131415class Person &#123; constructor()&#123; this.name = 'person'; &#125; sayHello()&#123; setTimeout(function()&#123; console.log(this.name + 'says hello.'); &#125;); &#125;&#125;let p = new Person();p.sayHello();//undefined says hello. 运行上面的代码会报错，这是因为setTimeout中的this指向的是全局对象。有了箭头函数上述问题便可迎刃而解： 123456789101112131415class Person &#123; constructor()&#123; this.name = 'person'; &#125; sayHello()&#123; setTimeout(() =&gt; &#123; console.log(this.name + 'says hello.'); &#125;); &#125;&#125;let p = new Person();p.sayHello();//person says hello. 类 (Class)ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。 123456789101112131415class Person &#123; constructor()&#123; this.name = 'person'; &#125; sayHello()&#123; setTimeout(() =&gt; &#123; console.log(this.name + 'says hello.'); &#125;); &#125;&#125;let p = new Person();p.sayHello();//person says hello. 上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。 ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。 1234567891011class Student extends Person &#123; constructor()&#123; super(); this.name = 'student'; &#125;&#125;let s = new Student();s.sayHello();//student says hello. 上面定义了一个Student类，该类通过extends关键字，继承了Person类的所有属性和方法。 子类Student必须在constructor方法中调用super方法，否则新建实例时会报错,子类就得不到this对象。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。 export和importES6的模块化功能。以前这样写： 12345678//content.jsmodule.exports = 'apple';//index.jsvar fruits = require('./content.js');console.log(fruits);//apple ES6这样： 12345678//content.jsexport default 'apple';//index.jsimport fruits from './content.js';console.log(fruits);//apple 深入点，看代码： 12345678910111213141516171819//content.jsexport const KIND = 'Thailand Apple';export default 'apple';export function say()&#123; return 'I like apple!';&#125; //index.jsimport fruits, &#123; say, KIND &#125; from './content.js';//如果只导入say //import &#123; say &#125; from './content.js';console.log(fruits);console.log(KIND);say();//apple //Thailand Apple//I like apple! 修改变量名。 123456789101112131415161718//content.jsexport const KIND = 'Thailand Apple';export default 'apple';export function say()&#123; return 'I like apple!';&#125; //index.jsimport fruits, &#123; say, KIND as type &#125; from './content.js';console.log(fruits);console.log(type);say();//apple //Thailand Apple//I like apple! 整体加载,*为指定的一个对象。 123456789101112131415161718//content.jsexport const KIND = 'Thailand Apple';export default 'apple';export function say()&#123; return 'I like apple!';&#125; //index.jsimport fruits, * as content from './content.js';console.log(fruits);console.log(content.type);content.say();//apple //Thailand Apple//I like apple!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[分分钟接入Tinker]]></title>
      <url>%2F2017%2F01%2F18%2F%E5%88%86%E5%88%86%E9%92%9F%E6%8E%A5%E5%85%A5Tinker%2F</url>
      <content type="text"><![CDATA[Tinker是什么Tinker是微信官方的Android热补丁解决方案，它支持动态下发代码、So库以及资源，让应用能够在不需要重新安装的情况下实现更新。当然，你也可以使用Tinker来更新你的插件。它主要包括以下几个部分： 1.gradle编译插件: tinker-patch-gradle-plugin 2.核心sdk库: tinker-android-lib 3.非gradle编译用户的命令行版本: tinker-patch-cli.jar Tencenttinker 引入依赖和插件在你项目根目录下的 build.gradle 文件中添加: 12345buildscript &#123; dependencies &#123; classpath ('com.tencent.tinker:tinker-patch-gradle-plugin:1.7.6') &#125;&#125; 在 app/build.gradle 文件中添加依赖和插件： 1234567891011dependencies &#123; //optional, help to generate the final application provided('com.tencent.tinker:tinker-android-anno:1.7.6') //tinker's main Android lib compile('com.tencent.tinker:tinker-android-lib:1.7.6') compile "com.android.support:multidex:1.0.1"&#125;......apply plugin: 'com.tencent.tinker.patch' 添加task添加task tinkerPatch 在 app/build.gradle 文件中,其中 oldApk 路径为出现BUG的APK路径（自定义），添加完之后Async Project。 123456789101112131415161718192021222324252627282930313233343536373839404142tinkerPatch &#123; oldApk = "J://tinkerSample/app-debug.apk" ignoreWarning = true useSign = true buildConfig &#123; applyMapping = null applyResourceMapping = null tinkerId = "tinkerId" &#125; dex &#123; dexMode = "jar" usePreGeneratedPatchDex = false pattern = ["classes*.dex", "assets/secondary-dex-?.jar"] loader = ["com.tencent.tinker.loader.*", "com.jc.tinkersample.SimpleApp", "com.jc.tinkersample.BaseBuildInfo" ] &#125; lib &#123; pattern = ["lib/armeabi/*.so"] &#125; res &#123; pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"] ignoreChange = ["assets/sample_meta.txt"] largeModSize = 100 &#125; packageConfig &#123; configField("patchMessage", "tinker is sample to use") configField("platform", "all") configField("patchVersion", "1.0") &#125; sevenZip &#123; zipArtifact = "com.tencent.mm:SevenZip:1.1.10" &#125;&#125; 接入Tinker自定义Application继承 DefaultApplicationLike 类，也可以自定义扩展。 12345678910111213141516171819202122@DefaultLifeCycle( application = "com.jc.tinkersample.SimpleApp", flags = ShareConstants.TINKER_ENABLE_ALL, loadVerifyFlag = false)public class SimpleAppLike extends DefaultApplicationLike &#123; public SimpleAppLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent, Resources[] resources, ClassLoader[] classLoader, AssetManager[] assetManager) &#123; super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent, resources, classLoader, assetManager); &#125; @Override public void onBaseContextAttached(Context base) &#123; super.onBaseContextAttached(base); MultiDex.install(base); TinkerInstaller.install(this); &#125; @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) &#123; getApplication().registerActivityLifecycleCallbacks(callback); &#125;&#125; 运行安装到你的手机里，然后把 app-debug.apk 放到 oldApk 对应的路径下，用于生成 patch.apk。 然后，修复你项目的bug（这里只是象征性地修改了一下Text），打开Android Studio 右侧的gradle project 运行 tinkerPatchDebug task生成patch.apk。 找到patch_signed_7zip.apk 文件。 复制 patch_signed_7zip.apk 文件把它放到手机外部存储目录下 （这里为根目录）。 12345678String path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/patch_signed_7zip.apk";File file = new File(path);if (file.exists())&#123; Toast.makeText(this, "patch.apk is existing.", Toast.LENGTH_SHORT).show(); TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), path);&#125;else&#123; Toast.makeText(this,"patch.apk is inexistent.", Toast.LENGTH_SHORT).show();&#125; 调用Tinker API TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), path); 进行热修复，重启app热修复完成。 详细代码https://github.com/githubhaohao/TinkerSample 更多 微信Android热补丁实践演进之路 Android N混合编译与对热补丁影响深度解析 微信Tinker的一切都在这里，包括源码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F12%2Fcover%2F</url>
      <content type="text"><![CDATA[合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。 老子 不忘初心，不惧未来。haohao2017/01/14]]></content>
    </entry>

    
  
  
</search>
